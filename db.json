{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/teamIntro/index/1.jpg","path":"teamIntro/index/1.jpg","modified":0,"renderable":0},{"_id":"source/teamIntro/index/浙江大学东四-510超算集群.JPG","path":"teamIntro/index/浙江大学东四-510超算集群.JPG","modified":0,"renderable":0},{"_id":"source/teamIntro/index/陈建海老师.jpg","path":"teamIntro/index/陈建海老师.jpg","modified":0,"renderable":0},{"_id":"themes/fish/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/dialog.css","path":"css/dialog.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/header-post.css","path":"css/header-post.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/vdonate.css","path":"css/vdonate.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/fish/source/js/dialog.js","path":"js/dialog.js","modified":0,"renderable":1},{"_id":"themes/fish/source/js/home.js","path":"js/home.js","modified":0,"renderable":1},{"_id":"themes/fish/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/fish/source/js/scripts.js","path":"js/scripts.js","modified":0,"renderable":1},{"_id":"themes/fish/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/teamIntro/index/2.jpg","path":"teamIntro/index/2.jpg","modified":0,"renderable":0},{"_id":"themes/fish/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/fish/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/fish/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/fish/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/ZJUSCT_Header_Logo.png","path":"css/images/ZJUSCT_Header_Logo.png","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/ZJUSCT_Icon_Black.png","path":"css/images/ZJUSCT_Icon_Black.png","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/ZJUSCT_Icon_White.png","path":"css/images/ZJUSCT_Icon_White.png","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/computer3.jpg","path":"css/images/computer3.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/computer5.jpg","path":"css/images/computer5.jpg","modified":0,"renderable":1},{"_id":"source/about/index/历年获奖情况.JPG","path":"about/index/历年获奖情况.JPG","modified":0,"renderable":0},{"_id":"themes/fish/source/css/images/computer.jpg","path":"css/images/computer.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/computer2.jpg","path":"css/images/computer2.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/prize.jpg","path":"css/images/prize.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/prize2.jpg","path":"css/images/prize2.jpg","modified":0,"renderable":1},{"_id":"themes/fish/source/css/images/computer4.jpg","path":"css/images/computer4.jpg","modified":0,"renderable":1},{"_id":"source/about/index/ASC比赛集群.png","path":"about/index/ASC比赛集群.png","modified":0,"renderable":0},{"_id":"source/teamIntro/index/ourASC17.png","path":"teamIntro/index/ourASC17.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/fish/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1557628258571},{"_id":"themes/fish/LICENSE","hash":"df913ae888823f1551d5f1837902f7ccb2634459","modified":1557628258573},{"_id":"themes/fish/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1557628258572},{"_id":"themes/fish/_config.yml","hash":"3df147902be86e45445602e7eea7baf90aff259a","modified":1557628258574},{"_id":"themes/fish/package.json","hash":"fb10230db7e57d1c199cc858aa010b087612deaf","modified":1557628258650},{"_id":"source/_posts/Image-Restoration-SimpleVersion.md","hash":"141a924f7b0239ac3bb4fedaa2a457a016b4b62e","modified":1557626564718},{"_id":"source/_posts/Install-MySQL-on-CentOS7-Inside-GFW.md","hash":"ae6005a7b9c6c91700dc6a93a43586e256b52468","modified":1557628258481},{"_id":"source/_posts/Virtual-Memory-and-TLB.md","hash":"36e6bf1e1f1633b06020a33d6108a9ddcd8326e2","modified":1557628258482},{"_id":"source/_posts/bp.md","hash":"631cd20588efa1db89e0d6a7f65125761c0f221a","modified":1557628258501},{"_id":"source/_posts/cuda.md","hash":"9cbc0be637cd85277708e04e0dc93186832644ab","modified":1557628258505},{"_id":"source/_posts/cuprof.md","hash":"3261e7c14dd621350753eee299de49e0a6392538","modified":1557628258510},{"_id":"source/_posts/first.md","hash":"6d7327df8375deeada8d31ee16c12a10712ee966","modified":1557628258517},{"_id":"source/_posts/tensorflow.md","hash":"a6480f7d03e2df6934d232ccc2d52d40bbe7a742","modified":1557628258519},{"_id":"source/about/index.md","hash":"bd39cf57e321f0e83fa16d3c62daba38e330c039","modified":1557628258533},{"_id":"source/teamIntro/index.md","hash":"390550bbd5e4eb33eee5b212839fa67a455d3496","modified":1557628258550},{"_id":"source/contact/index.md","hash":"7e25fca6014ff901c371d6be80389667fba81f55","modified":1557628258548},{"_id":"themes/fish/languages/de.yml","hash":"2801ddc0807ce707905203a9f2eb9ccced959991","modified":1557628258575},{"_id":"themes/fish/languages/default.yml","hash":"570f53de74ae233b0fe07abb61d2db7bf2a3f755","modified":1557628258576},{"_id":"themes/fish/languages/en.yml","hash":"570f53de74ae233b0fe07abb61d2db7bf2a3f755","modified":1557628258577},{"_id":"themes/fish/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1557628258578},{"_id":"themes/fish/languages/fr.yml","hash":"d67ddc5a00060e67de561b4be7bd14ac4e2d7186","modified":1557628258579},{"_id":"themes/fish/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1557628258580},{"_id":"themes/fish/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1557628258582},{"_id":"themes/fish/languages/pt.yml","hash":"0ec64b7e134e802846125770782fab9590495bcd","modified":1557628258583},{"_id":"themes/fish/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1557628258584},{"_id":"themes/fish/languages/zh-CN.yml","hash":"17d040c8a0b2964b9d5cce305057cb5264169a0d","modified":1557628258585},{"_id":"themes/fish/languages/zh-TW.yml","hash":"34d3b2fb9cc61a3f6df7936868fc8877fe08c842","modified":1557628258586},{"_id":"themes/fish/layout/archive.ejs","hash":"fff20dc39a59641b35bbc921866921375ef584a5","modified":1557628258631},{"_id":"themes/fish/layout/categories.ejs","hash":"5e8ec5304c76f80bcecb710d83c3dead4cab8a2a","modified":1557628258633},{"_id":"themes/fish/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1557628258634},{"_id":"themes/fish/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1557628258635},{"_id":"themes/fish/layout/layout.ejs","hash":"98f75e44f59d66a2e76698dd34df16dad5bae96f","modified":1557628258637},{"_id":"themes/fish/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1557628258638},{"_id":"themes/fish/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1557628258639},{"_id":"themes/fish/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1557628258647},{"_id":"themes/fish/layout/tags.ejs","hash":"f1f8530e856cb7e7bfed044d2117a4d8b374709a","modified":1557628258649},{"_id":"themes/fish/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1557628258652},{"_id":"source/_posts/Image-Restoration-SimpleVersion/0.png","hash":"50f38f71f5d0cb0649b7eb7b93ba0844e44e0c87","modified":1557628258451},{"_id":"source/_posts/Image-Restoration-SimpleVersion/10.png","hash":"53e1881db61214fb71776b7603aff517258d1c37","modified":1557628258455},{"_id":"source/_posts/Image-Restoration-SimpleVersion/15.png","hash":"eacd9a61af61ab7ab1b3f746f84ce313ff4e856a","modified":1557628258464},{"_id":"source/_posts/Image-Restoration-SimpleVersion/3.png","hash":"e45ab7835e4377b23ff9563303bbc61a415341e7","modified":1557628258468},{"_id":"source/_posts/Virtual-Memory-and-TLB/#2.png","hash":"fa97e356cc761f30384e4144097ad09625d9fd3f","modified":1557628258486},{"_id":"source/_posts/Virtual-Memory-and-TLB/#3.png","hash":"bb3b954398867ed55eccce3dd6fa14078ca7cf83","modified":1557628258487},{"_id":"source/_posts/Virtual-Memory-and-TLB/#6.png","hash":"6a86a9abd2fed7eaa45a2bb4d8be961c183fb7af","modified":1557628258490},{"_id":"source/_posts/Virtual-Memory-and-TLB/#4.png","hash":"0e794246b71fe7bb27e06306c3ea899a74548361","modified":1557628258489},{"_id":"source/_posts/bp/neuron.png","hash":"56b45cfe79eedf1b91215e5b341d741219bb2547","modified":1557628258504},{"_id":"source/_posts/cuprof/a.jpg","hash":"733b372aedaa07abb6892817a1e0dbf830a11d11","modified":1557628258511},{"_id":"source/_posts/cuprof/c.jpg","hash":"d1f74401d890988dfbbcbaee5fbb02f8766eb523","modified":1557628258514},{"_id":"source/_posts/cuprof/b.jpg","hash":"3467346099e5a40ed299580a145795ef8bd7110b","modified":1557628258512},{"_id":"source/_posts/first/ttfish.jpeg","hash":"c744603ee38e3401e0ae7bc90bed27411545ab0b","modified":1557628258518},{"_id":"source/_posts/tensorflow/3.png","hash":"7224dc3574dea7ae1d3a9dbcb495e0a0a6d61ff5","modified":1557628258525},{"_id":"source/teamIntro/index/1.jpg","hash":"61a8649158394bb72c892385a9e0abf2bc9e365a","modified":1557628258552},{"_id":"source/teamIntro/index/浙江大学东四-510超算集群.JPG","hash":"828ea5b72794189e5b18522f01dab30cf2c27e72","modified":1557628258568},{"_id":"source/teamIntro/index/陈建海老师.jpg","hash":"77a92ca780b319ccc90c6d4c365dd88bb9c0286f","modified":1557628258569},{"_id":"themes/fish/layout/_partial/after-footer.ejs","hash":"f8383fe82e7dc67a8c6b061b4bb41073f59a5852","modified":1557628258588},{"_id":"themes/fish/layout/_partial/archive.ejs","hash":"11290e1529e50fe7c8953e26e61477635bb4d501","modified":1557628258590},{"_id":"themes/fish/layout/_partial/archive-post.ejs","hash":"7f17ae361df4071091b37fe1420247523d20ed90","modified":1557628258589},{"_id":"themes/fish/layout/_partial/article.ejs","hash":"27bfa3067dcf7475e7b4d208dcf5dc2bd1d18c1d","modified":1557628258592},{"_id":"themes/fish/layout/_partial/baidu-analytics.ejs","hash":"1edc20ced3c255c09405f0750b6c7bdf328af554","modified":1557628258593},{"_id":"themes/fish/layout/_partial/cnzz-analytics.ejs","hash":"1d6f7c86f5b0f2a7636caace94bef3ed12309dce","modified":1557628258594},{"_id":"themes/fish/layout/_partial/comment.ejs","hash":"b9988d2b56eff59bb0e7a6762492359c04b32d9c","modified":1557628258596},{"_id":"themes/fish/layout/_partial/copyright.ejs","hash":"67d8361f7e6eaa9be7b5ca3e97229bfe5f6cc4d7","modified":1557628258597},{"_id":"themes/fish/layout/_partial/dialog.ejs","hash":"4e92f0973eb774fd71a63ce3ac13e33ba18d3d0c","modified":1557628258598},{"_id":"themes/fish/layout/_partial/facebook-sdk.ejs","hash":"8fc5cf7abbfd587057fb86ee028c7f216d30d68c","modified":1557628258599},{"_id":"themes/fish/layout/_partial/footer.ejs","hash":"dc1eb14955c94c9ca84a6e637b5e7075c632da79","modified":1557628258600},{"_id":"themes/fish/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1557628258602},{"_id":"themes/fish/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1557628258603},{"_id":"themes/fish/layout/_partial/head.ejs","hash":"4eb047dcc24ffd60d8e3c39b9e821d5c97fcc6e0","modified":1557628258604},{"_id":"themes/fish/layout/_partial/header-post.ejs","hash":"3b111e70b0d7d8f7e1814c8692f3ea2ea19bd546","modified":1557628258606},{"_id":"themes/fish/layout/_partial/header.ejs","hash":"3c24adff408cce50d7bbef8396f2217693d4ce12","modified":1557628258606},{"_id":"themes/fish/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1557628258608},{"_id":"themes/fish/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1557628258619},{"_id":"themes/fish/layout/_partial/tencent-analytics.ejs","hash":"6a50e6fe7701ff131b2fc0c066a4615dd2a37da7","modified":1557628258620},{"_id":"themes/fish/layout/_widget/archive.ejs","hash":"856a6352a0f8d55f3d2965eea8ad4ec517f6af96","modified":1557628258622},{"_id":"themes/fish/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1557628258623},{"_id":"themes/fish/layout/_widget/curtains.ejs","hash":"d96be843847211664b83b786bfee43fa2f897616","modified":1557628258625},{"_id":"themes/fish/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1557628258626},{"_id":"themes/fish/layout/_widget/social.ejs","hash":"b5aeccb28dd4e4e1b771ca79a8d1d57710b392ff","modified":1557628258627},{"_id":"themes/fish/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1557628258629},{"_id":"themes/fish/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1557628258630},{"_id":"themes/fish/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1557628258642},{"_id":"themes/fish/layout/search/baidu.ejs","hash":"425be969075105b9d373c130f2f29c037fbb5897","modified":1557628258641},{"_id":"themes/fish/layout/search/index.ejs","hash":"48e0d133a808000a60a4ce0d673737c37be2410d","modified":1557628258643},{"_id":"themes/fish/layout/search/insight.ejs","hash":"5205e75f0ceedc38e2bd9904464324ce179b8e25","modified":1557628258645},{"_id":"themes/fish/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1557628258646},{"_id":"themes/fish/source/css/_extend.styl","hash":"3c4dd93884eb25385d837fb975bb311a639ecc1d","modified":1557628258654},{"_id":"themes/fish/source/css/_variables.styl","hash":"cbb703c722fb98b2f08cc803e8b954acdf7b5522","modified":1557628258675},{"_id":"themes/fish/source/css/archive.css","hash":"f7b7c2c431809c49e07c4b9d752fb13e430b39c7","modified":1557628258676},{"_id":"themes/fish/source/css/dialog.css","hash":"c248717aecf61b42e2bbfece61140a5c44911b4b","modified":1557628258681},{"_id":"themes/fish/source/css/header-post.css","hash":"a25fc7c47b2fbf2ca71b1ee6ac2442bf777baf6c","modified":1557628258697},{"_id":"themes/fish/source/css/home.css","hash":"08b449cc39575f77784517e4ac35577bfc4a324f","modified":1557628258698},{"_id":"themes/fish/source/css/vdonate.css","hash":"b43acd89a3d87725d6496a4f780dcf5eb576f866","modified":1557628258727},{"_id":"themes/fish/source/css/style.styl","hash":"4704ff34504b467252f767ce23477d801bb47cd6","modified":1557628258726},{"_id":"themes/fish/source/js/dialog.js","hash":"f982934062fd6b2b385d1b6a6f7fbe4510087210","modified":1557628258751},{"_id":"themes/fish/source/js/home.js","hash":"6534b583d310c57c49cb16aa75f6f33e9af41a92","modified":1557628258753},{"_id":"themes/fish/source/js/insight.js","hash":"4b21b86ea9554d9f5a5da675f72632d9310b26d1","modified":1557628258754},{"_id":"themes/fish/source/js/scripts.js","hash":"7b8531f6fdfeb1590cf096fbf913a63c66e5bbef","modified":1557628258757},{"_id":"themes/fish/source/js/totop.js","hash":"aefa54321fdacd48537be444215bcb8df9190c3b","modified":1557628258758},{"_id":"themes/fish/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557628258729},{"_id":"themes/fish/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557628258732},{"_id":"themes/fish/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557628258733},{"_id":"themes/fish/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557628258730},{"_id":"themes/fish/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557628258734},{"_id":"themes/fish/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557628258736},{"_id":"themes/fish/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1557628258747},{"_id":"themes/fish/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1557628258745},{"_id":"themes/fish/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1557628258748},{"_id":"source/_posts/Image-Restoration-SimpleVersion/4.png","hash":"caef4885647c29fdf9f0dfb12ae07c042c9323f8","modified":1557628258470},{"_id":"source/_posts/Image-Restoration-SimpleVersion/6.png","hash":"caef4885647c29fdf9f0dfb12ae07c042c9323f8","modified":1557628258474},{"_id":"source/_posts/Virtual-Memory-and-TLB/#7.png","hash":"6c8a27c6a026548e4ac48402a0f4c5aed7ddd9ee","modified":1557628258492},{"_id":"source/_posts/bp/bp_net.jpg","hash":"17a58ba5f8b1dc53a5135e005aa4dcbd2464cc5c","modified":1557628258503},{"_id":"source/_posts/cuda/1.png","hash":"6a752af95313cf50975e92cf5112bf35a23ec1bc","modified":1557628258507},{"_id":"source/teamIntro/index/2.jpg","hash":"26616fe6453918b3cb7bc41c0c3fe66cc33e92c4","modified":1557628258553},{"_id":"themes/fish/source/js/bootstrap.js","hash":"474b25cebd06d57a38090c6716d5dfaa5591baad","modified":1557628258750},{"_id":"themes/fish/source/js/jquery-3.1.1.min.js","hash":"042dd055cd289215835a58507c9531f808e1648a","modified":1557628258756},{"_id":"source/_posts/Image-Restoration-SimpleVersion/2.png","hash":"4d218f434f0948893071d27d5029cf029c97f058","modified":1557628258466},{"_id":"source/_posts/Image-Restoration-SimpleVersion/5.png","hash":"3f9bc0f71dc9dd440d2115e78f71cc378fab97ca","modified":1557628258472},{"_id":"source/_posts/Image-Restoration-SimpleVersion/7.png","hash":"b86b45e11861c1190e9a9002202bf96c5a211b46","modified":1557628258476},{"_id":"source/_posts/Image-Restoration-SimpleVersion/8.png","hash":"c4de12652640124fb77013898dabdae5d3c37e63","modified":1557628258478},{"_id":"source/_posts/Image-Restoration-SimpleVersion/9.png","hash":"4d218f434f0948893071d27d5029cf029c97f058","modified":1557628258480},{"_id":"source/_posts/Virtual-Memory-and-TLB/#1.png","hash":"1d6ba0dd6d7ca44e921b95c80773ec581c63ddeb","modified":1557628258485},{"_id":"source/_posts/cuprof/d.jpg","hash":"6b44d248bf9954b12d2390625239713a591609ee","modified":1557628258516},{"_id":"source/_posts/tensorflow/1.png","hash":"c3d5eb6b5d2baf40df92b7a7b1f1c01ca026b67d","modified":1557628258521},{"_id":"source/_posts/tensorflow/2.png","hash":"f2acf67c4c36a8acbdfbb0ab361c01c5d148995b","modified":1557628258523},{"_id":"themes/fish/layout/_partial/post/author.ejs","hash":"327d342553aae4c122c1d40dc7f0da78a3764d6e","modified":1557628258609},{"_id":"themes/fish/layout/_partial/post/category.ejs","hash":"692c4fab11b31adce8f724f51203bec6ea759b9a","modified":1557628258610},{"_id":"themes/fish/layout/_partial/post/gallery.ejs","hash":"bfde040b4c4a8ce43645e0783cdd2b944269ec80","modified":1557628258612},{"_id":"themes/fish/layout/_partial/post/date.ejs","hash":"cc160cd537a966c6ecb3c73c4a44207f254b0461","modified":1557628258611},{"_id":"themes/fish/layout/_partial/post/mathjax.ejs","hash":"ae998e014666cb354ded5a11a8a6bc7eae3e3c34","modified":1557628258613},{"_id":"themes/fish/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1557628258614},{"_id":"themes/fish/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1557628258615},{"_id":"themes/fish/layout/_partial/post/title.ejs","hash":"9ee31f67ad337d5dcaaa10aa8ba55c7c22074b1c","modified":1557628258616},{"_id":"themes/fish/layout/_partial/post/urlconvert.ejs","hash":"2133f1029632417f9043b9d4749d580ed0c75db0","modified":1557628258618},{"_id":"themes/fish/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1557628258672},{"_id":"themes/fish/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1557628258673},{"_id":"themes/fish/source/css/_partial/archive.styl","hash":"b16abc653626645f570d48aca094e6d0ca1f231d","modified":1557628258655},{"_id":"themes/fish/source/css/_partial/article.styl","hash":"27d86bc703665446091d5e64827257db6f22e0e3","modified":1557628258657},{"_id":"themes/fish/source/css/_partial/comment.styl","hash":"43279aaaa00cc07b4a65b13ef01c391355e82717","modified":1557628258658},{"_id":"themes/fish/source/css/_partial/footer.styl","hash":"a8fcd27a9431bd0e3b12158c04b7bffeb1dcc066","modified":1557628258659},{"_id":"themes/fish/source/css/_partial/header-post.styl","hash":"a6527047ec42064aa25ad86b4ccbfcad2815ed23","modified":1557628258661},{"_id":"themes/fish/source/css/_partial/header.styl","hash":"94c0a9314d995bf77c566f274c4f5338906a11fc","modified":1557628258662},{"_id":"themes/fish/source/css/_partial/highlight.styl","hash":"a12d13407903d4847c4207e2cd62190367acae64","modified":1557628258664},{"_id":"themes/fish/source/css/_partial/insight.styl","hash":"3b4042ebff85ded51eccd6183bad812d9aeef844","modified":1557628258665},{"_id":"themes/fish/source/css/_partial/mobile.styl","hash":"3920e4c3cd11f294d3e7835ed628f169cbea6b21","modified":1557628258667},{"_id":"themes/fish/source/css/_partial/sidebar-bottom.styl","hash":"73909106254b7ec312367079687c0de37740bb31","modified":1557628258669},{"_id":"themes/fish/source/css/_partial/sidebar-aside.styl","hash":"4f323b13a7594a46b5b21a9052bbdb7fb5144411","modified":1557628258668},{"_id":"themes/fish/source/css/_partial/sidebar.styl","hash":"a0b01d34317f4b17ce0f8c14cd978798ad2fbecc","modified":1557628258671},{"_id":"themes/fish/source/css/bootstrap.css","hash":"8314e44e6ffce08a0e6a0a402b50cc9d7a4ce1c3","modified":1557628258679},{"_id":"themes/fish/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1557628258684},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1557628258686},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1557628258695},{"_id":"themes/fish/source/css/images/ZJUSCT_Header_Logo.png","hash":"5bf8c469e5a84978ad13a6a1239bf3a3c82ab4a2","modified":1557628258700},{"_id":"themes/fish/source/css/images/ZJUSCT_Icon_Black.png","hash":"ede60b4efc27b4f074057f42c172607802748255","modified":1557628258702},{"_id":"themes/fish/source/css/images/ZJUSCT_Icon_White.png","hash":"55157b246f7406c9986692eb62892d7a8bd9e2c2","modified":1557628258703},{"_id":"themes/fish/source/css/images/avatar.jpg","hash":"b339c3194890f8b17af85abde0f96189192e9989","modified":1557628258705},{"_id":"themes/fish/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1557628258724},{"_id":"themes/fish/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557628258737},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1557628258739},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1557628258741},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1557628258742},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1557628258740},{"_id":"themes/fish/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1557628258744},{"_id":"source/_posts/Image-Restoration-SimpleVersion/13.png","hash":"dd72762ca446d77cc64a41c1f493b720035bfc39","modified":1557628258461},{"_id":"source/_posts/cuda/2.png","hash":"add7b0c27fdf7086a7eae6402d8860e8350d2327","modified":1557628258509},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1557628258693},{"_id":"themes/fish/source/css/images/computer3.jpg","hash":"8f41ef78a65e0353b9f361efb8e5fd18d03d42d8","modified":1557628258711},{"_id":"themes/fish/source/css/images/computer5.jpg","hash":"d99755d93eb576d0cd62acf453c90277f867237a","modified":1557628258719},{"_id":"source/_posts/Image-Restoration-SimpleVersion/1.png","hash":"8f18bd9ed0f568d2ea059e153d7347e66cbc39f1","modified":1557628258453},{"_id":"source/_posts/Image-Restoration-SimpleVersion/12.png","hash":"4277b84520784420c4f09a8330a5d88b52839ad4","modified":1557628258459},{"_id":"source/_posts/Image-Restoration-SimpleVersion/14.png","hash":"6f44fabf9f23a1d6b455fa89ed19ae8f3280cdab","modified":1557628258463},{"_id":"source/about/index/历年获奖情况.JPG","hash":"ebe26bba4c01fab34b2a87eaa7a449f58e0766a0","modified":1557628258547},{"_id":"themes/fish/source/css/images/computer.jpg","hash":"ef89b98b121b7bb93279b8a624e697f99b93cf4a","modified":1557628258707},{"_id":"themes/fish/source/css/images/computer2.jpg","hash":"d28e79a656333f08452aaa1b857d93009f2c7a02","modified":1557628258709},{"_id":"themes/fish/source/css/images/prize.jpg","hash":"ae9453adeec4af4aa62537a8de6697f867f43e5e","modified":1557628258720},{"_id":"source/_posts/Virtual-Memory-and-TLB/OG.png","hash":"d98adb58b7e2e8b15c49f012ae43647a289fc643","modified":1557628258500},{"_id":"source/_posts/Image-Restoration-SimpleVersion/11.png","hash":"a41474c677663e210ba734e594dfc5957e17bdd5","modified":1557628258457},{"_id":"themes/fish/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1557628258690},{"_id":"source/_posts/tensorflow/5.png","hash":"0d13caa4d8d05f5223a298a9d75ab7261ec6420a","modified":1557628258532},{"_id":"themes/fish/source/css/images/prize2.jpg","hash":"2b82d1c2d1272970929dd77b90fb989b75fccbcb","modified":1557628258723},{"_id":"themes/fish/source/css/images/computer4.jpg","hash":"806a2b8ff49aee1a97bec7c9a9565d1ebf73b884","modified":1557628258717},{"_id":"source/about/index/ASC比赛集群.png","hash":"1fd5e6a3036efe0ef5c9c3c21eb5114d4e31c891","modified":1557628258544},{"_id":"source/teamIntro/index/ourASC17.png","hash":"63d8cc1796c9c0ed7c9f50870b7c4ee84b5c3411","modified":1557628258565},{"_id":"public/content.json","hash":"6aa7eaa49e22acf9310df8e34fa1b2fcd9d04929","modified":1557628554425},{"_id":"public/contact/index.html","hash":"9a24d760fe663deefc70467c86803832561b7397","modified":1557628460479},{"_id":"public/tags/MySQL/index.html","hash":"4356fdfa9e9a7edf3cca5914d9ea148576b6ad0e","modified":1557628460479},{"_id":"public/tags/CentOS/index.html","hash":"a6fa46ecead064a2ad9706b454728d3bfc2e67f2","modified":1557628460480},{"_id":"public/tags/Tech/index.html","hash":"6e5877d3c15c04dcb4c192bf6c39fcc55d5f7785","modified":1557628460480},{"_id":"public/tags/Tech/page/2/index.html","hash":"c2577d10940c464ebda334c3049ff8b92cdf62cf","modified":1557628460480},{"_id":"public/tags/CUDA/index.html","hash":"a4d582c743650b84b6f5ad0a1cbd1375d3f26118","modified":1557628460480},{"_id":"public/tags/Profile/index.html","hash":"da39d2b44e4b261ae8d7eb7941bd60590f260b64","modified":1557628460481},{"_id":"public/tags/Tensorflow/index.html","hash":"6995af5a456f4a71d1cdac4ff668b69bb9b2da41","modified":1557628460481},{"_id":"public/tags/Spc/index.html","hash":"41d7f24d3ade10c10884d808993ca5a5722a79b7","modified":1557628460481},{"_id":"public/tags/ZJU/index.html","hash":"c34d2fd3f0125bcb45397790668026bf01c1be9c","modified":1557628460481},{"_id":"public/tags/AI/index.html","hash":"da4345e02b9d2583f6e6c0a591e5d4445effe5ec","modified":1557628460482},{"_id":"public/tags/Operating-Susyem/index.html","hash":"998e24cca489fdac28a429cb31f865a839a2ec29","modified":1557628460482},{"_id":"public/tags/Virtual-Memory/index.html","hash":"009dd09855b71af64ee629bfb7a7ed9270523d21","modified":1557628460482},{"_id":"public/tags/TLB/index.html","hash":"97c70e0e99389c9239d7c29f8c313a4a31b68762","modified":1557628460482},{"_id":"public/tags/Machine-Learning/index.html","hash":"038bf5530ed923875976b25353b05776e21b14f8","modified":1557628460482},{"_id":"public/about/index.html","hash":"042bfc5de8686c17999145384e5f37caa912b0da","modified":1557628460482},{"_id":"public/teamIntro/index.html","hash":"e08546e2bca44c350187b5c3732f8ca8405f3ca3","modified":1557628460482},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/index.html","hash":"6ce34340c923674911d769ab0db69010c6f3b879","modified":1557628555007},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/index.html","hash":"7483cab0725d562adbf39a2df178705fa18ff0ef","modified":1557628460483},{"_id":"public/2019/03/31/Install-MySQL-on-CentOS7-Inside-GFW/index.html","hash":"f4436663a05514e9f151e57b62e4aa638c324958","modified":1557628460483},{"_id":"public/2018/12/24/bp/index.html","hash":"6876f3923da4766f062319051648951212011b14","modified":1557628460483},{"_id":"public/2018/12/23/tensorflow/index.html","hash":"12a3df805b154762d97742e9fb4637e9025724e8","modified":1557628460483},{"_id":"public/2018/12/07/cuprof/index.html","hash":"60d7cc9d68519a6ab9274c03b43f871a6d631986","modified":1557628460483},{"_id":"public/2018/11/25/cuda/index.html","hash":"ee8048b6af5e4083cc29ac7b1323407799c9c490","modified":1557628460483},{"_id":"public/2018/09/30/first/index.html","hash":"75a9ca109df176495954e6485a4258d15a6fe543","modified":1557628460483},{"_id":"public/index.html","hash":"7a36cc49da9ebb025ea8210c603eb7db4994d053","modified":1557628460483},{"_id":"public/page/2/index.html","hash":"ac2bbf02147fe8856142ceb6a422f274bf13ef1e","modified":1557628460483},{"_id":"public/archives/index.html","hash":"e84f9c50e13d99b36a6b31b1f0624a75c9fa76b8","modified":1557628460484},{"_id":"public/archives/page/2/index.html","hash":"4842180bfad78524b9fe8bbe67c994ddbe612295","modified":1557628460484},{"_id":"public/archives/2018/index.html","hash":"40ae1d5e4179f9f054c8ae3c3760be48aa0d4f1a","modified":1557628460484},{"_id":"public/archives/2018/page/2/index.html","hash":"2b7b3ea358a1e4a2ab9b042cbeb4ce58980cc6b9","modified":1557628460484},{"_id":"public/archives/2018/09/index.html","hash":"a11b0f64b2736b4f0968b6e0c6a71199ce33006b","modified":1557628460484},{"_id":"public/archives/2018/11/index.html","hash":"0bdcafbbf3fbbd811a17d9c0b98f2f6e7ca8d49d","modified":1557628460484},{"_id":"public/archives/2018/12/index.html","hash":"f5a35eb8c18f9e127e42161eb467928411cd85ec","modified":1557628460484},{"_id":"public/archives/2019/index.html","hash":"d87a62ce482cddb3cb23cd95783d757a60130d68","modified":1557628460484},{"_id":"public/archives/2019/03/index.html","hash":"f08f4ca231171090c2217ce132019db44a6e703e","modified":1557628460484},{"_id":"public/archives/2019/05/index.html","hash":"6c88d8402becf014d3859de8bef2972293bef8f7","modified":1557628460484},{"_id":"public/teamIntro/index/陈建海老师.jpg","hash":"77a92ca780b319ccc90c6d4c365dd88bb9c0286f","modified":1557628460499},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557628460499},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557628460499},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557628460499},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557628460499},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557628460499},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557628460500},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1557628460500},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1557628460500},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1557628460500},{"_id":"public/css/images/ZJUSCT_Icon_Black.png","hash":"ede60b4efc27b4f074057f42c172607802748255","modified":1557628460500},{"_id":"public/css/images/ZJUSCT_Header_Logo.png","hash":"5bf8c469e5a84978ad13a6a1239bf3a3c82ab4a2","modified":1557628460500},{"_id":"public/css/images/ZJUSCT_Icon_White.png","hash":"55157b246f7406c9986692eb62892d7a8bd9e2c2","modified":1557628460500},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1557628460500},{"_id":"public/css/images/avatar.jpg","hash":"b339c3194890f8b17af85abde0f96189192e9989","modified":1557628460500},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557628460500},{"_id":"public/2018/09/30/first/ttfish.jpeg","hash":"c744603ee38e3401e0ae7bc90bed27411545ab0b","modified":1557628460500},{"_id":"public/2018/12/07/cuprof/c.jpg","hash":"d1f74401d890988dfbbcbaee5fbb02f8766eb523","modified":1557628460500},{"_id":"public/2018/12/07/cuprof/a.jpg","hash":"733b372aedaa07abb6892817a1e0dbf830a11d11","modified":1557628460500},{"_id":"public/2018/12/07/cuprof/b.jpg","hash":"3467346099e5a40ed299580a145795ef8bd7110b","modified":1557628460500},{"_id":"public/2018/12/23/tensorflow/3.png","hash":"7224dc3574dea7ae1d3a9dbcb495e0a0a6d61ff5","modified":1557628460500},{"_id":"public/2018/12/24/bp/neuron.png","hash":"56b45cfe79eedf1b91215e5b341d741219bb2547","modified":1557628460500},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#2.png","hash":"fa97e356cc761f30384e4144097ad09625d9fd3f","modified":1557628460501},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#4.png","hash":"0e794246b71fe7bb27e06306c3ea899a74548361","modified":1557628460501},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#3.png","hash":"bb3b954398867ed55eccce3dd6fa14078ca7cf83","modified":1557628460501},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#6.png","hash":"6a86a9abd2fed7eaa45a2bb4d8be961c183fb7af","modified":1557628460501},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/10.png","hash":"53e1881db61214fb71776b7603aff517258d1c37","modified":1557628460501},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/0.png","hash":"50f38f71f5d0cb0649b7eb7b93ba0844e44e0c87","modified":1557628460501},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/15.png","hash":"eacd9a61af61ab7ab1b3f746f84ce313ff4e856a","modified":1557628460501},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/3.png","hash":"e45ab7835e4377b23ff9563303bbc61a415341e7","modified":1557628460501},{"_id":"public/teamIntro/index/浙江大学东四-510超算集群.JPG","hash":"828ea5b72794189e5b18522f01dab30cf2c27e72","modified":1557628461265},{"_id":"public/teamIntro/index/1.jpg","hash":"61a8649158394bb72c892385a9e0abf2bc9e365a","modified":1557628461265},{"_id":"public/teamIntro/index/2.jpg","hash":"26616fe6453918b3cb7bc41c0c3fe66cc33e92c4","modified":1557628461266},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1557628461266},{"_id":"public/css/images/computer3.jpg","hash":"8f41ef78a65e0353b9f361efb8e5fd18d03d42d8","modified":1557628461266},{"_id":"public/css/images/computer5.jpg","hash":"d99755d93eb576d0cd62acf453c90277f867237a","modified":1557628461266},{"_id":"public/2018/12/24/bp/bp_net.jpg","hash":"17a58ba5f8b1dc53a5135e005aa4dcbd2464cc5c","modified":1557628461266},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#1.png","hash":"1d6ba0dd6d7ca44e921b95c80773ec581c63ddeb","modified":1557628461266},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/#7.png","hash":"6c8a27c6a026548e4ac48402a0f4c5aed7ddd9ee","modified":1557628461267},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/4.png","hash":"caef4885647c29fdf9f0dfb12ae07c042c9323f8","modified":1557628461267},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/6.png","hash":"caef4885647c29fdf9f0dfb12ae07c042c9323f8","modified":1557628461267},{"_id":"public/2018/11/25/cuda/1.png","hash":"6a752af95313cf50975e92cf5112bf35a23ec1bc","modified":1557628461267},{"_id":"public/css/dialog.css","hash":"5e0333adf3f496e0d443767fe228a1d4b1a2bafc","modified":1557628461277},{"_id":"public/css/header-post.css","hash":"e5074183c508fb8d32cba8d8924067a04aa6d4be","modified":1557628461277},{"_id":"public/css/archive.css","hash":"5f0dcc975b17200f4d7c600f45544addc24321d2","modified":1557628461278},{"_id":"public/css/home.css","hash":"f504faa64d873912157c433655151fe8075379e2","modified":1557628461278},{"_id":"public/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1557628461278},{"_id":"public/js/home.js","hash":"e403c3290d76c5f58571cbfe4414236e41a7ac94","modified":1557628461278},{"_id":"public/js/dialog.js","hash":"01e8b337c1721e0486fd5044f98b233e84ba1985","modified":1557628461278},{"_id":"public/js/scripts.js","hash":"e06a8948375df71cbf77abf8617db438ece811b3","modified":1557628461278},{"_id":"public/js/totop.js","hash":"29bb40144ac238d22b25d59df465aff8dc38bfd0","modified":1557628461278},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1557628461279},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1557628461279},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1557628461279},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1557628461279},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1557628461279},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1557628461279},{"_id":"public/css/style.css","hash":"e7adc58787a83feb3cf9dd2d6c592763c453bdec","modified":1557628461279},{"_id":"public/about/index/历年获奖情况.JPG","hash":"ebe26bba4c01fab34b2a87eaa7a449f58e0766a0","modified":1557628461279},{"_id":"public/css/images/computer.jpg","hash":"ef89b98b121b7bb93279b8a624e697f99b93cf4a","modified":1557628461280},{"_id":"public/css/images/computer2.jpg","hash":"d28e79a656333f08452aaa1b857d93009f2c7a02","modified":1557628461280},{"_id":"public/css/images/prize.jpg","hash":"ae9453adeec4af4aa62537a8de6697f867f43e5e","modified":1557628461280},{"_id":"public/2018/12/07/cuprof/d.jpg","hash":"6b44d248bf9954b12d2390625239713a591609ee","modified":1557628461280},{"_id":"public/2018/12/23/tensorflow/1.png","hash":"c3d5eb6b5d2baf40df92b7a7b1f1c01ca026b67d","modified":1557628461281},{"_id":"public/2018/12/23/tensorflow/2.png","hash":"f2acf67c4c36a8acbdfbb0ab361c01c5d148995b","modified":1557628461281},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/2.png","hash":"4d218f434f0948893071d27d5029cf029c97f058","modified":1557628461281},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/5.png","hash":"3f9bc0f71dc9dd440d2115e78f71cc378fab97ca","modified":1557628461281},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/9.png","hash":"4d218f434f0948893071d27d5029cf029c97f058","modified":1557628461281},{"_id":"public/2018/11/25/cuda/2.png","hash":"add7b0c27fdf7086a7eae6402d8860e8350d2327","modified":1557628461282},{"_id":"public/js/insight.js","hash":"f79ab175d1c8c4fb59328ee4fd9eb95808eb0be5","modified":1557628461289},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1557628461289},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/13.png","hash":"dd72762ca446d77cc64a41c1f493b720035bfc39","modified":1557628461289},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/1.png","hash":"8f18bd9ed0f568d2ea059e153d7347e66cbc39f1","modified":1557628461290},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/7.png","hash":"b86b45e11861c1190e9a9002202bf96c5a211b46","modified":1557628461290},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1557628461295},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/14.png","hash":"6f44fabf9f23a1d6b455fa89ed19ae8f3280cdab","modified":1557628461295},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/12.png","hash":"4277b84520784420c4f09a8330a5d88b52839ad4","modified":1557628461295},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/8.png","hash":"c4de12652640124fb77013898dabdae5d3c37e63","modified":1557628461295},{"_id":"public/css/images/prize2.jpg","hash":"2b82d1c2d1272970929dd77b90fb989b75fccbcb","modified":1557628461303},{"_id":"public/2019/05/11/Image-Restoration-SimpleVersion/11.png","hash":"a41474c677663e210ba734e594dfc5957e17bdd5","modified":1557628461308},{"_id":"public/2018/12/23/tensorflow/5.png","hash":"0d13caa4d8d05f5223a298a9d75ab7261ec6420a","modified":1557628461309},{"_id":"public/2019/03/31/Virtual-Memory-and-TLB/OG.png","hash":"d98adb58b7e2e8b15c49f012ae43647a289fc643","modified":1557628461309},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1557628461310},{"_id":"public/js/bootstrap.js","hash":"3b965a36a6b08854ad6eddedf85c5319fd392b4a","modified":1557628461312},{"_id":"public/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1557628461314},{"_id":"public/css/images/computer4.jpg","hash":"806a2b8ff49aee1a97bec7c9a9565d1ebf73b884","modified":1557628461315},{"_id":"public/css/bootstrap.css","hash":"4595025ec16d80324436b9bb38c7c84b18fe6033","modified":1557628461320},{"_id":"public/about/index/ASC比赛集群.png","hash":"1fd5e6a3036efe0ef5c9c3c21eb5114d4e31c891","modified":1557628461324},{"_id":"public/teamIntro/index/ourASC17.png","hash":"63d8cc1796c9c0ed7c9f50870b7c4ee84b5c3411","modified":1557628461326}],"Category":[],"Data":[],"Page":[{"title":"关于世界大学生超级计算机竞赛(ASC\\ISC\\SC)","date":"2018-10-01T07:12:16.000Z","_content":"\n## 竞赛目的\n\nASC超算竞赛旨在通过大赛的平台推动各国及地区间超算青年人才交流和培养，提升超算应用水平和研发能力，发挥超算的科技驱动力，促进科技与产业创新。吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合。\n\n![ASC比赛集群](index/ASC比赛集群.png)\n\n## 竞赛内容\n\n竞赛总共由数道题目组成, 每一道赛题都是对现代科学难题的挑战，需要考验参赛队伍的分析解决问题以及团队协同作战的综合能力。比赛要求每个队伍完成超级计算机集群的设计与搭建，要求选手必须要具备驾驭计算机软硬件操作系统的整体能力，还要在自搭建的集群计算机系统上完成面向前沿科技领域难题的科学应用软件的高性能优化，要具备程序并行优化编码能力。竞赛分为多个流程：理论方案、设计模型、实现、现场展示、答辩等。\n\n## 奖项设置\n\n+ ASC 超算竞赛： 总冠军、亚军各1 项，ePrize 奖1 项（季军），最高计算性能HPL 冠军，最佳应用创新奖，最佳应用奖，最佳呈现奖及一等奖若干\n+ ISC/SC 超算竞赛： 总冠军一名，授予在整体算例以及现场呈现过程中得分最高的队伍。最高计算性能：HPL 单项冠军一名，授予HPL 比赛成绩最高的队伍。最受欢迎奖一名，授予比赛期间得到ISC 参会者投票最多的队伍。难度一样，规模比ASC稍小。\n\n## 浙江大学历年成绩\n\n* ASC2014 世界大学生超级计算机竞赛一等奖\n* ASC2015 世界大学生超级计算机竞赛一等奖\n* ASC2016 世界大学生超级计算机竞赛一等奖\n* ASC2016 世界最高计算性能冠军奖\n* ASC2016 世界最高计算性能打破世界纪录\n* ASC2018 世界大学生超级计算机竞赛初赛第四名 决赛一等奖\n\n超算队还开设短学期课程 超算团队与信息安全竞赛、系统设计能力竞赛、程序设计竞赛一起，共同推进以计算机系统能力为基础的人才培养改革与课程建设。超算基地近5 年来的人才培养与成果积累，参与申报2017 年“系统能力建设教学成果奖评比”项目，获浙江省教学成果一等奖。与ACM算法竞赛同为浙江大学**世界级学科竞赛**项目 拥有保研名额。\n\n![历年获奖情况](index/历年获奖情况.JPG)\n","source":"about/index.md","raw":"---\ntitle: 关于世界大学生超级计算机竞赛(ASC\\ISC\\SC)\ndate: 2018-10-01 15:12:16\n---\n\n## 竞赛目的\n\nASC超算竞赛旨在通过大赛的平台推动各国及地区间超算青年人才交流和培养，提升超算应用水平和研发能力，发挥超算的科技驱动力，促进科技与产业创新。吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合。\n\n![ASC比赛集群](index/ASC比赛集群.png)\n\n## 竞赛内容\n\n竞赛总共由数道题目组成, 每一道赛题都是对现代科学难题的挑战，需要考验参赛队伍的分析解决问题以及团队协同作战的综合能力。比赛要求每个队伍完成超级计算机集群的设计与搭建，要求选手必须要具备驾驭计算机软硬件操作系统的整体能力，还要在自搭建的集群计算机系统上完成面向前沿科技领域难题的科学应用软件的高性能优化，要具备程序并行优化编码能力。竞赛分为多个流程：理论方案、设计模型、实现、现场展示、答辩等。\n\n## 奖项设置\n\n+ ASC 超算竞赛： 总冠军、亚军各1 项，ePrize 奖1 项（季军），最高计算性能HPL 冠军，最佳应用创新奖，最佳应用奖，最佳呈现奖及一等奖若干\n+ ISC/SC 超算竞赛： 总冠军一名，授予在整体算例以及现场呈现过程中得分最高的队伍。最高计算性能：HPL 单项冠军一名，授予HPL 比赛成绩最高的队伍。最受欢迎奖一名，授予比赛期间得到ISC 参会者投票最多的队伍。难度一样，规模比ASC稍小。\n\n## 浙江大学历年成绩\n\n* ASC2014 世界大学生超级计算机竞赛一等奖\n* ASC2015 世界大学生超级计算机竞赛一等奖\n* ASC2016 世界大学生超级计算机竞赛一等奖\n* ASC2016 世界最高计算性能冠军奖\n* ASC2016 世界最高计算性能打破世界纪录\n* ASC2018 世界大学生超级计算机竞赛初赛第四名 决赛一等奖\n\n超算队还开设短学期课程 超算团队与信息安全竞赛、系统设计能力竞赛、程序设计竞赛一起，共同推进以计算机系统能力为基础的人才培养改革与课程建设。超算基地近5 年来的人才培养与成果积累，参与申报2017 年“系统能力建设教学成果奖评比”项目，获浙江省教学成果一等奖。与ACM算法竞赛同为浙江大学**世界级学科竞赛**项目 拥有保研名额。\n\n![历年获奖情况](index/历年获奖情况.JPG)\n","updated":"2019-05-12T02:30:58.533Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvkbrmzf0001jwuulp6aswzf","content":"<h2 id=\"竞赛目的\"><a href=\"#竞赛目的\" class=\"headerlink\" title=\"竞赛目的\"></a>竞赛目的</h2><p>ASC超算竞赛旨在通过大赛的平台推动各国及地区间超算青年人才交流和培养，提升超算应用水平和研发能力，发挥超算的科技驱动力，促进科技与产业创新。吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合。</p>\n<p><img src=\"index/ASC%E6%AF%94%E8%B5%9B%E9%9B%86%E7%BE%A4.png\" alt=\"ASC比赛集群\"></p>\n<h2 id=\"竞赛内容\"><a href=\"#竞赛内容\" class=\"headerlink\" title=\"竞赛内容\"></a>竞赛内容</h2><p>竞赛总共由数道题目组成, 每一道赛题都是对现代科学难题的挑战，需要考验参赛队伍的分析解决问题以及团队协同作战的综合能力。比赛要求每个队伍完成超级计算机集群的设计与搭建，要求选手必须要具备驾驭计算机软硬件操作系统的整体能力，还要在自搭建的集群计算机系统上完成面向前沿科技领域难题的科学应用软件的高性能优化，要具备程序并行优化编码能力。竞赛分为多个流程：理论方案、设计模型、实现、现场展示、答辩等。</p>\n<h2 id=\"奖项设置\"><a href=\"#奖项设置\" class=\"headerlink\" title=\"奖项设置\"></a>奖项设置</h2><ul>\n<li>ASC 超算竞赛： 总冠军、亚军各1 项，ePrize 奖1 项（季军），最高计算性能HPL 冠军，最佳应用创新奖，最佳应用奖，最佳呈现奖及一等奖若干</li>\n<li>ISC/SC 超算竞赛： 总冠军一名，授予在整体算例以及现场呈现过程中得分最高的队伍。最高计算性能：HPL 单项冠军一名，授予HPL 比赛成绩最高的队伍。最受欢迎奖一名，授予比赛期间得到ISC 参会者投票最多的队伍。难度一样，规模比ASC稍小。</li>\n</ul>\n<h2 id=\"浙江大学历年成绩\"><a href=\"#浙江大学历年成绩\" class=\"headerlink\" title=\"浙江大学历年成绩\"></a>浙江大学历年成绩</h2><ul>\n<li>ASC2014 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2015 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2016 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2016 世界最高计算性能冠军奖</li>\n<li>ASC2016 世界最高计算性能打破世界纪录</li>\n<li>ASC2018 世界大学生超级计算机竞赛初赛第四名 决赛一等奖</li>\n</ul>\n<p>超算队还开设短学期课程 超算团队与信息安全竞赛、系统设计能力竞赛、程序设计竞赛一起，共同推进以计算机系统能力为基础的人才培养改革与课程建设。超算基地近5 年来的人才培养与成果积累，参与申报2017 年“系统能力建设教学成果奖评比”项目，获浙江省教学成果一等奖。与ACM算法竞赛同为浙江大学<strong>世界级学科竞赛</strong>项目 拥有保研名额。</p>\n<p><img src=\"index/%E5%8E%86%E5%B9%B4%E8%8E%B7%E5%A5%96%E6%83%85%E5%86%B5.JPG\" alt=\"历年获奖情况\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"竞赛目的\"><a href=\"#竞赛目的\" class=\"headerlink\" title=\"竞赛目的\"></a>竞赛目的</h2><p>ASC超算竞赛旨在通过大赛的平台推动各国及地区间超算青年人才交流和培养，提升超算应用水平和研发能力，发挥超算的科技驱动力，促进科技与产业创新。吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合。</p>\n<p><img src=\"index/ASC%E6%AF%94%E8%B5%9B%E9%9B%86%E7%BE%A4.png\" alt=\"ASC比赛集群\"></p>\n<h2 id=\"竞赛内容\"><a href=\"#竞赛内容\" class=\"headerlink\" title=\"竞赛内容\"></a>竞赛内容</h2><p>竞赛总共由数道题目组成, 每一道赛题都是对现代科学难题的挑战，需要考验参赛队伍的分析解决问题以及团队协同作战的综合能力。比赛要求每个队伍完成超级计算机集群的设计与搭建，要求选手必须要具备驾驭计算机软硬件操作系统的整体能力，还要在自搭建的集群计算机系统上完成面向前沿科技领域难题的科学应用软件的高性能优化，要具备程序并行优化编码能力。竞赛分为多个流程：理论方案、设计模型、实现、现场展示、答辩等。</p>\n<h2 id=\"奖项设置\"><a href=\"#奖项设置\" class=\"headerlink\" title=\"奖项设置\"></a>奖项设置</h2><ul>\n<li>ASC 超算竞赛： 总冠军、亚军各1 项，ePrize 奖1 项（季军），最高计算性能HPL 冠军，最佳应用创新奖，最佳应用奖，最佳呈现奖及一等奖若干</li>\n<li>ISC/SC 超算竞赛： 总冠军一名，授予在整体算例以及现场呈现过程中得分最高的队伍。最高计算性能：HPL 单项冠军一名，授予HPL 比赛成绩最高的队伍。最受欢迎奖一名，授予比赛期间得到ISC 参会者投票最多的队伍。难度一样，规模比ASC稍小。</li>\n</ul>\n<h2 id=\"浙江大学历年成绩\"><a href=\"#浙江大学历年成绩\" class=\"headerlink\" title=\"浙江大学历年成绩\"></a>浙江大学历年成绩</h2><ul>\n<li>ASC2014 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2015 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2016 世界大学生超级计算机竞赛一等奖</li>\n<li>ASC2016 世界最高计算性能冠军奖</li>\n<li>ASC2016 世界最高计算性能打破世界纪录</li>\n<li>ASC2018 世界大学生超级计算机竞赛初赛第四名 决赛一等奖</li>\n</ul>\n<p>超算队还开设短学期课程 超算团队与信息安全竞赛、系统设计能力竞赛、程序设计竞赛一起，共同推进以计算机系统能力为基础的人才培养改革与课程建设。超算基地近5 年来的人才培养与成果积累，参与申报2017 年“系统能力建设教学成果奖评比”项目，获浙江省教学成果一等奖。与ACM算法竞赛同为浙江大学<strong>世界级学科竞赛</strong>项目 拥有保研名额。</p>\n<p><img src=\"index/%E5%8E%86%E5%B9%B4%E8%8E%B7%E5%A5%96%E6%83%85%E5%86%B5.JPG\" alt=\"历年获奖情况\"></p>\n"},{"title":"Contact Us!","date":"2018-12-08T12:42:52.000Z","_content":"# Send your email and Join ZJUSCT now!\n<script>window.location.href =\"mailto:jiongchiyu@zju.edu.cn\"</script>","source":"contact/index.md","raw":"---\ntitle: Contact Us!\ndate: 2018-12-08 20:42:52\n---\n# Send your email and Join ZJUSCT now!\n<script>window.location.href =\"mailto:jiongchiyu@zju.edu.cn\"</script>","updated":"2019-05-12T02:30:58.548Z","path":"contact/index.html","comments":1,"layout":"page","_id":"cjvkbrmzj0003jwuu1uukhx0r","content":"<h1 id=\"Send-your-email-and-Join-ZJUSCT-now\"><a href=\"#Send-your-email-and-Join-ZJUSCT-now\" class=\"headerlink\" title=\"Send your email and Join ZJUSCT now!\"></a>Send your email and Join ZJUSCT now!</h1><script>window.location.href =\"mailto:jiongchiyu@zju.edu.cn\"</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Send-your-email-and-Join-ZJUSCT-now\"><a href=\"#Send-your-email-and-Join-ZJUSCT-now\" class=\"headerlink\" title=\"Send your email and Join ZJUSCT now!\"></a>Send your email and Join ZJUSCT now!</h1><script>window.location.href =\"mailto:jiongchiyu@zju.edu.cn\"</script>"},{"title":"Team Introduction","date":"2018-11-05T05:01:49.000Z","_content":"\n## 超算队成员介绍\n\n|  姓名  | 毕业年份 | 去向分类 |             去向              |                备注                 |\n| :----: | :------: | :------: | :---------------------------: | :---------------------------------: |\n|  何宇  |   2018   | 出国留学 | 美国   卡内基梅隆大学    硕士 |                                     |\n|  单挺  |          |   创业   |   杭州马猴烧韭科技有限公司    |        公司已获得300万元融资        |\n| 徐启源 |   2017   | 国内深造 |        浙江大学   硕士        |                                     |\n| 朱鼎含 |   2017   | 出国留学 |    美国   南加州大学 硕士     |                                     |\n| 陈星眸 |   2018   |   工作   |                               |                                     |\n| 曹舒翔 |   2018   | 出国留学 |     英国   牛津大学 博士      |   凝聚态物理学 超导量子计算方向    |\n|  邢畅  |   2016   | 出国留学 |      美国东北大学   硕士      |         Facebook工作          |\n| 弓得力 |   2016   | 出国留学 |        新加坡国立大学         | 区块链公司（Zilliqa）工作 |\n|  费翔  |   2016   | 国内深造 |           清华大学            |                                     |\n| 巩炳辰 |   2016   | 国内深造 |           香港大学            |         计算机视觉方向          |\n| 于振云 |   2019   |          |                               |    计算机科学与技术 阿里巴巴实习 |\n|  吴凡  |   2019   |          |                               |       电气工程与自动化   华为实习      |\n|  施歌  |   2020   |          |      2016级中加班中方生       |                                     |\n| 杨玄达 |   2020   |          |                               |   计算机科学与技术(何志均班)         |\n| 孙耀珠 |   2019   |          |                               |        求是科学班(计算机)       |\n| 菅浩然 |   2020   |          |                               |        计算机科学与技术            |\n|  陈岩  |   2020   |          |                               |          数字媒体技术             |\n| 袁谱博 |   2020   |          |                               |           信息安全                |\n| 俞炯弛 |   2021   |          |                               |        高分子科学与工程           |\n|  王克  |   2021   |          |                               |       计算机科学与技术       |\n| 黄启涵 |   2021   |          |                               |       软件工程        |\n| 康嘉成 |   2021   |          |                               |    计算机科学与技术          |\n| 林柯舟 |   2021   |          |                               |        计算机科学与技术     |\n| 漆翔宇 |   2021   |          |                               |        计算机科学与技术          |\n| 沈韬立 |   2021   |          |                               |       信息安全         |\n| 夏豪诚 |   2021   |          |                               |       信息安全         |\n| 张文捷 |   2021   |          |                               |        计算机科学与技术          |\n| 陈谋祥 |   2021   |          |                               |        计算机科学与技术          |\n| 潘薇鸿 |   2021   |          |                               |        测控技术与仪器      |\n| 朱璟森 |   2021   |          |                               |        计算机科学与技术          |\n| 张震铄 |   2021   |          |                               |        计算机科学与技术          |\n\n![](index/ourASC17.png)\n\n## 超算队指导老师介绍\n\n**陈建海老师**\n\n![](index/陈建海老师.jpg)\n\n陈建海，博士，浙江大学计算机学院。浙江大学计算机学院智能计算&系统实验室（InCAS-LAB）区块链负责人，IEEE、ACM、CCF会员。研究领域：计算机体系结构领域，涉及云计算、虚拟化、区块链，擅长区块链系统性能与安全，虚拟计算系统性能优化与调度，高性能计算并行应用优化，近似算法与博弈论运用等。 负责区块链、高性能计算方面的重点研发项目子课题2项，参与完成多项云计算虚拟化相关的国家科技部支撑计划、国家基金以及企业合作项目。累计发表SCI/EI论文15篇，申请授权专利超过30项。 第44界世界技能大赛网站设计项目浙江省技术专家组组长，国家级裁判，带领浙江省队员获44界世界技能大赛全国选拔赛第四名。主持Designer项目获2018全球迅雷区块链应用开发大赛第一名。\n\n\n**沈钦仙老师**\n\n\n## 学校支持 设备介绍\n\n**计算机学院超算竞赛基地**\n\n* 吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合\n* 开设暑期超算集训短学期课程\n* 学院提供超算竞赛基地，支持每年8万元经费\n\n  ![浙江大学东四-510超算集群](index/浙江大学东四-510超算集群.JPG)\n  ![集群](index/1.jpg)\n  ![RTX](index/2.jpg)\n\n**硬件强支撑**：学校与学院支持建有13节点百万超算集群，含GPU\\MAC卡等异构设备\n\n## 赞助与合作介绍\n\n* ASC2016 获英伟达硬件Tesla GPU K80 加速卡硬件赞助\n* ASC2018获AMAX 赞助借用硬件Tesla GPU V100 8块  \n* ······\n\n","source":"teamIntro/index.md","raw":"---\n\ntitle: Team Introduction\ndate: 2018-11-05 13:01:49\n---\n\n## 超算队成员介绍\n\n|  姓名  | 毕业年份 | 去向分类 |             去向              |                备注                 |\n| :----: | :------: | :------: | :---------------------------: | :---------------------------------: |\n|  何宇  |   2018   | 出国留学 | 美国   卡内基梅隆大学    硕士 |                                     |\n|  单挺  |          |   创业   |   杭州马猴烧韭科技有限公司    |        公司已获得300万元融资        |\n| 徐启源 |   2017   | 国内深造 |        浙江大学   硕士        |                                     |\n| 朱鼎含 |   2017   | 出国留学 |    美国   南加州大学 硕士     |                                     |\n| 陈星眸 |   2018   |   工作   |                               |                                     |\n| 曹舒翔 |   2018   | 出国留学 |     英国   牛津大学 博士      |   凝聚态物理学 超导量子计算方向    |\n|  邢畅  |   2016   | 出国留学 |      美国东北大学   硕士      |         Facebook工作          |\n| 弓得力 |   2016   | 出国留学 |        新加坡国立大学         | 区块链公司（Zilliqa）工作 |\n|  费翔  |   2016   | 国内深造 |           清华大学            |                                     |\n| 巩炳辰 |   2016   | 国内深造 |           香港大学            |         计算机视觉方向          |\n| 于振云 |   2019   |          |                               |    计算机科学与技术 阿里巴巴实习 |\n|  吴凡  |   2019   |          |                               |       电气工程与自动化   华为实习      |\n|  施歌  |   2020   |          |      2016级中加班中方生       |                                     |\n| 杨玄达 |   2020   |          |                               |   计算机科学与技术(何志均班)         |\n| 孙耀珠 |   2019   |          |                               |        求是科学班(计算机)       |\n| 菅浩然 |   2020   |          |                               |        计算机科学与技术            |\n|  陈岩  |   2020   |          |                               |          数字媒体技术             |\n| 袁谱博 |   2020   |          |                               |           信息安全                |\n| 俞炯弛 |   2021   |          |                               |        高分子科学与工程           |\n|  王克  |   2021   |          |                               |       计算机科学与技术       |\n| 黄启涵 |   2021   |          |                               |       软件工程        |\n| 康嘉成 |   2021   |          |                               |    计算机科学与技术          |\n| 林柯舟 |   2021   |          |                               |        计算机科学与技术     |\n| 漆翔宇 |   2021   |          |                               |        计算机科学与技术          |\n| 沈韬立 |   2021   |          |                               |       信息安全         |\n| 夏豪诚 |   2021   |          |                               |       信息安全         |\n| 张文捷 |   2021   |          |                               |        计算机科学与技术          |\n| 陈谋祥 |   2021   |          |                               |        计算机科学与技术          |\n| 潘薇鸿 |   2021   |          |                               |        测控技术与仪器      |\n| 朱璟森 |   2021   |          |                               |        计算机科学与技术          |\n| 张震铄 |   2021   |          |                               |        计算机科学与技术          |\n\n![](index/ourASC17.png)\n\n## 超算队指导老师介绍\n\n**陈建海老师**\n\n![](index/陈建海老师.jpg)\n\n陈建海，博士，浙江大学计算机学院。浙江大学计算机学院智能计算&系统实验室（InCAS-LAB）区块链负责人，IEEE、ACM、CCF会员。研究领域：计算机体系结构领域，涉及云计算、虚拟化、区块链，擅长区块链系统性能与安全，虚拟计算系统性能优化与调度，高性能计算并行应用优化，近似算法与博弈论运用等。 负责区块链、高性能计算方面的重点研发项目子课题2项，参与完成多项云计算虚拟化相关的国家科技部支撑计划、国家基金以及企业合作项目。累计发表SCI/EI论文15篇，申请授权专利超过30项。 第44界世界技能大赛网站设计项目浙江省技术专家组组长，国家级裁判，带领浙江省队员获44界世界技能大赛全国选拔赛第四名。主持Designer项目获2018全球迅雷区块链应用开发大赛第一名。\n\n\n**沈钦仙老师**\n\n\n## 学校支持 设备介绍\n\n**计算机学院超算竞赛基地**\n\n* 吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合\n* 开设暑期超算集训短学期课程\n* 学院提供超算竞赛基地，支持每年8万元经费\n\n  ![浙江大学东四-510超算集群](index/浙江大学东四-510超算集群.JPG)\n  ![集群](index/1.jpg)\n  ![RTX](index/2.jpg)\n\n**硬件强支撑**：学校与学院支持建有13节点百万超算集群，含GPU\\MAC卡等异构设备\n\n## 赞助与合作介绍\n\n* ASC2016 获英伟达硬件Tesla GPU K80 加速卡硬件赞助\n* ASC2018获AMAX 赞助借用硬件Tesla GPU V100 8块  \n* ······\n\n","updated":"2019-05-12T02:30:58.550Z","path":"teamIntro/index.html","comments":1,"layout":"page","_id":"cjvkbrmzn0006jwuujd68mkyo","content":"<h2 id=\"超算队成员介绍\"><a href=\"#超算队成员介绍\" class=\"headerlink\" title=\"超算队成员介绍\"></a>超算队成员介绍</h2><table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">毕业年份</th>\n<th align=\"center\">去向分类</th>\n<th align=\"center\">去向</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">何宇</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国   卡内基梅隆大学    硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">单挺</td>\n<td align=\"center\"></td>\n<td align=\"center\">创业</td>\n<td align=\"center\">杭州马猴烧韭科技有限公司</td>\n<td align=\"center\">公司已获得300万元融资</td>\n</tr>\n<tr>\n<td align=\"center\">徐启源</td>\n<td align=\"center\">2017</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">浙江大学   硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">朱鼎含</td>\n<td align=\"center\">2017</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国   南加州大学 硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">陈星眸</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">工作</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">曹舒翔</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">英国   牛津大学 博士</td>\n<td align=\"center\">凝聚态物理学 超导量子计算方向</td>\n</tr>\n<tr>\n<td align=\"center\">邢畅</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国东北大学   硕士</td>\n<td align=\"center\">Facebook工作</td>\n</tr>\n<tr>\n<td align=\"center\">弓得力</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">新加坡国立大学</td>\n<td align=\"center\">区块链公司（Zilliqa）工作</td>\n</tr>\n<tr>\n<td align=\"center\">费翔</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">清华大学</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">巩炳辰</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">香港大学</td>\n<td align=\"center\">计算机视觉方向</td>\n</tr>\n<tr>\n<td align=\"center\">于振云</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术 阿里巴巴实习</td>\n</tr>\n<tr>\n<td align=\"center\">吴凡</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">电气工程与自动化   华为实习</td>\n</tr>\n<tr>\n<td align=\"center\">施歌</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\">2016级中加班中方生</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">杨玄达</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术(何志均班)</td>\n</tr>\n<tr>\n<td align=\"center\">孙耀珠</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">求是科学班(计算机)</td>\n</tr>\n<tr>\n<td align=\"center\">菅浩然</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">陈岩</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">数字媒体技术</td>\n</tr>\n<tr>\n<td align=\"center\">袁谱博</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">俞炯弛</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">高分子科学与工程</td>\n</tr>\n<tr>\n<td align=\"center\">王克</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">黄启涵</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">软件工程</td>\n</tr>\n<tr>\n<td align=\"center\">康嘉成</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">林柯舟</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">漆翔宇</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">沈韬立</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">夏豪诚</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">张文捷</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">陈谋祥</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">潘薇鸿</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">测控技术与仪器</td>\n</tr>\n<tr>\n<td align=\"center\">朱璟森</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">张震铄</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n</tbody></table>\n<p><img src=\"index/ourASC17.png\" alt></p>\n<h2 id=\"超算队指导老师介绍\"><a href=\"#超算队指导老师介绍\" class=\"headerlink\" title=\"超算队指导老师介绍\"></a>超算队指导老师介绍</h2><p><strong>陈建海老师</strong></p>\n<p><img src=\"index/%E9%99%88%E5%BB%BA%E6%B5%B7%E8%80%81%E5%B8%88.jpg\" alt></p>\n<p>陈建海，博士，浙江大学计算机学院。浙江大学计算机学院智能计算&amp;系统实验室（InCAS-LAB）区块链负责人，IEEE、ACM、CCF会员。研究领域：计算机体系结构领域，涉及云计算、虚拟化、区块链，擅长区块链系统性能与安全，虚拟计算系统性能优化与调度，高性能计算并行应用优化，近似算法与博弈论运用等。 负责区块链、高性能计算方面的重点研发项目子课题2项，参与完成多项云计算虚拟化相关的国家科技部支撑计划、国家基金以及企业合作项目。累计发表SCI/EI论文15篇，申请授权专利超过30项。 第44界世界技能大赛网站设计项目浙江省技术专家组组长，国家级裁判，带领浙江省队员获44界世界技能大赛全国选拔赛第四名。主持Designer项目获2018全球迅雷区块链应用开发大赛第一名。</p>\n<p><strong>沈钦仙老师</strong></p>\n<h2 id=\"学校支持-设备介绍\"><a href=\"#学校支持-设备介绍\" class=\"headerlink\" title=\"学校支持 设备介绍\"></a>学校支持 设备介绍</h2><p><strong>计算机学院超算竞赛基地</strong></p>\n<ul>\n<li><p>吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合</p>\n</li>\n<li><p>开设暑期超算集训短学期课程</p>\n</li>\n<li><p>学院提供超算竞赛基地，支持每年8万元经费</p>\n<p><img src=\"index/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E4%B8%9C%E5%9B%9B-510%E8%B6%85%E7%AE%97%E9%9B%86%E7%BE%A4.JPG\" alt=\"浙江大学东四-510超算集群\"><br><img src=\"index/1.jpg\" alt=\"集群\"><br><img src=\"index/2.jpg\" alt=\"RTX\"></p>\n</li>\n</ul>\n<p><strong>硬件强支撑</strong>：学校与学院支持建有13节点百万超算集群，含GPU\\MAC卡等异构设备</p>\n<h2 id=\"赞助与合作介绍\"><a href=\"#赞助与合作介绍\" class=\"headerlink\" title=\"赞助与合作介绍\"></a>赞助与合作介绍</h2><ul>\n<li>ASC2016 获英伟达硬件Tesla GPU K80 加速卡硬件赞助</li>\n<li>ASC2018获AMAX 赞助借用硬件Tesla GPU V100 8块  </li>\n<li>······</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"超算队成员介绍\"><a href=\"#超算队成员介绍\" class=\"headerlink\" title=\"超算队成员介绍\"></a>超算队成员介绍</h2><table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">毕业年份</th>\n<th align=\"center\">去向分类</th>\n<th align=\"center\">去向</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">何宇</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国   卡内基梅隆大学    硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">单挺</td>\n<td align=\"center\"></td>\n<td align=\"center\">创业</td>\n<td align=\"center\">杭州马猴烧韭科技有限公司</td>\n<td align=\"center\">公司已获得300万元融资</td>\n</tr>\n<tr>\n<td align=\"center\">徐启源</td>\n<td align=\"center\">2017</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">浙江大学   硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">朱鼎含</td>\n<td align=\"center\">2017</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国   南加州大学 硕士</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">陈星眸</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">工作</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">曹舒翔</td>\n<td align=\"center\">2018</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">英国   牛津大学 博士</td>\n<td align=\"center\">凝聚态物理学 超导量子计算方向</td>\n</tr>\n<tr>\n<td align=\"center\">邢畅</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">美国东北大学   硕士</td>\n<td align=\"center\">Facebook工作</td>\n</tr>\n<tr>\n<td align=\"center\">弓得力</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">出国留学</td>\n<td align=\"center\">新加坡国立大学</td>\n<td align=\"center\">区块链公司（Zilliqa）工作</td>\n</tr>\n<tr>\n<td align=\"center\">费翔</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">清华大学</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">巩炳辰</td>\n<td align=\"center\">2016</td>\n<td align=\"center\">国内深造</td>\n<td align=\"center\">香港大学</td>\n<td align=\"center\">计算机视觉方向</td>\n</tr>\n<tr>\n<td align=\"center\">于振云</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术 阿里巴巴实习</td>\n</tr>\n<tr>\n<td align=\"center\">吴凡</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">电气工程与自动化   华为实习</td>\n</tr>\n<tr>\n<td align=\"center\">施歌</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\">2016级中加班中方生</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">杨玄达</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术(何志均班)</td>\n</tr>\n<tr>\n<td align=\"center\">孙耀珠</td>\n<td align=\"center\">2019</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">求是科学班(计算机)</td>\n</tr>\n<tr>\n<td align=\"center\">菅浩然</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">陈岩</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">数字媒体技术</td>\n</tr>\n<tr>\n<td align=\"center\">袁谱博</td>\n<td align=\"center\">2020</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">俞炯弛</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">高分子科学与工程</td>\n</tr>\n<tr>\n<td align=\"center\">王克</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">黄启涵</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">软件工程</td>\n</tr>\n<tr>\n<td align=\"center\">康嘉成</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">林柯舟</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">漆翔宇</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">沈韬立</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">夏豪诚</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">信息安全</td>\n</tr>\n<tr>\n<td align=\"center\">张文捷</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">陈谋祥</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">潘薇鸿</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">测控技术与仪器</td>\n</tr>\n<tr>\n<td align=\"center\">朱璟森</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n<tr>\n<td align=\"center\">张震铄</td>\n<td align=\"center\">2021</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">计算机科学与技术</td>\n</tr>\n</tbody></table>\n<p><img src=\"index/ourASC17.png\" alt></p>\n<h2 id=\"超算队指导老师介绍\"><a href=\"#超算队指导老师介绍\" class=\"headerlink\" title=\"超算队指导老师介绍\"></a>超算队指导老师介绍</h2><p><strong>陈建海老师</strong></p>\n<p><img src=\"index/%E9%99%88%E5%BB%BA%E6%B5%B7%E8%80%81%E5%B8%88.jpg\" alt></p>\n<p>陈建海，博士，浙江大学计算机学院。浙江大学计算机学院智能计算&amp;系统实验室（InCAS-LAB）区块链负责人，IEEE、ACM、CCF会员。研究领域：计算机体系结构领域，涉及云计算、虚拟化、区块链，擅长区块链系统性能与安全，虚拟计算系统性能优化与调度，高性能计算并行应用优化，近似算法与博弈论运用等。 负责区块链、高性能计算方面的重点研发项目子课题2项，参与完成多项云计算虚拟化相关的国家科技部支撑计划、国家基金以及企业合作项目。累计发表SCI/EI论文15篇，申请授权专利超过30项。 第44界世界技能大赛网站设计项目浙江省技术专家组组长，国家级裁判，带领浙江省队员获44界世界技能大赛全国选拔赛第四名。主持Designer项目获2018全球迅雷区块链应用开发大赛第一名。</p>\n<p><strong>沈钦仙老师</strong></p>\n<h2 id=\"学校支持-设备介绍\"><a href=\"#学校支持-设备介绍\" class=\"headerlink\" title=\"学校支持 设备介绍\"></a>学校支持 设备介绍</h2><p><strong>计算机学院超算竞赛基地</strong></p>\n<ul>\n<li><p>吸引本科生参加超级计算机竞赛以培养学生在超算并行、高性能计算方面的动手实践能力，促进课程理论知识与实践能力的结合</p>\n</li>\n<li><p>开设暑期超算集训短学期课程</p>\n</li>\n<li><p>学院提供超算竞赛基地，支持每年8万元经费</p>\n<p><img src=\"index/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E4%B8%9C%E5%9B%9B-510%E8%B6%85%E7%AE%97%E9%9B%86%E7%BE%A4.JPG\" alt=\"浙江大学东四-510超算集群\"><br><img src=\"index/1.jpg\" alt=\"集群\"><br><img src=\"index/2.jpg\" alt=\"RTX\"></p>\n</li>\n</ul>\n<p><strong>硬件强支撑</strong>：学校与学院支持建有13节点百万超算集群，含GPU\\MAC卡等异构设备</p>\n<h2 id=\"赞助与合作介绍\"><a href=\"#赞助与合作介绍\" class=\"headerlink\" title=\"赞助与合作介绍\"></a>赞助与合作介绍</h2><ul>\n<li>ASC2016 获英伟达硬件Tesla GPU K80 加速卡硬件赞助</li>\n<li>ASC2018获AMAX 赞助借用硬件Tesla GPU V100 8块  </li>\n<li>······</li>\n</ul>\n"}],"Post":[{"title":"如何在墙内快速部署CentOS 7的MySQL","date":"2019-03-31T02:45:19.000Z","author":"王克","_content":"\n# 如何在墙内快速部署CentOS 7的MySQL\n\nMySQL 被 Oracle 收购后，CentOS 的镜像仓库中提供的默认的数据库也变为了 MariaDB，所以默认没有 MySQL ，需要手动安装。\n\n其实安装 MySQL 也并不是一件很难的事情，但是由于一些实际存在的问题(比如某墙)，让默认通过 yum 安装 MySQL 的速度太慢。这里提出一种可行的方案来快速部署 MySQL ，此方案同样适用于其他 rpm 包软件的手动安装。\n\n本文实际在讲的是，如何利用各种手段，加速和改善yum的安装过程。\n\n---\n\n## 传统方案……慢到怀疑人生\n\n根据[官方指南](https://dev.mysql.com/downloads/repo/yum/)，我们执行如下命令：\n\n```bash\n# 下载源\nwget \"https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\"\n# 安装源\nsudo rpm -ivh mysql80-community-release-el7-2.noarch.rpm\n# 检查源是否成功安装\nsudo yum repolist enabled | grep \"mysql80-community*\"\n```\n\n接下来就是正常的安装步骤：\n\n```bash\nsudo yum install mysql-community-server mysql\n```\n\n但是由于一些原因，下载速度基本是几Byte/s，MySQL 服务器的大小(加上依赖服务)差不多有600MB，这种方法基本不可取。手头没有特别好的而且很新的软件源，就打算手动安装。\n\n## 手动安装法\n\n首先依然需要下载并安装官方源。\n\n```bash\nyum install mysql-community-server\n```\n\n利用该命令我们可以获取一些 MySQl Server 以来安装顺序及其版本：\n\n```plain\n=================================================================================================\n Package                       Arch          Version              Repository                Size\n=================================================================================================\nReinstalling:\n mysql-community-client        x86_64        8.0.15-1.el7         mysql80-community         25 M\n\n mysql-community-libs          x86_64        8.0.15-1.el7         mysql80-community          2 M\n\n mysql-community-common        x86_64        8.0.15-1.el7         mysql80-community        570 K\n\n mysql-community-server        x86_64        8.0.15-1.el7         mysql80-community        360 M\n\nTransaction Summary\n=================================================================================================\n```\n\n解压并分析rpm源包：\n\n```bash\nrpm2cpio mysql80-community-release-el7-2.noarch.rpm | cpio -div\nvim /etc/yum.repos.d/mysql-community.repo\n```\n\n从中我们可以找到对应版本的网络路径为`http://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/`。\n\n打开该地址，找到对应的几个安装包：\n\n* mysql-community-client-8.0.15-1.el7.x86_64.rpm\n* mysql-community-libs-8.0.15-1.el7.x86_64.rpm\n* mysql-community-common-8.0.15-1.el7.x86_64.rpm\n* mysql-community-server-8.0.15-1.el7.x86_64.rpm\n\n使用某种下载工具(我使用的是迅雷)下载，然后使用`scp`指令上传到服务器上：\n\n```bash\nscp mysql-community-client-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-client-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-libs-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-libs-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-common-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-common-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-server-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-server-8.0.15-1.el7.x86_64.rpm\n```\n\n按照先后顺序依次执行`yum`本地安装：\n\n```bash\nsudo yum localinstall mysql-community-common-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-libs-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-client-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-server-8.0.15-1.el7.x86_64.rpm\n\nsudo yum -y install mysql\n```\n\n安装成功，启动并测试服务：\n\n```bash\nsystemctl start mysqld.service\nsystemctl status mysqld.service\n```\n\n找出默认密码：\n\n```\ngrep \"password\" /var/log/mysqld.log >> defalut_mysql_passwd.txt\n```\n","source":"_posts/Install-MySQL-on-CentOS7-Inside-GFW.md","raw":"---\ntitle: 如何在墙内快速部署CentOS 7的MySQL\ndate: 2019-03-31 10:45:19\ntags: \n    - MySQL\n    - CentOS\nauthor: 王克\n---\n\n# 如何在墙内快速部署CentOS 7的MySQL\n\nMySQL 被 Oracle 收购后，CentOS 的镜像仓库中提供的默认的数据库也变为了 MariaDB，所以默认没有 MySQL ，需要手动安装。\n\n其实安装 MySQL 也并不是一件很难的事情，但是由于一些实际存在的问题(比如某墙)，让默认通过 yum 安装 MySQL 的速度太慢。这里提出一种可行的方案来快速部署 MySQL ，此方案同样适用于其他 rpm 包软件的手动安装。\n\n本文实际在讲的是，如何利用各种手段，加速和改善yum的安装过程。\n\n---\n\n## 传统方案……慢到怀疑人生\n\n根据[官方指南](https://dev.mysql.com/downloads/repo/yum/)，我们执行如下命令：\n\n```bash\n# 下载源\nwget \"https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\"\n# 安装源\nsudo rpm -ivh mysql80-community-release-el7-2.noarch.rpm\n# 检查源是否成功安装\nsudo yum repolist enabled | grep \"mysql80-community*\"\n```\n\n接下来就是正常的安装步骤：\n\n```bash\nsudo yum install mysql-community-server mysql\n```\n\n但是由于一些原因，下载速度基本是几Byte/s，MySQL 服务器的大小(加上依赖服务)差不多有600MB，这种方法基本不可取。手头没有特别好的而且很新的软件源，就打算手动安装。\n\n## 手动安装法\n\n首先依然需要下载并安装官方源。\n\n```bash\nyum install mysql-community-server\n```\n\n利用该命令我们可以获取一些 MySQl Server 以来安装顺序及其版本：\n\n```plain\n=================================================================================================\n Package                       Arch          Version              Repository                Size\n=================================================================================================\nReinstalling:\n mysql-community-client        x86_64        8.0.15-1.el7         mysql80-community         25 M\n\n mysql-community-libs          x86_64        8.0.15-1.el7         mysql80-community          2 M\n\n mysql-community-common        x86_64        8.0.15-1.el7         mysql80-community        570 K\n\n mysql-community-server        x86_64        8.0.15-1.el7         mysql80-community        360 M\n\nTransaction Summary\n=================================================================================================\n```\n\n解压并分析rpm源包：\n\n```bash\nrpm2cpio mysql80-community-release-el7-2.noarch.rpm | cpio -div\nvim /etc/yum.repos.d/mysql-community.repo\n```\n\n从中我们可以找到对应版本的网络路径为`http://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/`。\n\n打开该地址，找到对应的几个安装包：\n\n* mysql-community-client-8.0.15-1.el7.x86_64.rpm\n* mysql-community-libs-8.0.15-1.el7.x86_64.rpm\n* mysql-community-common-8.0.15-1.el7.x86_64.rpm\n* mysql-community-server-8.0.15-1.el7.x86_64.rpm\n\n使用某种下载工具(我使用的是迅雷)下载，然后使用`scp`指令上传到服务器上：\n\n```bash\nscp mysql-community-client-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-client-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-libs-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-libs-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-common-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-common-8.0.15-1.el7.x86_64.rpm\nscp mysql-community-server-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-server-8.0.15-1.el7.x86_64.rpm\n```\n\n按照先后顺序依次执行`yum`本地安装：\n\n```bash\nsudo yum localinstall mysql-community-common-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-libs-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-client-8.0.15-1.el7.x86_64.rpm\nsudo yum localinstall mysql-community-server-8.0.15-1.el7.x86_64.rpm\n\nsudo yum -y install mysql\n```\n\n安装成功，启动并测试服务：\n\n```bash\nsystemctl start mysqld.service\nsystemctl status mysqld.service\n```\n\n找出默认密码：\n\n```\ngrep \"password\" /var/log/mysqld.log >> defalut_mysql_passwd.txt\n```\n","slug":"Install-MySQL-on-CentOS7-Inside-GFW","published":1,"updated":"2019-05-12T02:30:58.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrmz80000jwuun6045si1","content":"<h1 id=\"如何在墙内快速部署CentOS-7的MySQL\"><a href=\"#如何在墙内快速部署CentOS-7的MySQL\" class=\"headerlink\" title=\"如何在墙内快速部署CentOS 7的MySQL\"></a>如何在墙内快速部署CentOS 7的MySQL</h1><p>MySQL 被 Oracle 收购后，CentOS 的镜像仓库中提供的默认的数据库也变为了 MariaDB，所以默认没有 MySQL ，需要手动安装。</p>\n<p>其实安装 MySQL 也并不是一件很难的事情，但是由于一些实际存在的问题(比如某墙)，让默认通过 yum 安装 MySQL 的速度太慢。这里提出一种可行的方案来快速部署 MySQL ，此方案同样适用于其他 rpm 包软件的手动安装。</p>\n<p>本文实际在讲的是，如何利用各种手段，加速和改善yum的安装过程。</p>\n<hr>\n<h2 id=\"传统方案……慢到怀疑人生\"><a href=\"#传统方案……慢到怀疑人生\" class=\"headerlink\" title=\"传统方案……慢到怀疑人生\"></a>传统方案……慢到怀疑人生</h2><p>根据<a href=\"https://dev.mysql.com/downloads/repo/yum/\" target=\"_blank\" rel=\"noopener\">官方指南</a>，我们执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载源</span></span><br><span class=\"line\">wget <span class=\"string\">\"https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\"</span></span><br><span class=\"line\"><span class=\"comment\"># 安装源</span></span><br><span class=\"line\">sudo rpm -ivh mysql80-community-release-el7-2.noarch.rpm</span><br><span class=\"line\"><span class=\"comment\"># 检查源是否成功安装</span></span><br><span class=\"line\">sudo yum repolist enabled | grep <span class=\"string\">\"mysql80-community*\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是正常的安装步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install mysql-community-server mysql</span><br></pre></td></tr></table></figure>\n\n<p>但是由于一些原因，下载速度基本是几Byte/s，MySQL 服务器的大小(加上依赖服务)差不多有600MB，这种方法基本不可取。手头没有特别好的而且很新的软件源，就打算手动安装。</p>\n<h2 id=\"手动安装法\"><a href=\"#手动安装法\" class=\"headerlink\" title=\"手动安装法\"></a>手动安装法</h2><p>首先依然需要下载并安装官方源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>利用该命令我们可以获取一些 MySQl Server 以来安装顺序及其版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=================================================================================================</span><br><span class=\"line\"> Package                       Arch          Version              Repository                Size</span><br><span class=\"line\">=================================================================================================</span><br><span class=\"line\">Reinstalling:</span><br><span class=\"line\"> mysql-community-client        x86_64        8.0.15-1.el7         mysql80-community         25 M</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-libs          x86_64        8.0.15-1.el7         mysql80-community          2 M</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-common        x86_64        8.0.15-1.el7         mysql80-community        570 K</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-server        x86_64        8.0.15-1.el7         mysql80-community        360 M</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=================================================================================================</span><br></pre></td></tr></table></figure>\n\n<p>解压并分析rpm源包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm2cpio mysql80-community-release-el7-2.noarch.rpm | cpio -div</span><br><span class=\"line\">vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure>\n\n<p>从中我们可以找到对应版本的网络路径为<code>http://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/</code>。</p>\n<p>打开该地址，找到对应的几个安装包：</p>\n<ul>\n<li>mysql-community-client-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-libs-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-common-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-server-8.0.15-1.el7.x86_64.rpm</li>\n</ul>\n<p>使用某种下载工具(我使用的是迅雷)下载，然后使用<code>scp</code>指令上传到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp mysql-community-client-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-client-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-libs-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-libs-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-common-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-common-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-server-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-server-8.0.15-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<p>按照先后顺序依次执行<code>yum</code>本地安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum localinstall mysql-community-common-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-libs-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-client-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-server-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y install mysql</span><br></pre></td></tr></table></figure>\n\n<p>安装成功，启动并测试服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br><span class=\"line\">systemctl status mysqld.service</span><br></pre></td></tr></table></figure>\n\n<p>找出默认密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;password&quot; /var/log/mysqld.log &gt;&gt; defalut_mysql_passwd.txt</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何在墙内快速部署CentOS-7的MySQL\"><a href=\"#如何在墙内快速部署CentOS-7的MySQL\" class=\"headerlink\" title=\"如何在墙内快速部署CentOS 7的MySQL\"></a>如何在墙内快速部署CentOS 7的MySQL</h1><p>MySQL 被 Oracle 收购后，CentOS 的镜像仓库中提供的默认的数据库也变为了 MariaDB，所以默认没有 MySQL ，需要手动安装。</p>\n<p>其实安装 MySQL 也并不是一件很难的事情，但是由于一些实际存在的问题(比如某墙)，让默认通过 yum 安装 MySQL 的速度太慢。这里提出一种可行的方案来快速部署 MySQL ，此方案同样适用于其他 rpm 包软件的手动安装。</p>\n<p>本文实际在讲的是，如何利用各种手段，加速和改善yum的安装过程。</p>\n<hr>\n<h2 id=\"传统方案……慢到怀疑人生\"><a href=\"#传统方案……慢到怀疑人生\" class=\"headerlink\" title=\"传统方案……慢到怀疑人生\"></a>传统方案……慢到怀疑人生</h2><p>根据<a href=\"https://dev.mysql.com/downloads/repo/yum/\" target=\"_blank\" rel=\"noopener\">官方指南</a>，我们执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载源</span></span><br><span class=\"line\">wget <span class=\"string\">\"https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm\"</span></span><br><span class=\"line\"><span class=\"comment\"># 安装源</span></span><br><span class=\"line\">sudo rpm -ivh mysql80-community-release-el7-2.noarch.rpm</span><br><span class=\"line\"><span class=\"comment\"># 检查源是否成功安装</span></span><br><span class=\"line\">sudo yum repolist enabled | grep <span class=\"string\">\"mysql80-community*\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是正常的安装步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install mysql-community-server mysql</span><br></pre></td></tr></table></figure>\n\n<p>但是由于一些原因，下载速度基本是几Byte/s，MySQL 服务器的大小(加上依赖服务)差不多有600MB，这种方法基本不可取。手头没有特别好的而且很新的软件源，就打算手动安装。</p>\n<h2 id=\"手动安装法\"><a href=\"#手动安装法\" class=\"headerlink\" title=\"手动安装法\"></a>手动安装法</h2><p>首先依然需要下载并安装官方源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>利用该命令我们可以获取一些 MySQl Server 以来安装顺序及其版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=================================================================================================</span><br><span class=\"line\"> Package                       Arch          Version              Repository                Size</span><br><span class=\"line\">=================================================================================================</span><br><span class=\"line\">Reinstalling:</span><br><span class=\"line\"> mysql-community-client        x86_64        8.0.15-1.el7         mysql80-community         25 M</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-libs          x86_64        8.0.15-1.el7         mysql80-community          2 M</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-common        x86_64        8.0.15-1.el7         mysql80-community        570 K</span><br><span class=\"line\"></span><br><span class=\"line\"> mysql-community-server        x86_64        8.0.15-1.el7         mysql80-community        360 M</span><br><span class=\"line\"></span><br><span class=\"line\">Transaction Summary</span><br><span class=\"line\">=================================================================================================</span><br></pre></td></tr></table></figure>\n\n<p>解压并分析rpm源包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm2cpio mysql80-community-release-el7-2.noarch.rpm | cpio -div</span><br><span class=\"line\">vim /etc/yum.repos.d/mysql-community.repo</span><br></pre></td></tr></table></figure>\n\n<p>从中我们可以找到对应版本的网络路径为<code>http://repo.mysql.com/yum/mysql-8.0-community/el/7/x86_64/</code>。</p>\n<p>打开该地址，找到对应的几个安装包：</p>\n<ul>\n<li>mysql-community-client-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-libs-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-common-8.0.15-1.el7.x86_64.rpm</li>\n<li>mysql-community-server-8.0.15-1.el7.x86_64.rpm</li>\n</ul>\n<p>使用某种下载工具(我使用的是迅雷)下载，然后使用<code>scp</code>指令上传到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp mysql-community-client-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-client-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-libs-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-libs-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-common-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-common-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">scp mysql-community-server-8.0.15-1.el7.x86_64.rpm xxx@xx.xx.xx.xx:/root/mysql-community-server-8.0.15-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<p>按照先后顺序依次执行<code>yum</code>本地安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum localinstall mysql-community-common-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-libs-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-client-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\">sudo yum localinstall mysql-community-server-8.0.15-1.el7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum -y install mysql</span><br></pre></td></tr></table></figure>\n\n<p>安装成功，启动并测试服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br><span class=\"line\">systemctl status mysqld.service</span><br></pre></td></tr></table></figure>\n\n<p>找出默认密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;password&quot; /var/log/mysqld.log &gt;&gt; defalut_mysql_passwd.txt</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Quick Guide to CUDA Profiling","date":"2018-12-07T15:48:33.000Z","author":"小妹妹","_content":"\n# 1. Brief Introduction\n\n在并行计算领域，很难通过纯理论的分析来确定程序的性能，`GPGPU`这种基于特定计算架构的计算任务更甚。事实上，很多制约并行算法性能的瓶颈很可能不在算法本身（比如资源调度障碍）。因此，对给定程序进行充分的性能测试与后续分析是相当必要的调优方法。\n\n`Nvidia`提供了`nvprof`，`nvvp`，`Nsight`三种cuda可用的性能分析工具，本文将简述配合使用`nvprof`与`nvvp`的cuda程序性能分析方法。\n\n# 2. Check Out Device Properties\n\n由于cuda程序的线程/块分配方案与程序运行的的硬件高度相关，故对目标平台的硬件参数有一定程度的了解是相当有必要的。我们可以使用`cudaGetDeviceProperties()`函数获取设备的各项属性，下述代码可以结合`cuda_runtime_api.h#1218`处`struct cudaDeviceProp`的定义和各属性的相应注解自行理解。\n\n```cpp\nint nDevices;\ncudaDeviceProp prop;\ncudaGetDeviceCount( &nDevices );\nfor ( auto i = 0; i != nDevices; ++i )\n{\n\tcudaGetDeviceProperties( &prop, i );\n\t// check out interesting property\n}\n```\n\n# 3. Profile Using Nvprof\n\n## 3.1. Quick Start\n\n```bash\nnvprof --help\n```\n\n## 3.2. Metrics\n\n* 使用`--query-metrics`列出所有可测试的性能指标。\n* 使用`--metrics sm_efficiency,warp_execution_efficiency,...`指定要测试的性能指标。\n\n## 3.3. PC Sampling\n\n在CC5.2或更高的设备上支持使用PC采样(PC sampling)技术。\n\nPC采样技术通过`Round-Robin`方法对SM中所有活动线程束的PC状态进行采样，采样结果包含如下两种可能：\n\n* 线程束完成了当前指令。\n* 线程束被`stall`，不能完成当前指令，并可以给出`stall`的原因。\n\n事实上线程束被`stall`并不代表指令流水线处于`stall`状态，因为其他正常运行的线程束可以利用计算资源。\n\nCC6.0以上的设备对PC采样方法进行了改进，通过检查线程束调度器是否执行指令来确定指令流水线是否真正处于`stall`状态，从而能正确指示指令`stall`的原因。\n\n# 4. Data Visualize Using Nvvp\n\n`nvvp`可以导入`nvprof`的分析结果，可视化显示统计图表，并且建议性地指出程序可能存在的瓶颈。\n\n*以饼状图显示各类stall比重*\n\n<img src=\"a.jpg\" />\n\n*以频谱显示各类指令比例*\n\n<img src=\"b.jpg\" />\n\n*通过source file mapping可视化指令stall状态，需要在编译选项中指定`-lineinfo`*\n\n<img src=\"d.jpg\" />\n\n## 4.1. Usage\n\n```bash\nnvprof -f --kernels \"kernelName\" --analysis-metrics -o a.nvvp <task> <args>\nnvvp a.nvvp\n```\n\n这里我使用的方法是在集群上用`nvprof`做性能测试，之后将分析结果`*.nvvp`传回本地用`nvvp`做可视化。\n\n# Ext. Remarks\n\n## Tradeoff Between Registers and Threads\n\n在实际Profiling中重新认识了这个问题。\n\n在默认情况下，`nvcc`为每个线程分配`maxRegsPerThread`个数的寄存器，在*Tesla K40*上，这个值为64。同时，每个SM持有为65536个寄存器，这意味着单个SM中的线程数最多不超过1024。通过检查参数表，我们发现该设备单个SM可容纳线程数为2048。这意味着我们计算任务的GPU利用率最大只有50%（所有SM均满载的状态下）。\n\n在这种情况下，如果我们将分配给单个线程的寄存器数目减半，则最大GPU利用率可以达到100%。但若发生寄存器溢出（register spilling），溢出的存储空间被放到片外的local memory，访问速度在（同在片外的）global memory级别。\n\n在实际的CUDA核函数中，能全部利用64个寄存器的情况很少。寄存器的使用情况可以在nvvp中检查，如果发现有大量寄存器浪费，可以立即减少寄存器数量。在大多数情况下，可以结合计算任务的量级和性质来调节线程最大寄存器数，从而达到有针对性的性能调优。\n\n在`nvcc`中指定单个线程最大寄存器数，可以添加编译选项`-maxrregcount=N`。如果限定不修改编译选项或需要逐核函数指定，则需要使用`__launch_bounds__`限定符，如下（隐式地指定了最大寄存器个数）：\n\n```cpp\n__global__ void\n__launch_bounds__(maxThreadsPerBlock, minBlocksPerMultiprocessor)\nMyKernel(...)\n{\n    ...\n}\n```\n\n在我的`path tracer`中对上述方法进行测试，将每线程的寄存器数减半为32，SM线程数加倍并满载，GPU利用率由30+提升到70+，执行速度有1.5倍左右的提升。\n\n## Tradeoff Between BlockDim and BlockPerSM\n\n当一个块（block）中的所有线程束（warp）全部完成时，这个块才可以被SM调度。如果块的大小过大，则块的运行速度受单个线程束约束的开销就越大（如果算法并行度很高，增大块的大小不失为一个好选择）；如果块的大小过小，则一方面SM可能无法达到其最大利用率（受`maxBlocksPerSM`的限制），另一方面SM调度块的额外开销也会增大。尤其是针对不同特点的计算任务有不同的更优选择，如`divergency`较高的任务更适合较小的BlockDim。所以在选择BlockDim时不仅要在算法的适应性上做考虑，还要通过多次性能测试来进行针对性的优化。\n\n## Beware of Ladder Effects\n\n注意计算资源分配时要注意分配的资源量要能够被组别整除，否则会出现断层状的资源浪费现象。\n\n*每块线程数与SM中最大线程束数的关系*\n\n<img src=\"c.jpg\" />\n","source":"_posts/cuprof.md","raw":"---\ntitle: Quick Guide to CUDA Profiling\ndate: 2018-12-07 23:48:33\nauthor: 小妹妹\ntags: \n    - Tech\n    - CUDA\n    - Profile\n---\n\n# 1. Brief Introduction\n\n在并行计算领域，很难通过纯理论的分析来确定程序的性能，`GPGPU`这种基于特定计算架构的计算任务更甚。事实上，很多制约并行算法性能的瓶颈很可能不在算法本身（比如资源调度障碍）。因此，对给定程序进行充分的性能测试与后续分析是相当必要的调优方法。\n\n`Nvidia`提供了`nvprof`，`nvvp`，`Nsight`三种cuda可用的性能分析工具，本文将简述配合使用`nvprof`与`nvvp`的cuda程序性能分析方法。\n\n# 2. Check Out Device Properties\n\n由于cuda程序的线程/块分配方案与程序运行的的硬件高度相关，故对目标平台的硬件参数有一定程度的了解是相当有必要的。我们可以使用`cudaGetDeviceProperties()`函数获取设备的各项属性，下述代码可以结合`cuda_runtime_api.h#1218`处`struct cudaDeviceProp`的定义和各属性的相应注解自行理解。\n\n```cpp\nint nDevices;\ncudaDeviceProp prop;\ncudaGetDeviceCount( &nDevices );\nfor ( auto i = 0; i != nDevices; ++i )\n{\n\tcudaGetDeviceProperties( &prop, i );\n\t// check out interesting property\n}\n```\n\n# 3. Profile Using Nvprof\n\n## 3.1. Quick Start\n\n```bash\nnvprof --help\n```\n\n## 3.2. Metrics\n\n* 使用`--query-metrics`列出所有可测试的性能指标。\n* 使用`--metrics sm_efficiency,warp_execution_efficiency,...`指定要测试的性能指标。\n\n## 3.3. PC Sampling\n\n在CC5.2或更高的设备上支持使用PC采样(PC sampling)技术。\n\nPC采样技术通过`Round-Robin`方法对SM中所有活动线程束的PC状态进行采样，采样结果包含如下两种可能：\n\n* 线程束完成了当前指令。\n* 线程束被`stall`，不能完成当前指令，并可以给出`stall`的原因。\n\n事实上线程束被`stall`并不代表指令流水线处于`stall`状态，因为其他正常运行的线程束可以利用计算资源。\n\nCC6.0以上的设备对PC采样方法进行了改进，通过检查线程束调度器是否执行指令来确定指令流水线是否真正处于`stall`状态，从而能正确指示指令`stall`的原因。\n\n# 4. Data Visualize Using Nvvp\n\n`nvvp`可以导入`nvprof`的分析结果，可视化显示统计图表，并且建议性地指出程序可能存在的瓶颈。\n\n*以饼状图显示各类stall比重*\n\n<img src=\"a.jpg\" />\n\n*以频谱显示各类指令比例*\n\n<img src=\"b.jpg\" />\n\n*通过source file mapping可视化指令stall状态，需要在编译选项中指定`-lineinfo`*\n\n<img src=\"d.jpg\" />\n\n## 4.1. Usage\n\n```bash\nnvprof -f --kernels \"kernelName\" --analysis-metrics -o a.nvvp <task> <args>\nnvvp a.nvvp\n```\n\n这里我使用的方法是在集群上用`nvprof`做性能测试，之后将分析结果`*.nvvp`传回本地用`nvvp`做可视化。\n\n# Ext. Remarks\n\n## Tradeoff Between Registers and Threads\n\n在实际Profiling中重新认识了这个问题。\n\n在默认情况下，`nvcc`为每个线程分配`maxRegsPerThread`个数的寄存器，在*Tesla K40*上，这个值为64。同时，每个SM持有为65536个寄存器，这意味着单个SM中的线程数最多不超过1024。通过检查参数表，我们发现该设备单个SM可容纳线程数为2048。这意味着我们计算任务的GPU利用率最大只有50%（所有SM均满载的状态下）。\n\n在这种情况下，如果我们将分配给单个线程的寄存器数目减半，则最大GPU利用率可以达到100%。但若发生寄存器溢出（register spilling），溢出的存储空间被放到片外的local memory，访问速度在（同在片外的）global memory级别。\n\n在实际的CUDA核函数中，能全部利用64个寄存器的情况很少。寄存器的使用情况可以在nvvp中检查，如果发现有大量寄存器浪费，可以立即减少寄存器数量。在大多数情况下，可以结合计算任务的量级和性质来调节线程最大寄存器数，从而达到有针对性的性能调优。\n\n在`nvcc`中指定单个线程最大寄存器数，可以添加编译选项`-maxrregcount=N`。如果限定不修改编译选项或需要逐核函数指定，则需要使用`__launch_bounds__`限定符，如下（隐式地指定了最大寄存器个数）：\n\n```cpp\n__global__ void\n__launch_bounds__(maxThreadsPerBlock, minBlocksPerMultiprocessor)\nMyKernel(...)\n{\n    ...\n}\n```\n\n在我的`path tracer`中对上述方法进行测试，将每线程的寄存器数减半为32，SM线程数加倍并满载，GPU利用率由30+提升到70+，执行速度有1.5倍左右的提升。\n\n## Tradeoff Between BlockDim and BlockPerSM\n\n当一个块（block）中的所有线程束（warp）全部完成时，这个块才可以被SM调度。如果块的大小过大，则块的运行速度受单个线程束约束的开销就越大（如果算法并行度很高，增大块的大小不失为一个好选择）；如果块的大小过小，则一方面SM可能无法达到其最大利用率（受`maxBlocksPerSM`的限制），另一方面SM调度块的额外开销也会增大。尤其是针对不同特点的计算任务有不同的更优选择，如`divergency`较高的任务更适合较小的BlockDim。所以在选择BlockDim时不仅要在算法的适应性上做考虑，还要通过多次性能测试来进行针对性的优化。\n\n## Beware of Ladder Effects\n\n注意计算资源分配时要注意分配的资源量要能够被组别整除，否则会出现断层状的资源浪费现象。\n\n*每块线程数与SM中最大线程束数的关系*\n\n<img src=\"c.jpg\" />\n","slug":"cuprof","published":1,"updated":"2019-05-12T02:30:58.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrmzh0002jwuuvvjlxv29","content":"<h1 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h1><p>在并行计算领域，很难通过纯理论的分析来确定程序的性能，<code>GPGPU</code>这种基于特定计算架构的计算任务更甚。事实上，很多制约并行算法性能的瓶颈很可能不在算法本身（比如资源调度障碍）。因此，对给定程序进行充分的性能测试与后续分析是相当必要的调优方法。</p>\n<p><code>Nvidia</code>提供了<code>nvprof</code>，<code>nvvp</code>，<code>Nsight</code>三种cuda可用的性能分析工具，本文将简述配合使用<code>nvprof</code>与<code>nvvp</code>的cuda程序性能分析方法。</p>\n<h1 id=\"2-Check-Out-Device-Properties\"><a href=\"#2-Check-Out-Device-Properties\" class=\"headerlink\" title=\"2. Check Out Device Properties\"></a>2. Check Out Device Properties</h1><p>由于cuda程序的线程/块分配方案与程序运行的的硬件高度相关，故对目标平台的硬件参数有一定程度的了解是相当有必要的。我们可以使用<code>cudaGetDeviceProperties()</code>函数获取设备的各项属性，下述代码可以结合<code>cuda_runtime_api.h#1218</code>处<code>struct cudaDeviceProp</code>的定义和各属性的相应注解自行理解。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> nDevices;</span><br><span class=\"line\">cudaDeviceProp prop;</span><br><span class=\"line\">cudaGetDeviceCount( &amp;nDevices );</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i != nDevices; ++i )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcudaGetDeviceProperties( &amp;prop, i );</span><br><span class=\"line\">\t<span class=\"comment\">// check out interesting property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Profile-Using-Nvprof\"><a href=\"#3-Profile-Using-Nvprof\" class=\"headerlink\" title=\"3. Profile Using Nvprof\"></a>3. Profile Using Nvprof</h1><h2 id=\"3-1-Quick-Start\"><a href=\"#3-1-Quick-Start\" class=\"headerlink\" title=\"3.1. Quick Start\"></a>3.1. Quick Start</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvprof --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Metrics\"><a href=\"#3-2-Metrics\" class=\"headerlink\" title=\"3.2. Metrics\"></a>3.2. Metrics</h2><ul>\n<li>使用<code>--query-metrics</code>列出所有可测试的性能指标。</li>\n<li>使用<code>--metrics sm_efficiency,warp_execution_efficiency,...</code>指定要测试的性能指标。</li>\n</ul>\n<h2 id=\"3-3-PC-Sampling\"><a href=\"#3-3-PC-Sampling\" class=\"headerlink\" title=\"3.3. PC Sampling\"></a>3.3. PC Sampling</h2><p>在CC5.2或更高的设备上支持使用PC采样(PC sampling)技术。</p>\n<p>PC采样技术通过<code>Round-Robin</code>方法对SM中所有活动线程束的PC状态进行采样，采样结果包含如下两种可能：</p>\n<ul>\n<li>线程束完成了当前指令。</li>\n<li>线程束被<code>stall</code>，不能完成当前指令，并可以给出<code>stall</code>的原因。</li>\n</ul>\n<p>事实上线程束被<code>stall</code>并不代表指令流水线处于<code>stall</code>状态，因为其他正常运行的线程束可以利用计算资源。</p>\n<p>CC6.0以上的设备对PC采样方法进行了改进，通过检查线程束调度器是否执行指令来确定指令流水线是否真正处于<code>stall</code>状态，从而能正确指示指令<code>stall</code>的原因。</p>\n<h1 id=\"4-Data-Visualize-Using-Nvvp\"><a href=\"#4-Data-Visualize-Using-Nvvp\" class=\"headerlink\" title=\"4. Data Visualize Using Nvvp\"></a>4. Data Visualize Using Nvvp</h1><p><code>nvvp</code>可以导入<code>nvprof</code>的分析结果，可视化显示统计图表，并且建议性地指出程序可能存在的瓶颈。</p>\n<p><em>以饼状图显示各类stall比重</em></p>\n<img src=\"a.jpg\">\n\n<p><em>以频谱显示各类指令比例</em></p>\n<img src=\"b.jpg\">\n\n<p><em>通过source file mapping可视化指令stall状态，需要在编译选项中指定<code>-lineinfo</code></em></p>\n<img src=\"d.jpg\">\n\n<h2 id=\"4-1-Usage\"><a href=\"#4-1-Usage\" class=\"headerlink\" title=\"4.1. Usage\"></a>4.1. Usage</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvprof -f --kernels <span class=\"string\">\"kernelName\"</span> --analysis-metrics -o a.nvvp &lt;task&gt; &lt;args&gt;</span><br><span class=\"line\">nvvp a.nvvp</span><br></pre></td></tr></table></figure>\n\n<p>这里我使用的方法是在集群上用<code>nvprof</code>做性能测试，之后将分析结果<code>*.nvvp</code>传回本地用<code>nvvp</code>做可视化。</p>\n<h1 id=\"Ext-Remarks\"><a href=\"#Ext-Remarks\" class=\"headerlink\" title=\"Ext. Remarks\"></a>Ext. Remarks</h1><h2 id=\"Tradeoff-Between-Registers-and-Threads\"><a href=\"#Tradeoff-Between-Registers-and-Threads\" class=\"headerlink\" title=\"Tradeoff Between Registers and Threads\"></a>Tradeoff Between Registers and Threads</h2><p>在实际Profiling中重新认识了这个问题。</p>\n<p>在默认情况下，<code>nvcc</code>为每个线程分配<code>maxRegsPerThread</code>个数的寄存器，在<em>Tesla K40</em>上，这个值为64。同时，每个SM持有为65536个寄存器，这意味着单个SM中的线程数最多不超过1024。通过检查参数表，我们发现该设备单个SM可容纳线程数为2048。这意味着我们计算任务的GPU利用率最大只有50%（所有SM均满载的状态下）。</p>\n<p>在这种情况下，如果我们将分配给单个线程的寄存器数目减半，则最大GPU利用率可以达到100%。但若发生寄存器溢出（register spilling），溢出的存储空间被放到片外的local memory，访问速度在（同在片外的）global memory级别。</p>\n<p>在实际的CUDA核函数中，能全部利用64个寄存器的情况很少。寄存器的使用情况可以在nvvp中检查，如果发现有大量寄存器浪费，可以立即减少寄存器数量。在大多数情况下，可以结合计算任务的量级和性质来调节线程最大寄存器数，从而达到有针对性的性能调优。</p>\n<p>在<code>nvcc</code>中指定单个线程最大寄存器数，可以添加编译选项<code>-maxrregcount=N</code>。如果限定不修改编译选项或需要逐核函数指定，则需要使用<code>__launch_bounds__</code>限定符，如下（隐式地指定了最大寄存器个数）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__global__ <span class=\"keyword\">void</span></span><br><span class=\"line\">__launch_bounds__(maxThreadsPerBlock, minBlocksPerMultiprocessor)</span><br><span class=\"line\">MyKernel(...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我的<code>path tracer</code>中对上述方法进行测试，将每线程的寄存器数减半为32，SM线程数加倍并满载，GPU利用率由30+提升到70+，执行速度有1.5倍左右的提升。</p>\n<h2 id=\"Tradeoff-Between-BlockDim-and-BlockPerSM\"><a href=\"#Tradeoff-Between-BlockDim-and-BlockPerSM\" class=\"headerlink\" title=\"Tradeoff Between BlockDim and BlockPerSM\"></a>Tradeoff Between BlockDim and BlockPerSM</h2><p>当一个块（block）中的所有线程束（warp）全部完成时，这个块才可以被SM调度。如果块的大小过大，则块的运行速度受单个线程束约束的开销就越大（如果算法并行度很高，增大块的大小不失为一个好选择）；如果块的大小过小，则一方面SM可能无法达到其最大利用率（受<code>maxBlocksPerSM</code>的限制），另一方面SM调度块的额外开销也会增大。尤其是针对不同特点的计算任务有不同的更优选择，如<code>divergency</code>较高的任务更适合较小的BlockDim。所以在选择BlockDim时不仅要在算法的适应性上做考虑，还要通过多次性能测试来进行针对性的优化。</p>\n<h2 id=\"Beware-of-Ladder-Effects\"><a href=\"#Beware-of-Ladder-Effects\" class=\"headerlink\" title=\"Beware of Ladder Effects\"></a>Beware of Ladder Effects</h2><p>注意计算资源分配时要注意分配的资源量要能够被组别整除，否则会出现断层状的资源浪费现象。</p>\n<p><em>每块线程数与SM中最大线程束数的关系</em></p>\n<img src=\"c.jpg\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-Brief-Introduction\"><a href=\"#1-Brief-Introduction\" class=\"headerlink\" title=\"1. Brief Introduction\"></a>1. Brief Introduction</h1><p>在并行计算领域，很难通过纯理论的分析来确定程序的性能，<code>GPGPU</code>这种基于特定计算架构的计算任务更甚。事实上，很多制约并行算法性能的瓶颈很可能不在算法本身（比如资源调度障碍）。因此，对给定程序进行充分的性能测试与后续分析是相当必要的调优方法。</p>\n<p><code>Nvidia</code>提供了<code>nvprof</code>，<code>nvvp</code>，<code>Nsight</code>三种cuda可用的性能分析工具，本文将简述配合使用<code>nvprof</code>与<code>nvvp</code>的cuda程序性能分析方法。</p>\n<h1 id=\"2-Check-Out-Device-Properties\"><a href=\"#2-Check-Out-Device-Properties\" class=\"headerlink\" title=\"2. Check Out Device Properties\"></a>2. Check Out Device Properties</h1><p>由于cuda程序的线程/块分配方案与程序运行的的硬件高度相关，故对目标平台的硬件参数有一定程度的了解是相当有必要的。我们可以使用<code>cudaGetDeviceProperties()</code>函数获取设备的各项属性，下述代码可以结合<code>cuda_runtime_api.h#1218</code>处<code>struct cudaDeviceProp</code>的定义和各属性的相应注解自行理解。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> nDevices;</span><br><span class=\"line\">cudaDeviceProp prop;</span><br><span class=\"line\">cudaGetDeviceCount( &amp;nDevices );</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i != nDevices; ++i )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcudaGetDeviceProperties( &amp;prop, i );</span><br><span class=\"line\">\t<span class=\"comment\">// check out interesting property</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-Profile-Using-Nvprof\"><a href=\"#3-Profile-Using-Nvprof\" class=\"headerlink\" title=\"3. Profile Using Nvprof\"></a>3. Profile Using Nvprof</h1><h2 id=\"3-1-Quick-Start\"><a href=\"#3-1-Quick-Start\" class=\"headerlink\" title=\"3.1. Quick Start\"></a>3.1. Quick Start</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvprof --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-Metrics\"><a href=\"#3-2-Metrics\" class=\"headerlink\" title=\"3.2. Metrics\"></a>3.2. Metrics</h2><ul>\n<li>使用<code>--query-metrics</code>列出所有可测试的性能指标。</li>\n<li>使用<code>--metrics sm_efficiency,warp_execution_efficiency,...</code>指定要测试的性能指标。</li>\n</ul>\n<h2 id=\"3-3-PC-Sampling\"><a href=\"#3-3-PC-Sampling\" class=\"headerlink\" title=\"3.3. PC Sampling\"></a>3.3. PC Sampling</h2><p>在CC5.2或更高的设备上支持使用PC采样(PC sampling)技术。</p>\n<p>PC采样技术通过<code>Round-Robin</code>方法对SM中所有活动线程束的PC状态进行采样，采样结果包含如下两种可能：</p>\n<ul>\n<li>线程束完成了当前指令。</li>\n<li>线程束被<code>stall</code>，不能完成当前指令，并可以给出<code>stall</code>的原因。</li>\n</ul>\n<p>事实上线程束被<code>stall</code>并不代表指令流水线处于<code>stall</code>状态，因为其他正常运行的线程束可以利用计算资源。</p>\n<p>CC6.0以上的设备对PC采样方法进行了改进，通过检查线程束调度器是否执行指令来确定指令流水线是否真正处于<code>stall</code>状态，从而能正确指示指令<code>stall</code>的原因。</p>\n<h1 id=\"4-Data-Visualize-Using-Nvvp\"><a href=\"#4-Data-Visualize-Using-Nvvp\" class=\"headerlink\" title=\"4. Data Visualize Using Nvvp\"></a>4. Data Visualize Using Nvvp</h1><p><code>nvvp</code>可以导入<code>nvprof</code>的分析结果，可视化显示统计图表，并且建议性地指出程序可能存在的瓶颈。</p>\n<p><em>以饼状图显示各类stall比重</em></p>\n<img src=\"a.jpg\">\n\n<p><em>以频谱显示各类指令比例</em></p>\n<img src=\"b.jpg\">\n\n<p><em>通过source file mapping可视化指令stall状态，需要在编译选项中指定<code>-lineinfo</code></em></p>\n<img src=\"d.jpg\">\n\n<h2 id=\"4-1-Usage\"><a href=\"#4-1-Usage\" class=\"headerlink\" title=\"4.1. Usage\"></a>4.1. Usage</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvprof -f --kernels <span class=\"string\">\"kernelName\"</span> --analysis-metrics -o a.nvvp &lt;task&gt; &lt;args&gt;</span><br><span class=\"line\">nvvp a.nvvp</span><br></pre></td></tr></table></figure>\n\n<p>这里我使用的方法是在集群上用<code>nvprof</code>做性能测试，之后将分析结果<code>*.nvvp</code>传回本地用<code>nvvp</code>做可视化。</p>\n<h1 id=\"Ext-Remarks\"><a href=\"#Ext-Remarks\" class=\"headerlink\" title=\"Ext. Remarks\"></a>Ext. Remarks</h1><h2 id=\"Tradeoff-Between-Registers-and-Threads\"><a href=\"#Tradeoff-Between-Registers-and-Threads\" class=\"headerlink\" title=\"Tradeoff Between Registers and Threads\"></a>Tradeoff Between Registers and Threads</h2><p>在实际Profiling中重新认识了这个问题。</p>\n<p>在默认情况下，<code>nvcc</code>为每个线程分配<code>maxRegsPerThread</code>个数的寄存器，在<em>Tesla K40</em>上，这个值为64。同时，每个SM持有为65536个寄存器，这意味着单个SM中的线程数最多不超过1024。通过检查参数表，我们发现该设备单个SM可容纳线程数为2048。这意味着我们计算任务的GPU利用率最大只有50%（所有SM均满载的状态下）。</p>\n<p>在这种情况下，如果我们将分配给单个线程的寄存器数目减半，则最大GPU利用率可以达到100%。但若发生寄存器溢出（register spilling），溢出的存储空间被放到片外的local memory，访问速度在（同在片外的）global memory级别。</p>\n<p>在实际的CUDA核函数中，能全部利用64个寄存器的情况很少。寄存器的使用情况可以在nvvp中检查，如果发现有大量寄存器浪费，可以立即减少寄存器数量。在大多数情况下，可以结合计算任务的量级和性质来调节线程最大寄存器数，从而达到有针对性的性能调优。</p>\n<p>在<code>nvcc</code>中指定单个线程最大寄存器数，可以添加编译选项<code>-maxrregcount=N</code>。如果限定不修改编译选项或需要逐核函数指定，则需要使用<code>__launch_bounds__</code>限定符，如下（隐式地指定了最大寄存器个数）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__global__ <span class=\"keyword\">void</span></span><br><span class=\"line\">__launch_bounds__(maxThreadsPerBlock, minBlocksPerMultiprocessor)</span><br><span class=\"line\">MyKernel(...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我的<code>path tracer</code>中对上述方法进行测试，将每线程的寄存器数减半为32，SM线程数加倍并满载，GPU利用率由30+提升到70+，执行速度有1.5倍左右的提升。</p>\n<h2 id=\"Tradeoff-Between-BlockDim-and-BlockPerSM\"><a href=\"#Tradeoff-Between-BlockDim-and-BlockPerSM\" class=\"headerlink\" title=\"Tradeoff Between BlockDim and BlockPerSM\"></a>Tradeoff Between BlockDim and BlockPerSM</h2><p>当一个块（block）中的所有线程束（warp）全部完成时，这个块才可以被SM调度。如果块的大小过大，则块的运行速度受单个线程束约束的开销就越大（如果算法并行度很高，增大块的大小不失为一个好选择）；如果块的大小过小，则一方面SM可能无法达到其最大利用率（受<code>maxBlocksPerSM</code>的限制），另一方面SM调度块的额外开销也会增大。尤其是针对不同特点的计算任务有不同的更优选择，如<code>divergency</code>较高的任务更适合较小的BlockDim。所以在选择BlockDim时不仅要在算法的适应性上做考虑，还要通过多次性能测试来进行针对性的优化。</p>\n<h2 id=\"Beware-of-Ladder-Effects\"><a href=\"#Beware-of-Ladder-Effects\" class=\"headerlink\" title=\"Beware of Ladder Effects\"></a>Beware of Ladder Effects</h2><p>注意计算资源分配时要注意分配的资源量要能够被组别整除，否则会出现断层状的资源浪费现象。</p>\n<p><em>每块线程数与SM中最大线程束数的关系</em></p>\n<img src=\"c.jpg\">\n"},{"title":"Distributed Tensorflow","date":"2018-12-23T11:57:25.000Z","author":"陈岩","_content":"# Distributed Tensorflow\n\n## 1.单机\n\n### log_device_placement\n\n单机情况比较简单，不需要特殊配置，TensorFlow会自动将计算任务分配到可用的GPU上，在定义session时，可以通过*log_device_placement*参数来打印具体的计算任务分配：\n\n```python\nimport tensorflow as tf\n\na = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\nb = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\nc = a + b\n\nwith tf.Session(config = tf.ConfigProto(log_device_placement = True)) as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(c))\n```\n\n<img src=\"1.png\" />\n\n### 指定设备\n\n如果需要让一些运算在特定的设备上执行，可以使用tf.device:\n\n```python\nimport tensorflow as tf\n\nwith tf.device('/cpu:0'):\n\ta = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\n\tb = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\nwith tf.device('/gpu:0'):\n\tc = a + b\n\nwith tf.Session(config = tf.ConfigProto(log_device_placement = True)) as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(c))\n```\n\n<img src=\"2.png\" />\n\n### 环境变量\n\n尽管上面一个例子中我们只给CPU和GPU0指定了计算任务，但是两块显卡的显存都被占满了：\n\n<img src=\"3.png\" />\n\n因为TensorFlow会默认占满所有可见GPU的显存，对于简单的计算任务，这样显然非常浪费，我们可以通过修改环境变量*CUDA_VISIBLE_DEVICES*解决这个问题:\n\n```shell\n# 运行时指定环境变量\nCUDA_VISIBLE_DEVICES=0 python demo.py\n```\n\n```python\n# Python 代码中修改环境变量\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='0'\n...\n```\n\n\n\n## 2.多机\n\n### In-graph & Between-graph\n\nTensorFlow的分布式训练有两种模式：In-graph和Between-graph\n\nIn-graph: 不同的机器执行计算图的不同部分，和单机多GPU模式类似，一个节点负责模型数据分发，其他节点等待接受任务，通过*tf.device(\"/job:worker/task:n\")*来指定计算运行的节点\n\n<img src=\"5.png\" />\n\nBetween-graph:每台机器执行相同的计算图\n\n > Author: 陈岩\n > PostDate: 2018.12.21\n","source":"_posts/tensorflow.md","raw":"---\ntitle: Distributed Tensorflow\ndate: 2018-12-23 19:57:25\nauthor: 陈岩\ntags: \n    - Tech\n    - Tensorflow\n---\n# Distributed Tensorflow\n\n## 1.单机\n\n### log_device_placement\n\n单机情况比较简单，不需要特殊配置，TensorFlow会自动将计算任务分配到可用的GPU上，在定义session时，可以通过*log_device_placement*参数来打印具体的计算任务分配：\n\n```python\nimport tensorflow as tf\n\na = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\nb = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\nc = a + b\n\nwith tf.Session(config = tf.ConfigProto(log_device_placement = True)) as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(c))\n```\n\n<img src=\"1.png\" />\n\n### 指定设备\n\n如果需要让一些运算在特定的设备上执行，可以使用tf.device:\n\n```python\nimport tensorflow as tf\n\nwith tf.device('/cpu:0'):\n\ta = tf.constant([1.0, 2.0, 3.0], shape=[3], name='a')\n\tb = tf.constant([1.0, 2.0, 3.0], shape=[3], name='b')\nwith tf.device('/gpu:0'):\n\tc = a + b\n\nwith tf.Session(config = tf.ConfigProto(log_device_placement = True)) as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(c))\n```\n\n<img src=\"2.png\" />\n\n### 环境变量\n\n尽管上面一个例子中我们只给CPU和GPU0指定了计算任务，但是两块显卡的显存都被占满了：\n\n<img src=\"3.png\" />\n\n因为TensorFlow会默认占满所有可见GPU的显存，对于简单的计算任务，这样显然非常浪费，我们可以通过修改环境变量*CUDA_VISIBLE_DEVICES*解决这个问题:\n\n```shell\n# 运行时指定环境变量\nCUDA_VISIBLE_DEVICES=0 python demo.py\n```\n\n```python\n# Python 代码中修改环境变量\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='0'\n...\n```\n\n\n\n## 2.多机\n\n### In-graph & Between-graph\n\nTensorFlow的分布式训练有两种模式：In-graph和Between-graph\n\nIn-graph: 不同的机器执行计算图的不同部分，和单机多GPU模式类似，一个节点负责模型数据分发，其他节点等待接受任务，通过*tf.device(\"/job:worker/task:n\")*来指定计算运行的节点\n\n<img src=\"5.png\" />\n\nBetween-graph:每台机器执行相同的计算图\n\n > Author: 陈岩\n > PostDate: 2018.12.21\n","slug":"tensorflow","published":1,"updated":"2019-05-12T02:30:58.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrmzm0005jwuuqq2lgb81","content":"<h1 id=\"Distributed-Tensorflow\"><a href=\"#Distributed-Tensorflow\" class=\"headerlink\" title=\"Distributed Tensorflow\"></a>Distributed Tensorflow</h1><h2 id=\"1-单机\"><a href=\"#1-单机\" class=\"headerlink\" title=\"1.单机\"></a>1.单机</h2><h3 id=\"log-device-placement\"><a href=\"#log-device-placement\" class=\"headerlink\" title=\"log_device_placement\"></a>log_device_placement</h3><p>单机情况比较简单，不需要特殊配置，TensorFlow会自动将计算任务分配到可用的GPU上，在定义session时，可以通过<em>log_device_placement</em>参数来打印具体的计算任务分配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">b = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\">c = a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(config = tf.ConfigProto(log_device_placement = <span class=\"literal\">True</span>)) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(c))</span><br></pre></td></tr></table></figure>\n\n<img src=\"1.png\">\n\n<h3 id=\"指定设备\"><a href=\"#指定设备\" class=\"headerlink\" title=\"指定设备\"></a>指定设备</h3><p>如果需要让一些运算在特定的设备上执行，可以使用tf.device:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/cpu:0'</span>):</span><br><span class=\"line\">\ta = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">\tb = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/gpu:0'</span>):</span><br><span class=\"line\">\tc = a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(config = tf.ConfigProto(log_device_placement = <span class=\"literal\">True</span>)) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(c))</span><br></pre></td></tr></table></figure>\n\n<img src=\"2.png\">\n\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>尽管上面一个例子中我们只给CPU和GPU0指定了计算任务，但是两块显卡的显存都被占满了：</p>\n<img src=\"3.png\">\n\n<p>因为TensorFlow会默认占满所有可见GPU的显存，对于简单的计算任务，这样显然非常浪费，我们可以通过修改环境变量<em>CUDA_VISIBLE_DEVICES</em>解决这个问题:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行时指定环境变量</span></span><br><span class=\"line\">CUDA_VISIBLE_DEVICES=0 python demo.py</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 代码中修改环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">'CUDA_VISIBLE_DEVICES'</span>]=<span class=\"string\">'0'</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-多机\"><a href=\"#2-多机\" class=\"headerlink\" title=\"2.多机\"></a>2.多机</h2><h3 id=\"In-graph-amp-Between-graph\"><a href=\"#In-graph-amp-Between-graph\" class=\"headerlink\" title=\"In-graph &amp; Between-graph\"></a>In-graph &amp; Between-graph</h3><p>TensorFlow的分布式训练有两种模式：In-graph和Between-graph</p>\n<p>In-graph: 不同的机器执行计算图的不同部分，和单机多GPU模式类似，一个节点负责模型数据分发，其他节点等待接受任务，通过<em>tf.device(“/job:worker/task:n”)</em>来指定计算运行的节点</p>\n<img src=\"5.png\">\n\n<p>Between-graph:每台机器执行相同的计算图</p>\n<blockquote>\n<p>Author: 陈岩<br>PostDate: 2018.12.21</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Distributed-Tensorflow\"><a href=\"#Distributed-Tensorflow\" class=\"headerlink\" title=\"Distributed Tensorflow\"></a>Distributed Tensorflow</h1><h2 id=\"1-单机\"><a href=\"#1-单机\" class=\"headerlink\" title=\"1.单机\"></a>1.单机</h2><h3 id=\"log-device-placement\"><a href=\"#log-device-placement\" class=\"headerlink\" title=\"log_device_placement\"></a>log_device_placement</h3><p>单机情况比较简单，不需要特殊配置，TensorFlow会自动将计算任务分配到可用的GPU上，在定义session时，可以通过<em>log_device_placement</em>参数来打印具体的计算任务分配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">a = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">b = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\">c = a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(config = tf.ConfigProto(log_device_placement = <span class=\"literal\">True</span>)) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(c))</span><br></pre></td></tr></table></figure>\n\n<img src=\"1.png\">\n\n<h3 id=\"指定设备\"><a href=\"#指定设备\" class=\"headerlink\" title=\"指定设备\"></a>指定设备</h3><p>如果需要让一些运算在特定的设备上执行，可以使用tf.device:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/cpu:0'</span>):</span><br><span class=\"line\">\ta = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'a'</span>)</span><br><span class=\"line\">\tb = tf.constant([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>], shape=[<span class=\"number\">3</span>], name=<span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.device(<span class=\"string\">'/gpu:0'</span>):</span><br><span class=\"line\">\tc = a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session(config = tf.ConfigProto(log_device_placement = <span class=\"literal\">True</span>)) <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\">    print(sess.run(c))</span><br></pre></td></tr></table></figure>\n\n<img src=\"2.png\">\n\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>尽管上面一个例子中我们只给CPU和GPU0指定了计算任务，但是两块显卡的显存都被占满了：</p>\n<img src=\"3.png\">\n\n<p>因为TensorFlow会默认占满所有可见GPU的显存，对于简单的计算任务，这样显然非常浪费，我们可以通过修改环境变量<em>CUDA_VISIBLE_DEVICES</em>解决这个问题:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行时指定环境变量</span></span><br><span class=\"line\">CUDA_VISIBLE_DEVICES=0 python demo.py</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python 代码中修改环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">'CUDA_VISIBLE_DEVICES'</span>]=<span class=\"string\">'0'</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-多机\"><a href=\"#2-多机\" class=\"headerlink\" title=\"2.多机\"></a>2.多机</h2><h3 id=\"In-graph-amp-Between-graph\"><a href=\"#In-graph-amp-Between-graph\" class=\"headerlink\" title=\"In-graph &amp; Between-graph\"></a>In-graph &amp; Between-graph</h3><p>TensorFlow的分布式训练有两种模式：In-graph和Between-graph</p>\n<p>In-graph: 不同的机器执行计算图的不同部分，和单机多GPU模式类似，一个节点负责模型数据分发，其他节点等待接受任务，通过<em>tf.device(“/job:worker/task:n”)</em>来指定计算运行的节点</p>\n<img src=\"5.png\">\n\n<p>Between-graph:每台机器执行相同的计算图</p>\n<blockquote>\n<p>Author: 陈岩<br>PostDate: 2018.12.21</p>\n</blockquote>\n"},{"title":"浙江大学超算队博客...活了？","date":"2018-09-30T13:25:55.000Z","author":"TTfish","banner":"banner.jpg","thumbnail":"thumbnail.jpeg","_content":"\n\n\n---\n\n## 写在前面\n\n\n这里是浙江大学超算队的官方博客 \n\n记录一些前沿的Tech姿势、大家平时的DeBug经历、还有ASC世界超算大赛的经验分享！\n\n希望这个博客不仅仅是给以后的小盆友们提供宝贵的经验 更是诸君技术的记录与提升的大好机会\n\n平时我们写着代码 总是不愿意写文档 遇到了非常Tricky又神奇的Bug 花了一下午终于解决了 却没有记录下来\n\n很有可能很多的无谓的时间就会在以后被重复 这样的时间浪费 我们完全可以节省下来！\n\n希望大家能享受在超算队一起学习的时光~ 从现在开始 把这段美好的时间变成字符 记录下来叭~~\n\n<img src=\"ttfish.jpeg\" />\n\n> Author: TTfish\n> PostDate: 2018.9.30\n\n\n\n\n\n","source":"_posts/first.md","raw":"---\ntitle: 浙江大学超算队博客...活了？ \ndate: 2018-09-30 21:25:55\nauthor: TTfish\nbanner: banner.jpg\nthumbnail: thumbnail.jpeg\ntags: \n    - Tech\n    - Spc\n    - ZJU\n---\n\n\n\n---\n\n## 写在前面\n\n\n这里是浙江大学超算队的官方博客 \n\n记录一些前沿的Tech姿势、大家平时的DeBug经历、还有ASC世界超算大赛的经验分享！\n\n希望这个博客不仅仅是给以后的小盆友们提供宝贵的经验 更是诸君技术的记录与提升的大好机会\n\n平时我们写着代码 总是不愿意写文档 遇到了非常Tricky又神奇的Bug 花了一下午终于解决了 却没有记录下来\n\n很有可能很多的无谓的时间就会在以后被重复 这样的时间浪费 我们完全可以节省下来！\n\n希望大家能享受在超算队一起学习的时光~ 从现在开始 把这段美好的时间变成字符 记录下来叭~~\n\n<img src=\"ttfish.jpeg\" />\n\n> Author: TTfish\n> PostDate: 2018.9.30\n\n\n\n\n\n","slug":"first","published":1,"updated":"2019-05-12T02:30:58.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrmzq0007jwuuc1xu6kis","content":"<hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>这里是浙江大学超算队的官方博客 </p>\n<p>记录一些前沿的Tech姿势、大家平时的DeBug经历、还有ASC世界超算大赛的经验分享！</p>\n<p>希望这个博客不仅仅是给以后的小盆友们提供宝贵的经验 更是诸君技术的记录与提升的大好机会</p>\n<p>平时我们写着代码 总是不愿意写文档 遇到了非常Tricky又神奇的Bug 花了一下午终于解决了 却没有记录下来</p>\n<p>很有可能很多的无谓的时间就会在以后被重复 这样的时间浪费 我们完全可以节省下来！</p>\n<p>希望大家能享受在超算队一起学习的时光~ 从现在开始 把这段美好的时间变成字符 记录下来叭~~</p>\n<img src=\"ttfish.jpeg\">\n\n<blockquote>\n<p>Author: TTfish<br>PostDate: 2018.9.30</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>这里是浙江大学超算队的官方博客 </p>\n<p>记录一些前沿的Tech姿势、大家平时的DeBug经历、还有ASC世界超算大赛的经验分享！</p>\n<p>希望这个博客不仅仅是给以后的小盆友们提供宝贵的经验 更是诸君技术的记录与提升的大好机会</p>\n<p>平时我们写着代码 总是不愿意写文档 遇到了非常Tricky又神奇的Bug 花了一下午终于解决了 却没有记录下来</p>\n<p>很有可能很多的无谓的时间就会在以后被重复 这样的时间浪费 我们完全可以节省下来！</p>\n<p>希望大家能享受在超算队一起学习的时光~ 从现在开始 把这段美好的时间变成字符 记录下来叭~~</p>\n<img src=\"ttfish.jpeg\">\n\n<blockquote>\n<p>Author: TTfish<br>PostDate: 2018.9.30</p>\n</blockquote>\n"},{"title":"Virtual Memory and TLB","date":"2019-03-31T06:05:11.000Z","author":"王克","_content":"\n# Virtual Memory and TLB\n\n## 虚拟地址空间\n\nx86 CPU 的地址总选宽度为32位，理论寻址上限为4GB。而虚拟地址空间的大小就是4GB，占满总线，且空间中的每一个字节分配一个虚拟地址\n\n* 其中高2G`0x80000000 ~ 0xFFFFFFFF`为内和空间，由操作系统调用；\n* 低2G`0x00000000 ~ 0x7FFFFFFF`为用户空间，由用户使用。\n\n在系统中运行的每一个进程都独自拥有一个虚拟空间，进城之间的虚拟空间不共用。\n\n虚拟地址空间是一种通过机制映射出来的空间，与实际物理空间大小无必然联系，在x86保护模式下，无论计算及实际主存是512MB还是8GB，虚拟地址空间总是4GB，**这是由CPU和操作系统的宽度决定的**，即：\n\n> CPU地址总线宽度 → 物理地址范围\n> CPU的ALU宽度 → 操作系统位数 → 虚拟地址范围\n\n### 虚拟内存\n\n虚拟地址空间 = 主存 + 虚拟内存(交换空间 Swap Space)\n\n虚拟内存：将硬盘的一部分作为存储器使用，来扩充物理内存。\n\n利用了自动覆盖、交换技术。内存中存不下、暂时不用的内容会存在硬盘中。\n\n> Assume: 32位操作系统，32位寻址总线宽度 → 4G线性空间\n\n## 保护模式下的进程运行\n\n虚拟地址空间是硬件行为，CPU自动完成(同时与操作系统协作)虚拟地址到物理地址(可能差熬过实际内存，这样会产生一个异常中断，揭晓来有操作系统处理(如从虚拟内存中调出对应的页框内容))。\n\n所以，一个程序若运行在保护模式下，其汇编级、机器语言级的寻址都是用的虚拟地址，即在一般的编程中不会接触到物理一层。\n\n在进程被加载时，系统为进程建立唯一的数据结构`进程控制块(PCB = Process Control Block)`，直至进程结束。\n\nPCB中描述了该进程的现状以及控制运行的全部信息，有了PCB，一个进程才可以在保护模式下和其他进程一起被并发地运行起来，操作系统通过PCB对进程进行控制。\n\nPCB中的程序ID(PID(unix、linux)、句柄(windows))是进程的唯一标识；PCB中的一个指针指向 **页表** ，这些都与地址转化有关。\n\n## 地址转化\n\n地址转化的全过程可以用以下这张图来概括：\n\n![OG](OG.png)\n\n以下是具体步骤介绍。\n\n### 1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)\n\n* 段内偏移地址(32位)\n\n* 段选择符：16位长的序列，是索引值，定位段描述符；结构：\n  ![#2](%232.png)\n  * 高13位为表内索引号 —— 但注意由于GDT第一项留空，所以索引要先加1；\n  * 而2位为TI表指示器，0是指GDT，1是指LDT；\n  * 0、1位是RPL请求者特权级，00最高，11最低 —— 在x86保护模式下修改寄存器是系统之灵，必须有对应的权限才能修改(当前执行权限和段寄存器中(被修改的)的RPL均不低于目标段的RPL)\n\n* 段描述符：8x8=64位长的结构，用来描述一个段的各种属性。结构：\n   ![#1](%231.png)\n  * 0、1字节+6字节低4位(20位) 段边界/段长度：最大1MB或者4G(看粒度位的单位)\n  * 2、3、4、7字节(32位) 段基址：4G线性地址的任意位置(不一定非要被16整除)\n  * 6、7字节的奇怪设计是为了兼容80286(24位地址总线)\n  * 剩下的那些是段属性，详见`20180819143434`\n\n* 段描述表：多任务操作系统中，含有多个任务，而每个人物都有多个段，其段描述符存于段描述表中。\n  IA-32处理器有3个段描述表：GDT、LDT和IDT。\n  * GDT(Global Descripter Table) 全局段描述符表：一个系统一般只有一个GDT，含有每一个任务都可以访问的段；通常包含操作系统所使用的代码段、数据段和堆栈段，GDT同时包含各进程LDT数据段项，以及进程间通讯所需要的段。\n    GDTR是CPU提供的寄存器，存储GDT的位置和边界；在32位模式下RGDT有48位长(高32位基地址+低16位边界)，在32e模式下有80位长(高64位基地址+低16位边界)。\n    GDT的第一个表项留空不用，是空描述符，所以索引号要加1。\n    GDT最多128项。\n  * LDT(Local Descripter Table) 局部段描述符表：16位长，属于某个进程。一个进程一个LDT，对应有RLDT寄存器，进程切换时RLDT改变。\n    RLDT和RGDT不一样，RLDT是一个索引值而不是实际指向，指向GDT中某一个LDT描述项。所以如果要获取LDT中的某一项，先要访问GDT找到对应LDT，再找到LDT中的一项。\n    编译程序时，程序内赋予了虚拟页号。在程序运行时，通过对应LDT转译成物理地址。故虚拟页号是局部性的、不同进程的页号会有冲突。\n    LDT没有空选择子。\n  * IDT(Interrupt Descripter Table) 中断段描述符表；一个系统一般也只有一个。\n  * 以下这个图能做一点解释：\n    ![#7](%237.png)\n\n### 2. 线性地址 → 物理地址 (页式内存管理)\n\n这一步由CPU的页式管理单元来负责转换。——MMU(内存管理单元)。\n\n* 线性地址可以拆分为三部分(或者两部分)：\n  ![#3](%233.png)\n\n* 页(Page)：线性地址被划分为大小一致的若干内存区域，其对应映射到大小相同的与物理空间区域页框(Frame)上。这个映射不一定是连贯而有序的。\n\n* CR3：页目录基址寄存器。对于每一个进程，CR3的内容不同(有点像RLDT)，页目录基址也不同，线性地址-物理地址的映射也不同。\n\n* 页目录：占用一个4kb的内存页，最多存储1024个页目录表项(PDE)，一个PDE有4字节。在没启用PAE时，有两种PDE，规格不同。\n\n* 页目录表项(PDE)：每个程序有多个页表，即拥有多个PDE。PDE的结构如下：\n  ![#4](%234.png)\n  12~31位(20位)表示页表起始物理地址的高20位(页表基址低12位为0，即一定以4kb对齐)。\n\n* 页表：一个页表占4kb的内存页，最多存储1024个页表项(PTE)，一个PTE是4字节。页表的基址是4kb对齐的，低12位是0。\n\n采用对页表项的二级管理模式(也目录→页表→页)能够节约空间。因为不存在的页表就可以不分配空间，并且对于Windows来说只有一级页表才会存在主存中，二级可以存在辅存中——不过Linux中它们都常驻主存。\n\n一些CPU会提供更多级的架构，如三级、四级。Linux中，有对应的高层次抽象，提供了一个四层页管理架构：\n![#6](%236.png)\n把中间的某几个定为长度为0，就可以调整架构级数。如“四化二”：某地址0x08147258，对应的PUD、PMD里只有一个表项为PUD→PMD，PMD→PT；划分的时候，PGD=0000100000，PUD=PMD=0，PT=0101000111.\n\n### 3. TLB (转换检测缓冲区、快表、转译后被缓冲区)\n\n处理器中，一个具有并行朝赵能力的特殊高速缓存器，存储最近访问过的一些页表项(时空局部性原理，减少页映射的内存访问次数)。\n\nTLB较贵，通常能够存放16~512个页表项。\n\n* TLB命中：直接取出对应的页表项\n* TLB缺失：先淘汰TLB中的某一项(TLB替换策略，一些算法，可以由硬件或软件来实现)\n  * 硬件处理TLB Miss：CPU会遍历页表，找到正确的PTE；如果没有找到，CPU就会发起一个页错误并将控制权交给操作系统。\n  * 软件处理TLB Miss：CPU直接发出未命中错误，让操作系统来处理。\n\n* 脏记录：当TLB中某个PTE项失效(如切换进程、进程退出、虚拟页换出到磁盘)，PTE标记为不存在，此时映射已经不成立了。\n  操作系统要保证即时刷新掉这些脏记录，不同的CPU有不同的刷新TLB方法，但每次都完全刷新TLB会很慢，所以现在有一些策略，扩展对一个PTE的描述(如针对某个进程、空间的标识，如果目前进程与PTE相关，就会忽略掉)，这样可以让多个进程同时共存TLB\n\n## Linux 段式管理\n\nLinux似乎没有理会Intel的那一套段的机制，而是做了一个高级的抽象。\nLinux对所有的进程使用了相同的段来对指令和数据寻址，让每个段寄存器都指向同一个段描述符，让这个段描述符的基址为0，长度为4G。即用这种方式略去了段式内存管理。\n对应多有用户代码段、用户数据段、内核代码段和内核数据段。可以在`segment.h`中看到，四种段对应的段基址都是0，这就是“平坦内存模型”，这样就有`段内偏移地址=逻辑地址`\n\n且，四种段对应的都为GDT。即Linux大多数情况都不使用LDT，除非使用wine等Windows防真程序。\n\nLinux 0.11中每个进程划分64MB的虚拟内存空间。故逻辑地址范围为0~0x4000000\n","source":"_posts/Virtual-Memory-and-TLB.md","raw":"---\ntitle: Virtual Memory and TLB\ndate: 2019-03-31 14:05:11\ntags:\n  - Tech\n  - Operating Susyem\n  - Virtual Memory\n  - TLB\nauthor: 王克\n---\n\n# Virtual Memory and TLB\n\n## 虚拟地址空间\n\nx86 CPU 的地址总选宽度为32位，理论寻址上限为4GB。而虚拟地址空间的大小就是4GB，占满总线，且空间中的每一个字节分配一个虚拟地址\n\n* 其中高2G`0x80000000 ~ 0xFFFFFFFF`为内和空间，由操作系统调用；\n* 低2G`0x00000000 ~ 0x7FFFFFFF`为用户空间，由用户使用。\n\n在系统中运行的每一个进程都独自拥有一个虚拟空间，进城之间的虚拟空间不共用。\n\n虚拟地址空间是一种通过机制映射出来的空间，与实际物理空间大小无必然联系，在x86保护模式下，无论计算及实际主存是512MB还是8GB，虚拟地址空间总是4GB，**这是由CPU和操作系统的宽度决定的**，即：\n\n> CPU地址总线宽度 → 物理地址范围\n> CPU的ALU宽度 → 操作系统位数 → 虚拟地址范围\n\n### 虚拟内存\n\n虚拟地址空间 = 主存 + 虚拟内存(交换空间 Swap Space)\n\n虚拟内存：将硬盘的一部分作为存储器使用，来扩充物理内存。\n\n利用了自动覆盖、交换技术。内存中存不下、暂时不用的内容会存在硬盘中。\n\n> Assume: 32位操作系统，32位寻址总线宽度 → 4G线性空间\n\n## 保护模式下的进程运行\n\n虚拟地址空间是硬件行为，CPU自动完成(同时与操作系统协作)虚拟地址到物理地址(可能差熬过实际内存，这样会产生一个异常中断，揭晓来有操作系统处理(如从虚拟内存中调出对应的页框内容))。\n\n所以，一个程序若运行在保护模式下，其汇编级、机器语言级的寻址都是用的虚拟地址，即在一般的编程中不会接触到物理一层。\n\n在进程被加载时，系统为进程建立唯一的数据结构`进程控制块(PCB = Process Control Block)`，直至进程结束。\n\nPCB中描述了该进程的现状以及控制运行的全部信息，有了PCB，一个进程才可以在保护模式下和其他进程一起被并发地运行起来，操作系统通过PCB对进程进行控制。\n\nPCB中的程序ID(PID(unix、linux)、句柄(windows))是进程的唯一标识；PCB中的一个指针指向 **页表** ，这些都与地址转化有关。\n\n## 地址转化\n\n地址转化的全过程可以用以下这张图来概括：\n\n![OG](OG.png)\n\n以下是具体步骤介绍。\n\n### 1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)\n\n* 段内偏移地址(32位)\n\n* 段选择符：16位长的序列，是索引值，定位段描述符；结构：\n  ![#2](%232.png)\n  * 高13位为表内索引号 —— 但注意由于GDT第一项留空，所以索引要先加1；\n  * 而2位为TI表指示器，0是指GDT，1是指LDT；\n  * 0、1位是RPL请求者特权级，00最高，11最低 —— 在x86保护模式下修改寄存器是系统之灵，必须有对应的权限才能修改(当前执行权限和段寄存器中(被修改的)的RPL均不低于目标段的RPL)\n\n* 段描述符：8x8=64位长的结构，用来描述一个段的各种属性。结构：\n   ![#1](%231.png)\n  * 0、1字节+6字节低4位(20位) 段边界/段长度：最大1MB或者4G(看粒度位的单位)\n  * 2、3、4、7字节(32位) 段基址：4G线性地址的任意位置(不一定非要被16整除)\n  * 6、7字节的奇怪设计是为了兼容80286(24位地址总线)\n  * 剩下的那些是段属性，详见`20180819143434`\n\n* 段描述表：多任务操作系统中，含有多个任务，而每个人物都有多个段，其段描述符存于段描述表中。\n  IA-32处理器有3个段描述表：GDT、LDT和IDT。\n  * GDT(Global Descripter Table) 全局段描述符表：一个系统一般只有一个GDT，含有每一个任务都可以访问的段；通常包含操作系统所使用的代码段、数据段和堆栈段，GDT同时包含各进程LDT数据段项，以及进程间通讯所需要的段。\n    GDTR是CPU提供的寄存器，存储GDT的位置和边界；在32位模式下RGDT有48位长(高32位基地址+低16位边界)，在32e模式下有80位长(高64位基地址+低16位边界)。\n    GDT的第一个表项留空不用，是空描述符，所以索引号要加1。\n    GDT最多128项。\n  * LDT(Local Descripter Table) 局部段描述符表：16位长，属于某个进程。一个进程一个LDT，对应有RLDT寄存器，进程切换时RLDT改变。\n    RLDT和RGDT不一样，RLDT是一个索引值而不是实际指向，指向GDT中某一个LDT描述项。所以如果要获取LDT中的某一项，先要访问GDT找到对应LDT，再找到LDT中的一项。\n    编译程序时，程序内赋予了虚拟页号。在程序运行时，通过对应LDT转译成物理地址。故虚拟页号是局部性的、不同进程的页号会有冲突。\n    LDT没有空选择子。\n  * IDT(Interrupt Descripter Table) 中断段描述符表；一个系统一般也只有一个。\n  * 以下这个图能做一点解释：\n    ![#7](%237.png)\n\n### 2. 线性地址 → 物理地址 (页式内存管理)\n\n这一步由CPU的页式管理单元来负责转换。——MMU(内存管理单元)。\n\n* 线性地址可以拆分为三部分(或者两部分)：\n  ![#3](%233.png)\n\n* 页(Page)：线性地址被划分为大小一致的若干内存区域，其对应映射到大小相同的与物理空间区域页框(Frame)上。这个映射不一定是连贯而有序的。\n\n* CR3：页目录基址寄存器。对于每一个进程，CR3的内容不同(有点像RLDT)，页目录基址也不同，线性地址-物理地址的映射也不同。\n\n* 页目录：占用一个4kb的内存页，最多存储1024个页目录表项(PDE)，一个PDE有4字节。在没启用PAE时，有两种PDE，规格不同。\n\n* 页目录表项(PDE)：每个程序有多个页表，即拥有多个PDE。PDE的结构如下：\n  ![#4](%234.png)\n  12~31位(20位)表示页表起始物理地址的高20位(页表基址低12位为0，即一定以4kb对齐)。\n\n* 页表：一个页表占4kb的内存页，最多存储1024个页表项(PTE)，一个PTE是4字节。页表的基址是4kb对齐的，低12位是0。\n\n采用对页表项的二级管理模式(也目录→页表→页)能够节约空间。因为不存在的页表就可以不分配空间，并且对于Windows来说只有一级页表才会存在主存中，二级可以存在辅存中——不过Linux中它们都常驻主存。\n\n一些CPU会提供更多级的架构，如三级、四级。Linux中，有对应的高层次抽象，提供了一个四层页管理架构：\n![#6](%236.png)\n把中间的某几个定为长度为0，就可以调整架构级数。如“四化二”：某地址0x08147258，对应的PUD、PMD里只有一个表项为PUD→PMD，PMD→PT；划分的时候，PGD=0000100000，PUD=PMD=0，PT=0101000111.\n\n### 3. TLB (转换检测缓冲区、快表、转译后被缓冲区)\n\n处理器中，一个具有并行朝赵能力的特殊高速缓存器，存储最近访问过的一些页表项(时空局部性原理，减少页映射的内存访问次数)。\n\nTLB较贵，通常能够存放16~512个页表项。\n\n* TLB命中：直接取出对应的页表项\n* TLB缺失：先淘汰TLB中的某一项(TLB替换策略，一些算法，可以由硬件或软件来实现)\n  * 硬件处理TLB Miss：CPU会遍历页表，找到正确的PTE；如果没有找到，CPU就会发起一个页错误并将控制权交给操作系统。\n  * 软件处理TLB Miss：CPU直接发出未命中错误，让操作系统来处理。\n\n* 脏记录：当TLB中某个PTE项失效(如切换进程、进程退出、虚拟页换出到磁盘)，PTE标记为不存在，此时映射已经不成立了。\n  操作系统要保证即时刷新掉这些脏记录，不同的CPU有不同的刷新TLB方法，但每次都完全刷新TLB会很慢，所以现在有一些策略，扩展对一个PTE的描述(如针对某个进程、空间的标识，如果目前进程与PTE相关，就会忽略掉)，这样可以让多个进程同时共存TLB\n\n## Linux 段式管理\n\nLinux似乎没有理会Intel的那一套段的机制，而是做了一个高级的抽象。\nLinux对所有的进程使用了相同的段来对指令和数据寻址，让每个段寄存器都指向同一个段描述符，让这个段描述符的基址为0，长度为4G。即用这种方式略去了段式内存管理。\n对应多有用户代码段、用户数据段、内核代码段和内核数据段。可以在`segment.h`中看到，四种段对应的段基址都是0，这就是“平坦内存模型”，这样就有`段内偏移地址=逻辑地址`\n\n且，四种段对应的都为GDT。即Linux大多数情况都不使用LDT，除非使用wine等Windows防真程序。\n\nLinux 0.11中每个进程划分64MB的虚拟内存空间。故逻辑地址范围为0~0x4000000\n","slug":"Virtual-Memory-and-TLB","published":1,"updated":"2019-05-12T02:30:58.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrn0q000sjwuuv7e0aodx","content":"<h1 id=\"Virtual-Memory-and-TLB\"><a href=\"#Virtual-Memory-and-TLB\" class=\"headerlink\" title=\"Virtual Memory and TLB\"></a>Virtual Memory and TLB</h1><h2 id=\"虚拟地址空间\"><a href=\"#虚拟地址空间\" class=\"headerlink\" title=\"虚拟地址空间\"></a>虚拟地址空间</h2><p>x86 CPU 的地址总选宽度为32位，理论寻址上限为4GB。而虚拟地址空间的大小就是4GB，占满总线，且空间中的每一个字节分配一个虚拟地址</p>\n<ul>\n<li>其中高2G<code>0x80000000 ~ 0xFFFFFFFF</code>为内和空间，由操作系统调用；</li>\n<li>低2G<code>0x00000000 ~ 0x7FFFFFFF</code>为用户空间，由用户使用。</li>\n</ul>\n<p>在系统中运行的每一个进程都独自拥有一个虚拟空间，进城之间的虚拟空间不共用。</p>\n<p>虚拟地址空间是一种通过机制映射出来的空间，与实际物理空间大小无必然联系，在x86保护模式下，无论计算及实际主存是512MB还是8GB，虚拟地址空间总是4GB，<strong>这是由CPU和操作系统的宽度决定的</strong>，即：</p>\n<blockquote>\n<p>CPU地址总线宽度 → 物理地址范围<br>CPU的ALU宽度 → 操作系统位数 → 虚拟地址范围</p>\n</blockquote>\n<h3 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h3><p>虚拟地址空间 = 主存 + 虚拟内存(交换空间 Swap Space)</p>\n<p>虚拟内存：将硬盘的一部分作为存储器使用，来扩充物理内存。</p>\n<p>利用了自动覆盖、交换技术。内存中存不下、暂时不用的内容会存在硬盘中。</p>\n<blockquote>\n<p>Assume: 32位操作系统，32位寻址总线宽度 → 4G线性空间</p>\n</blockquote>\n<h2 id=\"保护模式下的进程运行\"><a href=\"#保护模式下的进程运行\" class=\"headerlink\" title=\"保护模式下的进程运行\"></a>保护模式下的进程运行</h2><p>虚拟地址空间是硬件行为，CPU自动完成(同时与操作系统协作)虚拟地址到物理地址(可能差熬过实际内存，这样会产生一个异常中断，揭晓来有操作系统处理(如从虚拟内存中调出对应的页框内容))。</p>\n<p>所以，一个程序若运行在保护模式下，其汇编级、机器语言级的寻址都是用的虚拟地址，即在一般的编程中不会接触到物理一层。</p>\n<p>在进程被加载时，系统为进程建立唯一的数据结构<code>进程控制块(PCB = Process Control Block)</code>，直至进程结束。</p>\n<p>PCB中描述了该进程的现状以及控制运行的全部信息，有了PCB，一个进程才可以在保护模式下和其他进程一起被并发地运行起来，操作系统通过PCB对进程进行控制。</p>\n<p>PCB中的程序ID(PID(unix、linux)、句柄(windows))是进程的唯一标识；PCB中的一个指针指向 <strong>页表</strong> ，这些都与地址转化有关。</p>\n<h2 id=\"地址转化\"><a href=\"#地址转化\" class=\"headerlink\" title=\"地址转化\"></a>地址转化</h2><p>地址转化的全过程可以用以下这张图来概括：</p>\n<p><img src=\"OG.png\" alt=\"OG\"></p>\n<p>以下是具体步骤介绍。</p>\n<h3 id=\"1-逻辑地址-→-线性地址-段式内存管理，Intel早期策略的保留\"><a href=\"#1-逻辑地址-→-线性地址-段式内存管理，Intel早期策略的保留\" class=\"headerlink\" title=\"1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)\"></a>1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)</h3><ul>\n<li><p>段内偏移地址(32位)</p>\n</li>\n<li><p>段选择符：16位长的序列，是索引值，定位段描述符；结构：<br><img src=\"%232.png\" alt=\"#2\"></p>\n<ul>\n<li>高13位为表内索引号 —— 但注意由于GDT第一项留空，所以索引要先加1；</li>\n<li>而2位为TI表指示器，0是指GDT，1是指LDT；</li>\n<li>0、1位是RPL请求者特权级，00最高，11最低 —— 在x86保护模式下修改寄存器是系统之灵，必须有对应的权限才能修改(当前执行权限和段寄存器中(被修改的)的RPL均不低于目标段的RPL)</li>\n</ul>\n</li>\n<li><p>段描述符：8x8=64位长的结构，用来描述一个段的各种属性。结构：<br> <img src=\"%231.png\" alt=\"#1\"></p>\n<ul>\n<li>0、1字节+6字节低4位(20位) 段边界/段长度：最大1MB或者4G(看粒度位的单位)</li>\n<li>2、3、4、7字节(32位) 段基址：4G线性地址的任意位置(不一定非要被16整除)</li>\n<li>6、7字节的奇怪设计是为了兼容80286(24位地址总线)</li>\n<li>剩下的那些是段属性，详见<code>20180819143434</code></li>\n</ul>\n</li>\n<li><p>段描述表：多任务操作系统中，含有多个任务，而每个人物都有多个段，其段描述符存于段描述表中。<br>IA-32处理器有3个段描述表：GDT、LDT和IDT。</p>\n<ul>\n<li>GDT(Global Descripter Table) 全局段描述符表：一个系统一般只有一个GDT，含有每一个任务都可以访问的段；通常包含操作系统所使用的代码段、数据段和堆栈段，GDT同时包含各进程LDT数据段项，以及进程间通讯所需要的段。<br>GDTR是CPU提供的寄存器，存储GDT的位置和边界；在32位模式下RGDT有48位长(高32位基地址+低16位边界)，在32e模式下有80位长(高64位基地址+低16位边界)。<br>GDT的第一个表项留空不用，是空描述符，所以索引号要加1。<br>GDT最多128项。</li>\n<li>LDT(Local Descripter Table) 局部段描述符表：16位长，属于某个进程。一个进程一个LDT，对应有RLDT寄存器，进程切换时RLDT改变。<br>RLDT和RGDT不一样，RLDT是一个索引值而不是实际指向，指向GDT中某一个LDT描述项。所以如果要获取LDT中的某一项，先要访问GDT找到对应LDT，再找到LDT中的一项。<br>编译程序时，程序内赋予了虚拟页号。在程序运行时，通过对应LDT转译成物理地址。故虚拟页号是局部性的、不同进程的页号会有冲突。<br>LDT没有空选择子。</li>\n<li>IDT(Interrupt Descripter Table) 中断段描述符表；一个系统一般也只有一个。</li>\n<li>以下这个图能做一点解释：<br><img src=\"%237.png\" alt=\"#7\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-线性地址-→-物理地址-页式内存管理\"><a href=\"#2-线性地址-→-物理地址-页式内存管理\" class=\"headerlink\" title=\"2. 线性地址 → 物理地址 (页式内存管理)\"></a>2. 线性地址 → 物理地址 (页式内存管理)</h3><p>这一步由CPU的页式管理单元来负责转换。——MMU(内存管理单元)。</p>\n<ul>\n<li><p>线性地址可以拆分为三部分(或者两部分)：<br><img src=\"%233.png\" alt=\"#3\"></p>\n</li>\n<li><p>页(Page)：线性地址被划分为大小一致的若干内存区域，其对应映射到大小相同的与物理空间区域页框(Frame)上。这个映射不一定是连贯而有序的。</p>\n</li>\n<li><p>CR3：页目录基址寄存器。对于每一个进程，CR3的内容不同(有点像RLDT)，页目录基址也不同，线性地址-物理地址的映射也不同。</p>\n</li>\n<li><p>页目录：占用一个4kb的内存页，最多存储1024个页目录表项(PDE)，一个PDE有4字节。在没启用PAE时，有两种PDE，规格不同。</p>\n</li>\n<li><p>页目录表项(PDE)：每个程序有多个页表，即拥有多个PDE。PDE的结构如下：<br><img src=\"%234.png\" alt=\"#4\"><br>12~31位(20位)表示页表起始物理地址的高20位(页表基址低12位为0，即一定以4kb对齐)。</p>\n</li>\n<li><p>页表：一个页表占4kb的内存页，最多存储1024个页表项(PTE)，一个PTE是4字节。页表的基址是4kb对齐的，低12位是0。</p>\n</li>\n</ul>\n<p>采用对页表项的二级管理模式(也目录→页表→页)能够节约空间。因为不存在的页表就可以不分配空间，并且对于Windows来说只有一级页表才会存在主存中，二级可以存在辅存中——不过Linux中它们都常驻主存。</p>\n<p>一些CPU会提供更多级的架构，如三级、四级。Linux中，有对应的高层次抽象，提供了一个四层页管理架构：<br><img src=\"%236.png\" alt=\"#6\"><br>把中间的某几个定为长度为0，就可以调整架构级数。如“四化二”：某地址0x08147258，对应的PUD、PMD里只有一个表项为PUD→PMD，PMD→PT；划分的时候，PGD=0000100000，PUD=PMD=0，PT=0101000111.</p>\n<h3 id=\"3-TLB-转换检测缓冲区、快表、转译后被缓冲区\"><a href=\"#3-TLB-转换检测缓冲区、快表、转译后被缓冲区\" class=\"headerlink\" title=\"3. TLB (转换检测缓冲区、快表、转译后被缓冲区)\"></a>3. TLB (转换检测缓冲区、快表、转译后被缓冲区)</h3><p>处理器中，一个具有并行朝赵能力的特殊高速缓存器，存储最近访问过的一些页表项(时空局部性原理，减少页映射的内存访问次数)。</p>\n<p>TLB较贵，通常能够存放16~512个页表项。</p>\n<ul>\n<li><p>TLB命中：直接取出对应的页表项</p>\n</li>\n<li><p>TLB缺失：先淘汰TLB中的某一项(TLB替换策略，一些算法，可以由硬件或软件来实现)</p>\n<ul>\n<li>硬件处理TLB Miss：CPU会遍历页表，找到正确的PTE；如果没有找到，CPU就会发起一个页错误并将控制权交给操作系统。</li>\n<li>软件处理TLB Miss：CPU直接发出未命中错误，让操作系统来处理。</li>\n</ul>\n</li>\n<li><p>脏记录：当TLB中某个PTE项失效(如切换进程、进程退出、虚拟页换出到磁盘)，PTE标记为不存在，此时映射已经不成立了。<br>操作系统要保证即时刷新掉这些脏记录，不同的CPU有不同的刷新TLB方法，但每次都完全刷新TLB会很慢，所以现在有一些策略，扩展对一个PTE的描述(如针对某个进程、空间的标识，如果目前进程与PTE相关，就会忽略掉)，这样可以让多个进程同时共存TLB</p>\n</li>\n</ul>\n<h2 id=\"Linux-段式管理\"><a href=\"#Linux-段式管理\" class=\"headerlink\" title=\"Linux 段式管理\"></a>Linux 段式管理</h2><p>Linux似乎没有理会Intel的那一套段的机制，而是做了一个高级的抽象。<br>Linux对所有的进程使用了相同的段来对指令和数据寻址，让每个段寄存器都指向同一个段描述符，让这个段描述符的基址为0，长度为4G。即用这种方式略去了段式内存管理。<br>对应多有用户代码段、用户数据段、内核代码段和内核数据段。可以在<code>segment.h</code>中看到，四种段对应的段基址都是0，这就是“平坦内存模型”，这样就有<code>段内偏移地址=逻辑地址</code></p>\n<p>且，四种段对应的都为GDT。即Linux大多数情况都不使用LDT，除非使用wine等Windows防真程序。</p>\n<p>Linux 0.11中每个进程划分64MB的虚拟内存空间。故逻辑地址范围为0~0x4000000</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Virtual-Memory-and-TLB\"><a href=\"#Virtual-Memory-and-TLB\" class=\"headerlink\" title=\"Virtual Memory and TLB\"></a>Virtual Memory and TLB</h1><h2 id=\"虚拟地址空间\"><a href=\"#虚拟地址空间\" class=\"headerlink\" title=\"虚拟地址空间\"></a>虚拟地址空间</h2><p>x86 CPU 的地址总选宽度为32位，理论寻址上限为4GB。而虚拟地址空间的大小就是4GB，占满总线，且空间中的每一个字节分配一个虚拟地址</p>\n<ul>\n<li>其中高2G<code>0x80000000 ~ 0xFFFFFFFF</code>为内和空间，由操作系统调用；</li>\n<li>低2G<code>0x00000000 ~ 0x7FFFFFFF</code>为用户空间，由用户使用。</li>\n</ul>\n<p>在系统中运行的每一个进程都独自拥有一个虚拟空间，进城之间的虚拟空间不共用。</p>\n<p>虚拟地址空间是一种通过机制映射出来的空间，与实际物理空间大小无必然联系，在x86保护模式下，无论计算及实际主存是512MB还是8GB，虚拟地址空间总是4GB，<strong>这是由CPU和操作系统的宽度决定的</strong>，即：</p>\n<blockquote>\n<p>CPU地址总线宽度 → 物理地址范围<br>CPU的ALU宽度 → 操作系统位数 → 虚拟地址范围</p>\n</blockquote>\n<h3 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h3><p>虚拟地址空间 = 主存 + 虚拟内存(交换空间 Swap Space)</p>\n<p>虚拟内存：将硬盘的一部分作为存储器使用，来扩充物理内存。</p>\n<p>利用了自动覆盖、交换技术。内存中存不下、暂时不用的内容会存在硬盘中。</p>\n<blockquote>\n<p>Assume: 32位操作系统，32位寻址总线宽度 → 4G线性空间</p>\n</blockquote>\n<h2 id=\"保护模式下的进程运行\"><a href=\"#保护模式下的进程运行\" class=\"headerlink\" title=\"保护模式下的进程运行\"></a>保护模式下的进程运行</h2><p>虚拟地址空间是硬件行为，CPU自动完成(同时与操作系统协作)虚拟地址到物理地址(可能差熬过实际内存，这样会产生一个异常中断，揭晓来有操作系统处理(如从虚拟内存中调出对应的页框内容))。</p>\n<p>所以，一个程序若运行在保护模式下，其汇编级、机器语言级的寻址都是用的虚拟地址，即在一般的编程中不会接触到物理一层。</p>\n<p>在进程被加载时，系统为进程建立唯一的数据结构<code>进程控制块(PCB = Process Control Block)</code>，直至进程结束。</p>\n<p>PCB中描述了该进程的现状以及控制运行的全部信息，有了PCB，一个进程才可以在保护模式下和其他进程一起被并发地运行起来，操作系统通过PCB对进程进行控制。</p>\n<p>PCB中的程序ID(PID(unix、linux)、句柄(windows))是进程的唯一标识；PCB中的一个指针指向 <strong>页表</strong> ，这些都与地址转化有关。</p>\n<h2 id=\"地址转化\"><a href=\"#地址转化\" class=\"headerlink\" title=\"地址转化\"></a>地址转化</h2><p>地址转化的全过程可以用以下这张图来概括：</p>\n<p><img src=\"OG.png\" alt=\"OG\"></p>\n<p>以下是具体步骤介绍。</p>\n<h3 id=\"1-逻辑地址-→-线性地址-段式内存管理，Intel早期策略的保留\"><a href=\"#1-逻辑地址-→-线性地址-段式内存管理，Intel早期策略的保留\" class=\"headerlink\" title=\"1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)\"></a>1. 逻辑地址 → 线性地址 (段式内存管理，Intel早期策略的保留)</h3><ul>\n<li><p>段内偏移地址(32位)</p>\n</li>\n<li><p>段选择符：16位长的序列，是索引值，定位段描述符；结构：<br><img src=\"%232.png\" alt=\"#2\"></p>\n<ul>\n<li>高13位为表内索引号 —— 但注意由于GDT第一项留空，所以索引要先加1；</li>\n<li>而2位为TI表指示器，0是指GDT，1是指LDT；</li>\n<li>0、1位是RPL请求者特权级，00最高，11最低 —— 在x86保护模式下修改寄存器是系统之灵，必须有对应的权限才能修改(当前执行权限和段寄存器中(被修改的)的RPL均不低于目标段的RPL)</li>\n</ul>\n</li>\n<li><p>段描述符：8x8=64位长的结构，用来描述一个段的各种属性。结构：<br> <img src=\"%231.png\" alt=\"#1\"></p>\n<ul>\n<li>0、1字节+6字节低4位(20位) 段边界/段长度：最大1MB或者4G(看粒度位的单位)</li>\n<li>2、3、4、7字节(32位) 段基址：4G线性地址的任意位置(不一定非要被16整除)</li>\n<li>6、7字节的奇怪设计是为了兼容80286(24位地址总线)</li>\n<li>剩下的那些是段属性，详见<code>20180819143434</code></li>\n</ul>\n</li>\n<li><p>段描述表：多任务操作系统中，含有多个任务，而每个人物都有多个段，其段描述符存于段描述表中。<br>IA-32处理器有3个段描述表：GDT、LDT和IDT。</p>\n<ul>\n<li>GDT(Global Descripter Table) 全局段描述符表：一个系统一般只有一个GDT，含有每一个任务都可以访问的段；通常包含操作系统所使用的代码段、数据段和堆栈段，GDT同时包含各进程LDT数据段项，以及进程间通讯所需要的段。<br>GDTR是CPU提供的寄存器，存储GDT的位置和边界；在32位模式下RGDT有48位长(高32位基地址+低16位边界)，在32e模式下有80位长(高64位基地址+低16位边界)。<br>GDT的第一个表项留空不用，是空描述符，所以索引号要加1。<br>GDT最多128项。</li>\n<li>LDT(Local Descripter Table) 局部段描述符表：16位长，属于某个进程。一个进程一个LDT，对应有RLDT寄存器，进程切换时RLDT改变。<br>RLDT和RGDT不一样，RLDT是一个索引值而不是实际指向，指向GDT中某一个LDT描述项。所以如果要获取LDT中的某一项，先要访问GDT找到对应LDT，再找到LDT中的一项。<br>编译程序时，程序内赋予了虚拟页号。在程序运行时，通过对应LDT转译成物理地址。故虚拟页号是局部性的、不同进程的页号会有冲突。<br>LDT没有空选择子。</li>\n<li>IDT(Interrupt Descripter Table) 中断段描述符表；一个系统一般也只有一个。</li>\n<li>以下这个图能做一点解释：<br><img src=\"%237.png\" alt=\"#7\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-线性地址-→-物理地址-页式内存管理\"><a href=\"#2-线性地址-→-物理地址-页式内存管理\" class=\"headerlink\" title=\"2. 线性地址 → 物理地址 (页式内存管理)\"></a>2. 线性地址 → 物理地址 (页式内存管理)</h3><p>这一步由CPU的页式管理单元来负责转换。——MMU(内存管理单元)。</p>\n<ul>\n<li><p>线性地址可以拆分为三部分(或者两部分)：<br><img src=\"%233.png\" alt=\"#3\"></p>\n</li>\n<li><p>页(Page)：线性地址被划分为大小一致的若干内存区域，其对应映射到大小相同的与物理空间区域页框(Frame)上。这个映射不一定是连贯而有序的。</p>\n</li>\n<li><p>CR3：页目录基址寄存器。对于每一个进程，CR3的内容不同(有点像RLDT)，页目录基址也不同，线性地址-物理地址的映射也不同。</p>\n</li>\n<li><p>页目录：占用一个4kb的内存页，最多存储1024个页目录表项(PDE)，一个PDE有4字节。在没启用PAE时，有两种PDE，规格不同。</p>\n</li>\n<li><p>页目录表项(PDE)：每个程序有多个页表，即拥有多个PDE。PDE的结构如下：<br><img src=\"%234.png\" alt=\"#4\"><br>12~31位(20位)表示页表起始物理地址的高20位(页表基址低12位为0，即一定以4kb对齐)。</p>\n</li>\n<li><p>页表：一个页表占4kb的内存页，最多存储1024个页表项(PTE)，一个PTE是4字节。页表的基址是4kb对齐的，低12位是0。</p>\n</li>\n</ul>\n<p>采用对页表项的二级管理模式(也目录→页表→页)能够节约空间。因为不存在的页表就可以不分配空间，并且对于Windows来说只有一级页表才会存在主存中，二级可以存在辅存中——不过Linux中它们都常驻主存。</p>\n<p>一些CPU会提供更多级的架构，如三级、四级。Linux中，有对应的高层次抽象，提供了一个四层页管理架构：<br><img src=\"%236.png\" alt=\"#6\"><br>把中间的某几个定为长度为0，就可以调整架构级数。如“四化二”：某地址0x08147258，对应的PUD、PMD里只有一个表项为PUD→PMD，PMD→PT；划分的时候，PGD=0000100000，PUD=PMD=0，PT=0101000111.</p>\n<h3 id=\"3-TLB-转换检测缓冲区、快表、转译后被缓冲区\"><a href=\"#3-TLB-转换检测缓冲区、快表、转译后被缓冲区\" class=\"headerlink\" title=\"3. TLB (转换检测缓冲区、快表、转译后被缓冲区)\"></a>3. TLB (转换检测缓冲区、快表、转译后被缓冲区)</h3><p>处理器中，一个具有并行朝赵能力的特殊高速缓存器，存储最近访问过的一些页表项(时空局部性原理，减少页映射的内存访问次数)。</p>\n<p>TLB较贵，通常能够存放16~512个页表项。</p>\n<ul>\n<li><p>TLB命中：直接取出对应的页表项</p>\n</li>\n<li><p>TLB缺失：先淘汰TLB中的某一项(TLB替换策略，一些算法，可以由硬件或软件来实现)</p>\n<ul>\n<li>硬件处理TLB Miss：CPU会遍历页表，找到正确的PTE；如果没有找到，CPU就会发起一个页错误并将控制权交给操作系统。</li>\n<li>软件处理TLB Miss：CPU直接发出未命中错误，让操作系统来处理。</li>\n</ul>\n</li>\n<li><p>脏记录：当TLB中某个PTE项失效(如切换进程、进程退出、虚拟页换出到磁盘)，PTE标记为不存在，此时映射已经不成立了。<br>操作系统要保证即时刷新掉这些脏记录，不同的CPU有不同的刷新TLB方法，但每次都完全刷新TLB会很慢，所以现在有一些策略，扩展对一个PTE的描述(如针对某个进程、空间的标识，如果目前进程与PTE相关，就会忽略掉)，这样可以让多个进程同时共存TLB</p>\n</li>\n</ul>\n<h2 id=\"Linux-段式管理\"><a href=\"#Linux-段式管理\" class=\"headerlink\" title=\"Linux 段式管理\"></a>Linux 段式管理</h2><p>Linux似乎没有理会Intel的那一套段的机制，而是做了一个高级的抽象。<br>Linux对所有的进程使用了相同的段来对指令和数据寻址，让每个段寄存器都指向同一个段描述符，让这个段描述符的基址为0，长度为4G。即用这种方式略去了段式内存管理。<br>对应多有用户代码段、用户数据段、内核代码段和内核数据段。可以在<code>segment.h</code>中看到，四种段对应的段基址都是0，这就是“平坦内存模型”，这样就有<code>段内偏移地址=逻辑地址</code></p>\n<p>且，四种段对应的都为GDT。即Linux大多数情况都不使用LDT，除非使用wine等Windows防真程序。</p>\n<p>Linux 0.11中每个进程划分64MB的虚拟内存空间。故逻辑地址范围为0~0x4000000</p>\n"},{"title":"BP算法","author":"陈岩","date":"2018-12-24T13:03:59.000Z","mathjax":true,"_content":"\n# Feed forward neural network and back propagation\n\n## 1. Neuron structure\n\n![Neuron structure](neuron.png)\n\n上图是一种典型的神经元结构，$x_n$是神经元的输入，将输入加权求和后再通过激活函数即可得到此神经元的输出：\n$$t = \\sum_{i=1}^{n}{w_ix_i} + b$$\n$$a = f(t)$$\n\n为计算方便，可将偏置$b$提到求和符号里面，相当于加入一个恒为1的输入值，对应的权重为$b$：\n$$t = \\sum_{i=0}^{n}{w_ix_i},(x_0 = 1, w_0 = b)$$\n$$a = f(t)$$\n此即为上图神经元结构对应的表达式\n\n常用的激活函数有sigmoid, ReLU, tanh等。\n\n## 2. Network structure\n\n![Network Structure](bp_net.jpg)\n\n这是一个简单的3层网络，输入层有3个输入值，隐藏层包含3个隐藏神经元，最后是两个输出值\n隐藏层神经元的前向计算过程：\n\n$$z_i^{l} = \\sum_{i=0}^{n}w_{ij}^{l}x_j, (x_0 = 1, w_0 = b)$$\n\n$$a_i^l = f(z_i^l)$$\n\n$l$表示第几层。\n\n这个网络的抽象数学表达式为：\n$$F(x) = f_3(f_2(x * W_2 + b_2) * W_3 + b_3)$$\n\n事实上，深度神经网络一般都能够抽象为一个复合的非线性多元函数，有多少隐藏层就有多少层复合函数：\n$$F(x) = f_n\\left(\\dots f_3(f_2(f_1(x) * w_1 + b_1) * w_2 + b_2)\\dots\\right)$$\n\n## 3. Loss\n\nLoss，即损失，用来衡量神经网络的输出值与实际值的误差，对于不同的问题，通常会定义不同的loss函数\n\n回归问题常用的均方误差：\n$$MSE = \\frac{1}{n}\\sum_{i=1}^{n}(Y - f(x))^2$$\n$Y$为实际值，$f(x)$为网络预测值\n\n分类问题常用的交叉熵(m类)：\n$$L = \\sum_{k=1}^{n}\\sum_{i=1}^{m}l_{ki}log(p_{ki})$$\n$l_{ki}$表示第k个样本实际是否属于第i类（0，1编码），$p_{ki}$表示第k个样本属于第i类的概率值\n\n特别地，二分类问题的交叉熵损失函数形式为：\n$$L = \\sum_{i=1}^{n}[y_ilog(p_i) + (1 - y_i)log(1 - p_i)]$$\n$y_i$为第i个样本所属类别，$p_i$为第i个样本属于$y_i$类的概率\n\n## 4. Back propagation\n\nBP 是用来将loss反向传播的算法，用来调整网络中神经元间连接的权重和偏置，整个训练的过程就是：前向计算网络输出\n->;根据当前网络输出计算loss->BP算法反向传播loss调整网络参数，不断循环这样的三步直到loss达到最小或达到指定停止条件\n\nBP算法的本质是求导的链式法则，对于上面的三层网络，假设其损失函数为$C$，激活函数为$\\sigma$，第$l$第$i$个神经元的输入为$z_i^{(l)}$，输出为$a_i^{(l)}$\n\n则通过梯度下降来更新权值和偏置的公式如下：\n$$W_{ij}^{(l)} = W_{ij}^{(l)} - \\eta\\frac{\\partial}{\\partial W_{ij}^{(l)}}C\\tag1$$\n$$b_{i}^{(l)} = b_{i}^{(l)} - \\eta\\frac{\\partial}{\\partial b_{i}^{(l)}}C\\tag2$$\n\n$W_{ij}^{(l)}$表示第$l$层第$i$个神经元与第$l - 1$层第$j$个神经元连接的权值，$b_i^{(l)}$表示第$l$层第$i$个神经元的偏置\n\n$\\eta$表示学习率\n\n由更新公式可见主要问题在于求解损失函数关于权值和偏置的偏导数\n\n第$l$层第$i$个神经元的输入$z_i^{(l)}$为：\n$$z_i^{(l)} = \\sum_{j=1}^{n^{(l-1)}}{W_{ij}^{(l)}a_j^{(l-1)}} + b_i^{l}\\tag3$$\n\n则更新公式中偏导项可化为:\n\n$$\\frac{\\partial}{\\partial W_{ij}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial W_{ij}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet a_i^{(l-1)}\\tag4$$\n\n$$\\frac{\\partial}{\\partial b_{i}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial b_{i}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}}\\tag5$$\n\n定义\n\n$$\\delta_i^{(l)} = \\frac{\\partial}{\\partial z_i^{(l)}}C\\tag6$$\n\n现在问题转化为求解$\\delta_i^{(l)}$，对第$l$层第$j$个神经元有：\n$$\n\\delta_j^{(l)} = \\frac{\\partial C}{\\partial z_j^{(l)}} = \\sum_{i=1}^{n^{(l+1)}}\\frac{\\partial C}{\\partial z_i^{(l+1)}} \\bullet \\frac{\\partial z_i^{(l+1)}}{\\partial a_j^{(l)}} \\bullet \\frac{\\partial a_j^{(l)}}{\\partial z_j^{(l)}} \\\\\n=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet \\frac{\\partial(W_{ij}^{l+1} + b_i^{(l+1)})}{\\partial a_j^{(l)}} \\bullet \\sigma^\\prime(z_j^{(l)})\\\\\n=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet W_{ij}^{(l+1)} \\bullet \\sigma^\\prime(z_j^{(l)})\\tag7\n$$\n\n则：\n$$\\delta^{(l)} = ((W^{(l+1)})^T\\delta^{(l+1)})\\odot\\sigma^\\prime(z^{(l)})\\tag8$$\n\n损失函数关于权重和偏置的偏导分别为：\n$$\\frac{\\partial C}{\\partial W_{ij}^{(l)}} = a_i^{(l-1)}\\delta_i^{(l)}\\tag9$$\n$$\\frac{\\partial C}{\\partial b_{i}^{(l)}} =\\delta_i^{(l)}\\tag{10}$$\n\n误差根据8式由输出层向后传播，再结合1，2，9，10四式对权重和偏置进行更新\n\n## 5.实现\n\n下面是一个简单3隐层神经网络的实现\n\nIn [ ]:\n\n```python\nimport numpy as np\n\ndef loss(pred, y):\n    return np.sum((pred - y) ** 2)\n\ndef loss_prime(pred, y):\n    return pred - y\n\nclass network:\n\n    def __init__(self, input_size, hidden_size, num_layers, output_size, loss = loss, loss_prime = loss_prime):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.num_layers = num_layers\n        self.output_size = output_size\n\n        # activation function\n        self.activation = self.sigmoid\n        # derivative of activation function\n        self.activation_prime = self.sigmoid_prime\n        # loss funciton\n        self.loss = loss\n        # derivative of loss function\n        self.loss_prime = loss_prime\n\n        # input->hidden\n        self.w_ih = np.random.randn(input_size, hidden_size)\n        self.b_ih = np.random.randn(1, hidden_size)\n\n        # hidden layers\n        self.W_hh = [np.random.randn(hidden_size, hidden_size) for _ in range(num_layers - 1)]\n        self.B_hh = [np.random.randn(1, hidden_size) for _ in range(num_layers - 1)]\n\n        # hidden->output\n        self.w_ho = np.random.randn(hidden_size, output_size)\n        self.b_ho = np.random.randn(1, output_size)\n\n        # assemble w and b\n        self.W = [self.w_ih]\n        self.W.extend(self.W_hh)\n        self.W.append(self.w_ho)\n\n        self.B = [self.b_ih]\n        self.B.extend(self.B_hh)\n        self.B.append(self.b_ho)\n\n    # activation\n    def sigmoid(self, x):\n        return 1.0 / (1 + np.exp(-x))\n\n    def sigmoid_prime(self, x):\n        return self.sigmoid(x) * (1 - self.sigmoid(x))\n\n    # forward pass, calculate the output of the network\n    def forward(self, a):\n        for w, b in zip(self.W, self.B):\n            a = self.activation(np.dot(a, w) + b)\n        return a\n\n    # backpropagate error\n    def backward(self, x, y):\n        delta_w = [np.zeros(w.shape) for w in self.W]\n        delta_b = [np.zeros(b.shape) for b in self.B]\n\n        # get output of each layer in forward pass\n        out = x\n        outs = []\n        zs = []\n        for w, b in zip(self.W, self.B):\n            z = np.dot(out, w) + b\n            zs.append(z)\n            out = self.activation(z)\n            outs.append(out)\n\n        # δ of last layer\n        delta = self.loss_prime(outs[-1], y) * self.activation_prime(zs[-1])\n\n        delta_b[-1] = delta\n        delta_w[-1] = np.dot(outs[-2].transpose(), delta)\n\n        for i in range(2, len(delta_w)):\n            delta = np.dot(delta, self.W[-i+1].transpose()) * self.activation_prime(zs[-i])\n            delta_b[-i] = delta\n            delta_w[-i] = np.dot(outs[-i-1].transpose(), delta)\n\n        return delta_w, delta_b\n\n    # update w and b\n    def update(self, batch, lr):\n        delta_w = [np.zeros(w.shape) for w in self.W]\n        delta_b = [np.zeros(b.shape) for b in self.B]\n\n        for x, y in batch:\n            d_w, d_b = self.backward(x, y)\n            delta_w = [a + b for a, b in zip(delta_w, d_w)]\n            delta_b = [a + b for a, b in zip(delta_b, d_b)]\n\n        self.W = [w - lr * t for w, t in zip(self.W, delta_w)]\n        self.B = [b - lr * t for b, t in zip(self.B, delta_b)]\n\n    # SGD training\n    def train(self, train_data, epochs, batch_size, lr):\n        for i in range(epochs):\n            np.random.shuffle(train_data)\n            batches = [train_data[t : t + batch_size] for t in range(0, len(train_data), batch_size)]\n\n            for batch in batches:\n                self.update(batch, lr)\n\n            loss = 0\n            for x, y in train_data:\n                loss += self.loss(self.forward(x), y)\n            loss /= len(train_data)\n\n            print(\"Epoch %d done, loss: %f\" % (i + 1, loss))\n\n    # predict\n    def predict(self, x):\n        return self.forward(x)\n\n\n# use it for handwriting digits classification\nimport tensorflow as tf\nmnist = tf.keras.datasets.mnist\n\ndef onehot(y):\n    arr = np.zeros([y.shape[0], 10])\n    for i in range(y.shape[0]):\n        arr[i][y[i]] = 1\n    return arr\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\nx_train = x_train.reshape([-1, 28 * 28])\nx_test = x_test.reshape([-1, 28 * 28])\ny_train = onehot(y_train)\ny_test = onehot(y_test)\n\ntrain_data = [t for t in zip(x_train, y_train)]\ntest_data = [t for t in zip(x_test, y_test)]\n\ninput_size = 28 * 28\nhidden_size = 100\nnum_layers = 3\noutput_size = 10\n\nnet = network(input_size, hidden_size, num_layers, output_size)\n\nlr = 0.005\nepochs = 100\nbatch_size = 100\n\nnet.train(train_data, epochs, batch_size, lr)\n\ndef softmax(x):\n    exp = np.exp(x)\n    return exp / np.sum(exp)\n\ncorrect = 0\nfor x, y in test_data:\n    ret = net.forward(x)\n    pred = softmax(ret)\n    if np.argmax(pred) == np.argmax(y):\n        correct += 1\n\nacc = float(correct) / len(test_data)\nprint('test accuracy: ', acc)\n```\n","source":"_posts/bp.md","raw":"---\ntitle: BP算法\nauthor: 陈岩\ndate: 2018-12-24 21:03:59\ntags: \n    - Machine Learning\n    - Tech\nmathjax: true\n---\n\n# Feed forward neural network and back propagation\n\n## 1. Neuron structure\n\n![Neuron structure](neuron.png)\n\n上图是一种典型的神经元结构，$x_n$是神经元的输入，将输入加权求和后再通过激活函数即可得到此神经元的输出：\n$$t = \\sum_{i=1}^{n}{w_ix_i} + b$$\n$$a = f(t)$$\n\n为计算方便，可将偏置$b$提到求和符号里面，相当于加入一个恒为1的输入值，对应的权重为$b$：\n$$t = \\sum_{i=0}^{n}{w_ix_i},(x_0 = 1, w_0 = b)$$\n$$a = f(t)$$\n此即为上图神经元结构对应的表达式\n\n常用的激活函数有sigmoid, ReLU, tanh等。\n\n## 2. Network structure\n\n![Network Structure](bp_net.jpg)\n\n这是一个简单的3层网络，输入层有3个输入值，隐藏层包含3个隐藏神经元，最后是两个输出值\n隐藏层神经元的前向计算过程：\n\n$$z_i^{l} = \\sum_{i=0}^{n}w_{ij}^{l}x_j, (x_0 = 1, w_0 = b)$$\n\n$$a_i^l = f(z_i^l)$$\n\n$l$表示第几层。\n\n这个网络的抽象数学表达式为：\n$$F(x) = f_3(f_2(x * W_2 + b_2) * W_3 + b_3)$$\n\n事实上，深度神经网络一般都能够抽象为一个复合的非线性多元函数，有多少隐藏层就有多少层复合函数：\n$$F(x) = f_n\\left(\\dots f_3(f_2(f_1(x) * w_1 + b_1) * w_2 + b_2)\\dots\\right)$$\n\n## 3. Loss\n\nLoss，即损失，用来衡量神经网络的输出值与实际值的误差，对于不同的问题，通常会定义不同的loss函数\n\n回归问题常用的均方误差：\n$$MSE = \\frac{1}{n}\\sum_{i=1}^{n}(Y - f(x))^2$$\n$Y$为实际值，$f(x)$为网络预测值\n\n分类问题常用的交叉熵(m类)：\n$$L = \\sum_{k=1}^{n}\\sum_{i=1}^{m}l_{ki}log(p_{ki})$$\n$l_{ki}$表示第k个样本实际是否属于第i类（0，1编码），$p_{ki}$表示第k个样本属于第i类的概率值\n\n特别地，二分类问题的交叉熵损失函数形式为：\n$$L = \\sum_{i=1}^{n}[y_ilog(p_i) + (1 - y_i)log(1 - p_i)]$$\n$y_i$为第i个样本所属类别，$p_i$为第i个样本属于$y_i$类的概率\n\n## 4. Back propagation\n\nBP 是用来将loss反向传播的算法，用来调整网络中神经元间连接的权重和偏置，整个训练的过程就是：前向计算网络输出\n->;根据当前网络输出计算loss->BP算法反向传播loss调整网络参数，不断循环这样的三步直到loss达到最小或达到指定停止条件\n\nBP算法的本质是求导的链式法则，对于上面的三层网络，假设其损失函数为$C$，激活函数为$\\sigma$，第$l$第$i$个神经元的输入为$z_i^{(l)}$，输出为$a_i^{(l)}$\n\n则通过梯度下降来更新权值和偏置的公式如下：\n$$W_{ij}^{(l)} = W_{ij}^{(l)} - \\eta\\frac{\\partial}{\\partial W_{ij}^{(l)}}C\\tag1$$\n$$b_{i}^{(l)} = b_{i}^{(l)} - \\eta\\frac{\\partial}{\\partial b_{i}^{(l)}}C\\tag2$$\n\n$W_{ij}^{(l)}$表示第$l$层第$i$个神经元与第$l - 1$层第$j$个神经元连接的权值，$b_i^{(l)}$表示第$l$层第$i$个神经元的偏置\n\n$\\eta$表示学习率\n\n由更新公式可见主要问题在于求解损失函数关于权值和偏置的偏导数\n\n第$l$层第$i$个神经元的输入$z_i^{(l)}$为：\n$$z_i^{(l)} = \\sum_{j=1}^{n^{(l-1)}}{W_{ij}^{(l)}a_j^{(l-1)}} + b_i^{l}\\tag3$$\n\n则更新公式中偏导项可化为:\n\n$$\\frac{\\partial}{\\partial W_{ij}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial W_{ij}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet a_i^{(l-1)}\\tag4$$\n\n$$\\frac{\\partial}{\\partial b_{i}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial b_{i}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}}\\tag5$$\n\n定义\n\n$$\\delta_i^{(l)} = \\frac{\\partial}{\\partial z_i^{(l)}}C\\tag6$$\n\n现在问题转化为求解$\\delta_i^{(l)}$，对第$l$层第$j$个神经元有：\n$$\n\\delta_j^{(l)} = \\frac{\\partial C}{\\partial z_j^{(l)}} = \\sum_{i=1}^{n^{(l+1)}}\\frac{\\partial C}{\\partial z_i^{(l+1)}} \\bullet \\frac{\\partial z_i^{(l+1)}}{\\partial a_j^{(l)}} \\bullet \\frac{\\partial a_j^{(l)}}{\\partial z_j^{(l)}} \\\\\n=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet \\frac{\\partial(W_{ij}^{l+1} + b_i^{(l+1)})}{\\partial a_j^{(l)}} \\bullet \\sigma^\\prime(z_j^{(l)})\\\\\n=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet W_{ij}^{(l+1)} \\bullet \\sigma^\\prime(z_j^{(l)})\\tag7\n$$\n\n则：\n$$\\delta^{(l)} = ((W^{(l+1)})^T\\delta^{(l+1)})\\odot\\sigma^\\prime(z^{(l)})\\tag8$$\n\n损失函数关于权重和偏置的偏导分别为：\n$$\\frac{\\partial C}{\\partial W_{ij}^{(l)}} = a_i^{(l-1)}\\delta_i^{(l)}\\tag9$$\n$$\\frac{\\partial C}{\\partial b_{i}^{(l)}} =\\delta_i^{(l)}\\tag{10}$$\n\n误差根据8式由输出层向后传播，再结合1，2，9，10四式对权重和偏置进行更新\n\n## 5.实现\n\n下面是一个简单3隐层神经网络的实现\n\nIn [ ]:\n\n```python\nimport numpy as np\n\ndef loss(pred, y):\n    return np.sum((pred - y) ** 2)\n\ndef loss_prime(pred, y):\n    return pred - y\n\nclass network:\n\n    def __init__(self, input_size, hidden_size, num_layers, output_size, loss = loss, loss_prime = loss_prime):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.num_layers = num_layers\n        self.output_size = output_size\n\n        # activation function\n        self.activation = self.sigmoid\n        # derivative of activation function\n        self.activation_prime = self.sigmoid_prime\n        # loss funciton\n        self.loss = loss\n        # derivative of loss function\n        self.loss_prime = loss_prime\n\n        # input->hidden\n        self.w_ih = np.random.randn(input_size, hidden_size)\n        self.b_ih = np.random.randn(1, hidden_size)\n\n        # hidden layers\n        self.W_hh = [np.random.randn(hidden_size, hidden_size) for _ in range(num_layers - 1)]\n        self.B_hh = [np.random.randn(1, hidden_size) for _ in range(num_layers - 1)]\n\n        # hidden->output\n        self.w_ho = np.random.randn(hidden_size, output_size)\n        self.b_ho = np.random.randn(1, output_size)\n\n        # assemble w and b\n        self.W = [self.w_ih]\n        self.W.extend(self.W_hh)\n        self.W.append(self.w_ho)\n\n        self.B = [self.b_ih]\n        self.B.extend(self.B_hh)\n        self.B.append(self.b_ho)\n\n    # activation\n    def sigmoid(self, x):\n        return 1.0 / (1 + np.exp(-x))\n\n    def sigmoid_prime(self, x):\n        return self.sigmoid(x) * (1 - self.sigmoid(x))\n\n    # forward pass, calculate the output of the network\n    def forward(self, a):\n        for w, b in zip(self.W, self.B):\n            a = self.activation(np.dot(a, w) + b)\n        return a\n\n    # backpropagate error\n    def backward(self, x, y):\n        delta_w = [np.zeros(w.shape) for w in self.W]\n        delta_b = [np.zeros(b.shape) for b in self.B]\n\n        # get output of each layer in forward pass\n        out = x\n        outs = []\n        zs = []\n        for w, b in zip(self.W, self.B):\n            z = np.dot(out, w) + b\n            zs.append(z)\n            out = self.activation(z)\n            outs.append(out)\n\n        # δ of last layer\n        delta = self.loss_prime(outs[-1], y) * self.activation_prime(zs[-1])\n\n        delta_b[-1] = delta\n        delta_w[-1] = np.dot(outs[-2].transpose(), delta)\n\n        for i in range(2, len(delta_w)):\n            delta = np.dot(delta, self.W[-i+1].transpose()) * self.activation_prime(zs[-i])\n            delta_b[-i] = delta\n            delta_w[-i] = np.dot(outs[-i-1].transpose(), delta)\n\n        return delta_w, delta_b\n\n    # update w and b\n    def update(self, batch, lr):\n        delta_w = [np.zeros(w.shape) for w in self.W]\n        delta_b = [np.zeros(b.shape) for b in self.B]\n\n        for x, y in batch:\n            d_w, d_b = self.backward(x, y)\n            delta_w = [a + b for a, b in zip(delta_w, d_w)]\n            delta_b = [a + b for a, b in zip(delta_b, d_b)]\n\n        self.W = [w - lr * t for w, t in zip(self.W, delta_w)]\n        self.B = [b - lr * t for b, t in zip(self.B, delta_b)]\n\n    # SGD training\n    def train(self, train_data, epochs, batch_size, lr):\n        for i in range(epochs):\n            np.random.shuffle(train_data)\n            batches = [train_data[t : t + batch_size] for t in range(0, len(train_data), batch_size)]\n\n            for batch in batches:\n                self.update(batch, lr)\n\n            loss = 0\n            for x, y in train_data:\n                loss += self.loss(self.forward(x), y)\n            loss /= len(train_data)\n\n            print(\"Epoch %d done, loss: %f\" % (i + 1, loss))\n\n    # predict\n    def predict(self, x):\n        return self.forward(x)\n\n\n# use it for handwriting digits classification\nimport tensorflow as tf\nmnist = tf.keras.datasets.mnist\n\ndef onehot(y):\n    arr = np.zeros([y.shape[0], 10])\n    for i in range(y.shape[0]):\n        arr[i][y[i]] = 1\n    return arr\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\nx_train = x_train.reshape([-1, 28 * 28])\nx_test = x_test.reshape([-1, 28 * 28])\ny_train = onehot(y_train)\ny_test = onehot(y_test)\n\ntrain_data = [t for t in zip(x_train, y_train)]\ntest_data = [t for t in zip(x_test, y_test)]\n\ninput_size = 28 * 28\nhidden_size = 100\nnum_layers = 3\noutput_size = 10\n\nnet = network(input_size, hidden_size, num_layers, output_size)\n\nlr = 0.005\nepochs = 100\nbatch_size = 100\n\nnet.train(train_data, epochs, batch_size, lr)\n\ndef softmax(x):\n    exp = np.exp(x)\n    return exp / np.sum(exp)\n\ncorrect = 0\nfor x, y in test_data:\n    ret = net.forward(x)\n    pred = softmax(ret)\n    if np.argmax(pred) == np.argmax(y):\n        correct += 1\n\nacc = float(correct) / len(test_data)\nprint('test accuracy: ', acc)\n```\n","slug":"bp","published":1,"updated":"2019-05-12T02:30:58.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrn0r000ujwuuyxbvjcpg","content":"<h1 id=\"Feed-forward-neural-network-and-back-propagation\"><a href=\"#Feed-forward-neural-network-and-back-propagation\" class=\"headerlink\" title=\"Feed forward neural network and back propagation\"></a>Feed forward neural network and back propagation</h1><h2 id=\"1-Neuron-structure\"><a href=\"#1-Neuron-structure\" class=\"headerlink\" title=\"1. Neuron structure\"></a>1. Neuron structure</h2><p><img src=\"neuron.png\" alt=\"Neuron structure\"></p>\n<p>上图是一种典型的神经元结构，$x_n$是神经元的输入，将输入加权求和后再通过激活函数即可得到此神经元的输出：<br>$$t = \\sum_{i=1}^{n}{w_ix_i} + b$$<br>$$a = f(t)$$</p>\n<p>为计算方便，可将偏置$b$提到求和符号里面，相当于加入一个恒为1的输入值，对应的权重为$b$：<br>$$t = \\sum_{i=0}^{n}{w_ix_i},(x_0 = 1, w_0 = b)$$<br>$$a = f(t)$$<br>此即为上图神经元结构对应的表达式</p>\n<p>常用的激活函数有sigmoid, ReLU, tanh等。</p>\n<h2 id=\"2-Network-structure\"><a href=\"#2-Network-structure\" class=\"headerlink\" title=\"2. Network structure\"></a>2. Network structure</h2><p><img src=\"bp_net.jpg\" alt=\"Network Structure\"></p>\n<p>这是一个简单的3层网络，输入层有3个输入值，隐藏层包含3个隐藏神经元，最后是两个输出值<br>隐藏层神经元的前向计算过程：</p>\n<p>$$z_i^{l} = \\sum_{i=0}^{n}w_{ij}^{l}x_j, (x_0 = 1, w_0 = b)$$</p>\n<p>$$a_i^l = f(z_i^l)$$</p>\n<p>$l$表示第几层。</p>\n<p>这个网络的抽象数学表达式为：<br>$$F(x) = f_3(f_2(x * W_2 + b_2) * W_3 + b_3)$$</p>\n<p>事实上，深度神经网络一般都能够抽象为一个复合的非线性多元函数，有多少隐藏层就有多少层复合函数：<br>$$F(x) = f_n\\left(\\dots f_3(f_2(f_1(x) * w_1 + b_1) * w_2 + b_2)\\dots\\right)$$</p>\n<h2 id=\"3-Loss\"><a href=\"#3-Loss\" class=\"headerlink\" title=\"3. Loss\"></a>3. Loss</h2><p>Loss，即损失，用来衡量神经网络的输出值与实际值的误差，对于不同的问题，通常会定义不同的loss函数</p>\n<p>回归问题常用的均方误差：<br>$$MSE = \\frac{1}{n}\\sum_{i=1}^{n}(Y - f(x))^2$$<br>$Y$为实际值，$f(x)$为网络预测值</p>\n<p>分类问题常用的交叉熵(m类)：<br>$$L = \\sum_{k=1}^{n}\\sum_{i=1}^{m}l_{ki}log(p_{ki})$$<br>$l_{ki}$表示第k个样本实际是否属于第i类（0，1编码），$p_{ki}$表示第k个样本属于第i类的概率值</p>\n<p>特别地，二分类问题的交叉熵损失函数形式为：<br>$$L = \\sum_{i=1}^{n}[y_ilog(p_i) + (1 - y_i)log(1 - p_i)]$$<br>$y_i$为第i个样本所属类别，$p_i$为第i个样本属于$y_i$类的概率</p>\n<h2 id=\"4-Back-propagation\"><a href=\"#4-Back-propagation\" class=\"headerlink\" title=\"4. Back propagation\"></a>4. Back propagation</h2><p>BP 是用来将loss反向传播的算法，用来调整网络中神经元间连接的权重和偏置，整个训练的过程就是：前向计算网络输出<br>-&gt;;根据当前网络输出计算loss-&gt;BP算法反向传播loss调整网络参数，不断循环这样的三步直到loss达到最小或达到指定停止条件</p>\n<p>BP算法的本质是求导的链式法则，对于上面的三层网络，假设其损失函数为$C$，激活函数为$\\sigma$，第$l$第$i$个神经元的输入为$z_i^{(l)}$，输出为$a_i^{(l)}$</p>\n<p>则通过梯度下降来更新权值和偏置的公式如下：<br>$$W_{ij}^{(l)} = W_{ij}^{(l)} - \\eta\\frac{\\partial}{\\partial W_{ij}^{(l)}}C\\tag1$$<br>$$b_{i}^{(l)} = b_{i}^{(l)} - \\eta\\frac{\\partial}{\\partial b_{i}^{(l)}}C\\tag2$$</p>\n<p>$W_{ij}^{(l)}$表示第$l$层第$i$个神经元与第$l - 1$层第$j$个神经元连接的权值，$b_i^{(l)}$表示第$l$层第$i$个神经元的偏置</p>\n<p>$\\eta$表示学习率</p>\n<p>由更新公式可见主要问题在于求解损失函数关于权值和偏置的偏导数</p>\n<p>第$l$层第$i$个神经元的输入$z_i^{(l)}$为：<br>$$z_i^{(l)} = \\sum_{j=1}^{n^{(l-1)}}{W_{ij}^{(l)}a_j^{(l-1)}} + b_i^{l}\\tag3$$</p>\n<p>则更新公式中偏导项可化为:</p>\n<p>$$\\frac{\\partial}{\\partial W_{ij}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial W_{ij}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet a_i^{(l-1)}\\tag4$$</p>\n<p>$$\\frac{\\partial}{\\partial b_{i}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial b_{i}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}}\\tag5$$</p>\n<p>定义</p>\n<p>$$\\delta_i^{(l)} = \\frac{\\partial}{\\partial z_i^{(l)}}C\\tag6$$</p>\n<p>现在问题转化为求解$\\delta_i^{(l)}$，对第$l$层第$j$个神经元有：<br>$$<br>\\delta_j^{(l)} = \\frac{\\partial C}{\\partial z_j^{(l)}} = \\sum_{i=1}^{n^{(l+1)}}\\frac{\\partial C}{\\partial z_i^{(l+1)}} \\bullet \\frac{\\partial z_i^{(l+1)}}{\\partial a_j^{(l)}} \\bullet \\frac{\\partial a_j^{(l)}}{\\partial z_j^{(l)}} \\<br>=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet \\frac{\\partial(W_{ij}^{l+1} + b_i^{(l+1)})}{\\partial a_j^{(l)}} \\bullet \\sigma^\\prime(z_j^{(l)})\\<br>=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet W_{ij}^{(l+1)} \\bullet \\sigma^\\prime(z_j^{(l)})\\tag7<br>$$</p>\n<p>则：<br>$$\\delta^{(l)} = ((W^{(l+1)})^T\\delta^{(l+1)})\\odot\\sigma^\\prime(z^{(l)})\\tag8$$</p>\n<p>损失函数关于权重和偏置的偏导分别为：<br>$$\\frac{\\partial C}{\\partial W_{ij}^{(l)}} = a_i^{(l-1)}\\delta_i^{(l)}\\tag9$$<br>$$\\frac{\\partial C}{\\partial b_{i}^{(l)}} =\\delta_i^{(l)}\\tag{10}$$</p>\n<p>误差根据8式由输出层向后传播，再结合1，2，9，10四式对权重和偏置进行更新</p>\n<h2 id=\"5-实现\"><a href=\"#5-实现\" class=\"headerlink\" title=\"5.实现\"></a>5.实现</h2><p>下面是一个简单3隐层神经网络的实现</p>\n<p>In [ ]:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(pred, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.sum((pred - y) ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss_prime</span><span class=\"params\">(pred, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred - y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">network</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, input_size, hidden_size, num_layers, output_size, loss = loss, loss_prime = loss_prime)</span>:</span></span><br><span class=\"line\">        self.input_size = input_size</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.num_layers = num_layers</span><br><span class=\"line\">        self.output_size = output_size</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># activation function</span></span><br><span class=\"line\">        self.activation = self.sigmoid</span><br><span class=\"line\">        <span class=\"comment\"># derivative of activation function</span></span><br><span class=\"line\">        self.activation_prime = self.sigmoid_prime</span><br><span class=\"line\">        <span class=\"comment\"># loss funciton</span></span><br><span class=\"line\">        self.loss = loss</span><br><span class=\"line\">        <span class=\"comment\"># derivative of loss function</span></span><br><span class=\"line\">        self.loss_prime = loss_prime</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># input-&gt;hidden</span></span><br><span class=\"line\">        self.w_ih = np.random.randn(input_size, hidden_size)</span><br><span class=\"line\">        self.b_ih = np.random.randn(<span class=\"number\">1</span>, hidden_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># hidden layers</span></span><br><span class=\"line\">        self.W_hh = [np.random.randn(hidden_size, hidden_size) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num_layers - <span class=\"number\">1</span>)]</span><br><span class=\"line\">        self.B_hh = [np.random.randn(<span class=\"number\">1</span>, hidden_size) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num_layers - <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># hidden-&gt;output</span></span><br><span class=\"line\">        self.w_ho = np.random.randn(hidden_size, output_size)</span><br><span class=\"line\">        self.b_ho = np.random.randn(<span class=\"number\">1</span>, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># assemble w and b</span></span><br><span class=\"line\">        self.W = [self.w_ih]</span><br><span class=\"line\">        self.W.extend(self.W_hh)</span><br><span class=\"line\">        self.W.append(self.w_ho)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.B = [self.b_ih]</span><br><span class=\"line\">        self.B.extend(self.B_hh)</span><br><span class=\"line\">        self.B.append(self.b_ho)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># activation</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.0</span> / (<span class=\"number\">1</span> + np.exp(-x))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid_prime</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sigmoid(x) * (<span class=\"number\">1</span> - self.sigmoid(x))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># forward pass, calculate the output of the network</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, a)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w, b <span class=\"keyword\">in</span> zip(self.W, self.B):</span><br><span class=\"line\">            a = self.activation(np.dot(a, w) + b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># backpropagate error</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backward</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        delta_w = [np.zeros(w.shape) <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> self.W]</span><br><span class=\"line\">        delta_b = [np.zeros(b.shape) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> self.B]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get output of each layer in forward pass</span></span><br><span class=\"line\">        out = x</span><br><span class=\"line\">        outs = []</span><br><span class=\"line\">        zs = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w, b <span class=\"keyword\">in</span> zip(self.W, self.B):</span><br><span class=\"line\">            z = np.dot(out, w) + b</span><br><span class=\"line\">            zs.append(z)</span><br><span class=\"line\">            out = self.activation(z)</span><br><span class=\"line\">            outs.append(out)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># δ of last layer</span></span><br><span class=\"line\">        delta = self.loss_prime(outs[<span class=\"number\">-1</span>], y) * self.activation_prime(zs[<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        delta_b[<span class=\"number\">-1</span>] = delta</span><br><span class=\"line\">        delta_w[<span class=\"number\">-1</span>] = np.dot(outs[<span class=\"number\">-2</span>].transpose(), delta)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(delta_w)):</span><br><span class=\"line\">            delta = np.dot(delta, self.W[-i+<span class=\"number\">1</span>].transpose()) * self.activation_prime(zs[-i])</span><br><span class=\"line\">            delta_b[-i] = delta</span><br><span class=\"line\">            delta_w[-i] = np.dot(outs[-i<span class=\"number\">-1</span>].transpose(), delta)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> delta_w, delta_b</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># update w and b</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, batch, lr)</span>:</span></span><br><span class=\"line\">        delta_w = [np.zeros(w.shape) <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> self.W]</span><br><span class=\"line\">        delta_b = [np.zeros(b.shape) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> self.B]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> batch:</span><br><span class=\"line\">            d_w, d_b = self.backward(x, y)</span><br><span class=\"line\">            delta_w = [a + b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(delta_w, d_w)]</span><br><span class=\"line\">            delta_b = [a + b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(delta_b, d_b)]</span><br><span class=\"line\"></span><br><span class=\"line\">        self.W = [w - lr * t <span class=\"keyword\">for</span> w, t <span class=\"keyword\">in</span> zip(self.W, delta_w)]</span><br><span class=\"line\">        self.B = [b - lr * t <span class=\"keyword\">for</span> b, t <span class=\"keyword\">in</span> zip(self.B, delta_b)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SGD training</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span><span class=\"params\">(self, train_data, epochs, batch_size, lr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(epochs):</span><br><span class=\"line\">            np.random.shuffle(train_data)</span><br><span class=\"line\">            batches = [train_data[t : t + batch_size] <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(train_data), batch_size)]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> batch <span class=\"keyword\">in</span> batches:</span><br><span class=\"line\">                self.update(batch, lr)</span><br><span class=\"line\"></span><br><span class=\"line\">            loss = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> train_data:</span><br><span class=\"line\">                loss += self.loss(self.forward(x), y)</span><br><span class=\"line\">            loss /= len(train_data)</span><br><span class=\"line\"></span><br><span class=\"line\">            print(<span class=\"string\">\"Epoch %d done, loss: %f\"</span> % (i + <span class=\"number\">1</span>, loss))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># predict</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.forward(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use it for handwriting digits classification</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">onehot</span><span class=\"params\">(y)</span>:</span></span><br><span class=\"line\">    arr = np.zeros([y.shape[<span class=\"number\">0</span>], <span class=\"number\">10</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(y.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        arr[i][y[i]] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\">(x_train, y_train),(x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\">x_train = x_train.reshape([<span class=\"number\">-1</span>, <span class=\"number\">28</span> * <span class=\"number\">28</span>])</span><br><span class=\"line\">x_test = x_test.reshape([<span class=\"number\">-1</span>, <span class=\"number\">28</span> * <span class=\"number\">28</span>])</span><br><span class=\"line\">y_train = onehot(y_train)</span><br><span class=\"line\">y_test = onehot(y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">train_data = [t <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> zip(x_train, y_train)]</span><br><span class=\"line\">test_data = [t <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> zip(x_test, y_test)]</span><br><span class=\"line\"></span><br><span class=\"line\">input_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\">hidden_size = <span class=\"number\">100</span></span><br><span class=\"line\">num_layers = <span class=\"number\">3</span></span><br><span class=\"line\">output_size = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">net = network(input_size, hidden_size, num_layers, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">lr = <span class=\"number\">0.005</span></span><br><span class=\"line\">epochs = <span class=\"number\">100</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.train(train_data, epochs, batch_size, lr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    exp = np.exp(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exp / np.sum(exp)</span><br><span class=\"line\"></span><br><span class=\"line\">correct = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> test_data:</span><br><span class=\"line\">    ret = net.forward(x)</span><br><span class=\"line\">    pred = softmax(ret)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> np.argmax(pred) == np.argmax(y):</span><br><span class=\"line\">        correct += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">acc = float(correct) / len(test_data)</span><br><span class=\"line\">print(<span class=\"string\">'test accuracy: '</span>, acc)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Feed-forward-neural-network-and-back-propagation\"><a href=\"#Feed-forward-neural-network-and-back-propagation\" class=\"headerlink\" title=\"Feed forward neural network and back propagation\"></a>Feed forward neural network and back propagation</h1><h2 id=\"1-Neuron-structure\"><a href=\"#1-Neuron-structure\" class=\"headerlink\" title=\"1. Neuron structure\"></a>1. Neuron structure</h2><p><img src=\"neuron.png\" alt=\"Neuron structure\"></p>\n<p>上图是一种典型的神经元结构，$x_n$是神经元的输入，将输入加权求和后再通过激活函数即可得到此神经元的输出：<br>$$t = \\sum_{i=1}^{n}{w_ix_i} + b$$<br>$$a = f(t)$$</p>\n<p>为计算方便，可将偏置$b$提到求和符号里面，相当于加入一个恒为1的输入值，对应的权重为$b$：<br>$$t = \\sum_{i=0}^{n}{w_ix_i},(x_0 = 1, w_0 = b)$$<br>$$a = f(t)$$<br>此即为上图神经元结构对应的表达式</p>\n<p>常用的激活函数有sigmoid, ReLU, tanh等。</p>\n<h2 id=\"2-Network-structure\"><a href=\"#2-Network-structure\" class=\"headerlink\" title=\"2. Network structure\"></a>2. Network structure</h2><p><img src=\"bp_net.jpg\" alt=\"Network Structure\"></p>\n<p>这是一个简单的3层网络，输入层有3个输入值，隐藏层包含3个隐藏神经元，最后是两个输出值<br>隐藏层神经元的前向计算过程：</p>\n<p>$$z_i^{l} = \\sum_{i=0}^{n}w_{ij}^{l}x_j, (x_0 = 1, w_0 = b)$$</p>\n<p>$$a_i^l = f(z_i^l)$$</p>\n<p>$l$表示第几层。</p>\n<p>这个网络的抽象数学表达式为：<br>$$F(x) = f_3(f_2(x * W_2 + b_2) * W_3 + b_3)$$</p>\n<p>事实上，深度神经网络一般都能够抽象为一个复合的非线性多元函数，有多少隐藏层就有多少层复合函数：<br>$$F(x) = f_n\\left(\\dots f_3(f_2(f_1(x) * w_1 + b_1) * w_2 + b_2)\\dots\\right)$$</p>\n<h2 id=\"3-Loss\"><a href=\"#3-Loss\" class=\"headerlink\" title=\"3. Loss\"></a>3. Loss</h2><p>Loss，即损失，用来衡量神经网络的输出值与实际值的误差，对于不同的问题，通常会定义不同的loss函数</p>\n<p>回归问题常用的均方误差：<br>$$MSE = \\frac{1}{n}\\sum_{i=1}^{n}(Y - f(x))^2$$<br>$Y$为实际值，$f(x)$为网络预测值</p>\n<p>分类问题常用的交叉熵(m类)：<br>$$L = \\sum_{k=1}^{n}\\sum_{i=1}^{m}l_{ki}log(p_{ki})$$<br>$l_{ki}$表示第k个样本实际是否属于第i类（0，1编码），$p_{ki}$表示第k个样本属于第i类的概率值</p>\n<p>特别地，二分类问题的交叉熵损失函数形式为：<br>$$L = \\sum_{i=1}^{n}[y_ilog(p_i) + (1 - y_i)log(1 - p_i)]$$<br>$y_i$为第i个样本所属类别，$p_i$为第i个样本属于$y_i$类的概率</p>\n<h2 id=\"4-Back-propagation\"><a href=\"#4-Back-propagation\" class=\"headerlink\" title=\"4. Back propagation\"></a>4. Back propagation</h2><p>BP 是用来将loss反向传播的算法，用来调整网络中神经元间连接的权重和偏置，整个训练的过程就是：前向计算网络输出<br>-&gt;;根据当前网络输出计算loss-&gt;BP算法反向传播loss调整网络参数，不断循环这样的三步直到loss达到最小或达到指定停止条件</p>\n<p>BP算法的本质是求导的链式法则，对于上面的三层网络，假设其损失函数为$C$，激活函数为$\\sigma$，第$l$第$i$个神经元的输入为$z_i^{(l)}$，输出为$a_i^{(l)}$</p>\n<p>则通过梯度下降来更新权值和偏置的公式如下：<br>$$W_{ij}^{(l)} = W_{ij}^{(l)} - \\eta\\frac{\\partial}{\\partial W_{ij}^{(l)}}C\\tag1$$<br>$$b_{i}^{(l)} = b_{i}^{(l)} - \\eta\\frac{\\partial}{\\partial b_{i}^{(l)}}C\\tag2$$</p>\n<p>$W_{ij}^{(l)}$表示第$l$层第$i$个神经元与第$l - 1$层第$j$个神经元连接的权值，$b_i^{(l)}$表示第$l$层第$i$个神经元的偏置</p>\n<p>$\\eta$表示学习率</p>\n<p>由更新公式可见主要问题在于求解损失函数关于权值和偏置的偏导数</p>\n<p>第$l$层第$i$个神经元的输入$z_i^{(l)}$为：<br>$$z_i^{(l)} = \\sum_{j=1}^{n^{(l-1)}}{W_{ij}^{(l)}a_j^{(l-1)}} + b_i^{l}\\tag3$$</p>\n<p>则更新公式中偏导项可化为:</p>\n<p>$$\\frac{\\partial}{\\partial W_{ij}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial W_{ij}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet a_i^{(l-1)}\\tag4$$</p>\n<p>$$\\frac{\\partial}{\\partial b_{i}^{(l)}}C = \\frac{\\partial C}{\\partial z_i^{(l)}} \\bullet \\frac{\\partial z_i^{(l)}}{\\partial b_{i}^{(l)}} = \\frac{\\partial C}{\\partial z_i^{(l)}}\\tag5$$</p>\n<p>定义</p>\n<p>$$\\delta_i^{(l)} = \\frac{\\partial}{\\partial z_i^{(l)}}C\\tag6$$</p>\n<p>现在问题转化为求解$\\delta_i^{(l)}$，对第$l$层第$j$个神经元有：<br>$$<br>\\delta_j^{(l)} = \\frac{\\partial C}{\\partial z_j^{(l)}} = \\sum_{i=1}^{n^{(l+1)}}\\frac{\\partial C}{\\partial z_i^{(l+1)}} \\bullet \\frac{\\partial z_i^{(l+1)}}{\\partial a_j^{(l)}} \\bullet \\frac{\\partial a_j^{(l)}}{\\partial z_j^{(l)}} \\<br>=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet \\frac{\\partial(W_{ij}^{l+1} + b_i^{(l+1)})}{\\partial a_j^{(l)}} \\bullet \\sigma^\\prime(z_j^{(l)})\\<br>=\\sum_{i=1}^{n^{(l+1)}}\\delta_i^{(l+1)} \\bullet W_{ij}^{(l+1)} \\bullet \\sigma^\\prime(z_j^{(l)})\\tag7<br>$$</p>\n<p>则：<br>$$\\delta^{(l)} = ((W^{(l+1)})^T\\delta^{(l+1)})\\odot\\sigma^\\prime(z^{(l)})\\tag8$$</p>\n<p>损失函数关于权重和偏置的偏导分别为：<br>$$\\frac{\\partial C}{\\partial W_{ij}^{(l)}} = a_i^{(l-1)}\\delta_i^{(l)}\\tag9$$<br>$$\\frac{\\partial C}{\\partial b_{i}^{(l)}} =\\delta_i^{(l)}\\tag{10}$$</p>\n<p>误差根据8式由输出层向后传播，再结合1，2，9，10四式对权重和偏置进行更新</p>\n<h2 id=\"5-实现\"><a href=\"#5-实现\" class=\"headerlink\" title=\"5.实现\"></a>5.实现</h2><p>下面是一个简单3隐层神经网络的实现</p>\n<p>In [ ]:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(pred, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.sum((pred - y) ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss_prime</span><span class=\"params\">(pred, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred - y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">network</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, input_size, hidden_size, num_layers, output_size, loss = loss, loss_prime = loss_prime)</span>:</span></span><br><span class=\"line\">        self.input_size = input_size</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.num_layers = num_layers</span><br><span class=\"line\">        self.output_size = output_size</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># activation function</span></span><br><span class=\"line\">        self.activation = self.sigmoid</span><br><span class=\"line\">        <span class=\"comment\"># derivative of activation function</span></span><br><span class=\"line\">        self.activation_prime = self.sigmoid_prime</span><br><span class=\"line\">        <span class=\"comment\"># loss funciton</span></span><br><span class=\"line\">        self.loss = loss</span><br><span class=\"line\">        <span class=\"comment\"># derivative of loss function</span></span><br><span class=\"line\">        self.loss_prime = loss_prime</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># input-&gt;hidden</span></span><br><span class=\"line\">        self.w_ih = np.random.randn(input_size, hidden_size)</span><br><span class=\"line\">        self.b_ih = np.random.randn(<span class=\"number\">1</span>, hidden_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># hidden layers</span></span><br><span class=\"line\">        self.W_hh = [np.random.randn(hidden_size, hidden_size) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num_layers - <span class=\"number\">1</span>)]</span><br><span class=\"line\">        self.B_hh = [np.random.randn(<span class=\"number\">1</span>, hidden_size) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num_layers - <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># hidden-&gt;output</span></span><br><span class=\"line\">        self.w_ho = np.random.randn(hidden_size, output_size)</span><br><span class=\"line\">        self.b_ho = np.random.randn(<span class=\"number\">1</span>, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># assemble w and b</span></span><br><span class=\"line\">        self.W = [self.w_ih]</span><br><span class=\"line\">        self.W.extend(self.W_hh)</span><br><span class=\"line\">        self.W.append(self.w_ho)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.B = [self.b_ih]</span><br><span class=\"line\">        self.B.extend(self.B_hh)</span><br><span class=\"line\">        self.B.append(self.b_ho)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># activation</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1.0</span> / (<span class=\"number\">1</span> + np.exp(-x))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid_prime</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.sigmoid(x) * (<span class=\"number\">1</span> - self.sigmoid(x))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># forward pass, calculate the output of the network</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, a)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w, b <span class=\"keyword\">in</span> zip(self.W, self.B):</span><br><span class=\"line\">            a = self.activation(np.dot(a, w) + b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># backpropagate error</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backward</span><span class=\"params\">(self, x, y)</span>:</span></span><br><span class=\"line\">        delta_w = [np.zeros(w.shape) <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> self.W]</span><br><span class=\"line\">        delta_b = [np.zeros(b.shape) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> self.B]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># get output of each layer in forward pass</span></span><br><span class=\"line\">        out = x</span><br><span class=\"line\">        outs = []</span><br><span class=\"line\">        zs = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w, b <span class=\"keyword\">in</span> zip(self.W, self.B):</span><br><span class=\"line\">            z = np.dot(out, w) + b</span><br><span class=\"line\">            zs.append(z)</span><br><span class=\"line\">            out = self.activation(z)</span><br><span class=\"line\">            outs.append(out)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># δ of last layer</span></span><br><span class=\"line\">        delta = self.loss_prime(outs[<span class=\"number\">-1</span>], y) * self.activation_prime(zs[<span class=\"number\">-1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        delta_b[<span class=\"number\">-1</span>] = delta</span><br><span class=\"line\">        delta_w[<span class=\"number\">-1</span>] = np.dot(outs[<span class=\"number\">-2</span>].transpose(), delta)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(delta_w)):</span><br><span class=\"line\">            delta = np.dot(delta, self.W[-i+<span class=\"number\">1</span>].transpose()) * self.activation_prime(zs[-i])</span><br><span class=\"line\">            delta_b[-i] = delta</span><br><span class=\"line\">            delta_w[-i] = np.dot(outs[-i<span class=\"number\">-1</span>].transpose(), delta)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> delta_w, delta_b</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># update w and b</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, batch, lr)</span>:</span></span><br><span class=\"line\">        delta_w = [np.zeros(w.shape) <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> self.W]</span><br><span class=\"line\">        delta_b = [np.zeros(b.shape) <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> self.B]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> batch:</span><br><span class=\"line\">            d_w, d_b = self.backward(x, y)</span><br><span class=\"line\">            delta_w = [a + b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(delta_w, d_w)]</span><br><span class=\"line\">            delta_b = [a + b <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> zip(delta_b, d_b)]</span><br><span class=\"line\"></span><br><span class=\"line\">        self.W = [w - lr * t <span class=\"keyword\">for</span> w, t <span class=\"keyword\">in</span> zip(self.W, delta_w)]</span><br><span class=\"line\">        self.B = [b - lr * t <span class=\"keyword\">for</span> b, t <span class=\"keyword\">in</span> zip(self.B, delta_b)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SGD training</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span><span class=\"params\">(self, train_data, epochs, batch_size, lr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(epochs):</span><br><span class=\"line\">            np.random.shuffle(train_data)</span><br><span class=\"line\">            batches = [train_data[t : t + batch_size] <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(train_data), batch_size)]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> batch <span class=\"keyword\">in</span> batches:</span><br><span class=\"line\">                self.update(batch, lr)</span><br><span class=\"line\"></span><br><span class=\"line\">            loss = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> train_data:</span><br><span class=\"line\">                loss += self.loss(self.forward(x), y)</span><br><span class=\"line\">            loss /= len(train_data)</span><br><span class=\"line\"></span><br><span class=\"line\">            print(<span class=\"string\">\"Epoch %d done, loss: %f\"</span> % (i + <span class=\"number\">1</span>, loss))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># predict</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.forward(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use it for handwriting digits classification</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">onehot</span><span class=\"params\">(y)</span>:</span></span><br><span class=\"line\">    arr = np.zeros([y.shape[<span class=\"number\">0</span>], <span class=\"number\">10</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(y.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        arr[i][y[i]] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\"></span><br><span class=\"line\">(x_train, y_train),(x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\">x_train = x_train.reshape([<span class=\"number\">-1</span>, <span class=\"number\">28</span> * <span class=\"number\">28</span>])</span><br><span class=\"line\">x_test = x_test.reshape([<span class=\"number\">-1</span>, <span class=\"number\">28</span> * <span class=\"number\">28</span>])</span><br><span class=\"line\">y_train = onehot(y_train)</span><br><span class=\"line\">y_test = onehot(y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">train_data = [t <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> zip(x_train, y_train)]</span><br><span class=\"line\">test_data = [t <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> zip(x_test, y_test)]</span><br><span class=\"line\"></span><br><span class=\"line\">input_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\">hidden_size = <span class=\"number\">100</span></span><br><span class=\"line\">num_layers = <span class=\"number\">3</span></span><br><span class=\"line\">output_size = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">net = network(input_size, hidden_size, num_layers, output_size)</span><br><span class=\"line\"></span><br><span class=\"line\">lr = <span class=\"number\">0.005</span></span><br><span class=\"line\">epochs = <span class=\"number\">100</span></span><br><span class=\"line\">batch_size = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.train(train_data, epochs, batch_size, lr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    exp = np.exp(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exp / np.sum(exp)</span><br><span class=\"line\"></span><br><span class=\"line\">correct = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> test_data:</span><br><span class=\"line\">    ret = net.forward(x)</span><br><span class=\"line\">    pred = softmax(ret)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> np.argmax(pred) == np.argmax(y):</span><br><span class=\"line\">        correct += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">acc = float(correct) / len(test_data)</span><br><span class=\"line\">print(<span class=\"string\">'test accuracy: '</span>, acc)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CUDA内存管理总结(一)","date":"2018-11-24T16:46:08.000Z","author":"潘薇鸿","_content":"\n# CUDA 内存管理(一)\n\n## 一、寄存器\n\n​\tGPU的每个SM（流多处理器）都有上千个寄存器，每个SM都可以看作是一个多线程的CPU核，但与一般的CPU拥有二、四、六或八个核不同，一个GPU可以有**N个SM核**；同样，与一般的CPU核支持一到两个硬件线程不同，每个SM核可能有**8~192个SP**（流处理器），亦即每个SM能同时支持这么多个硬件线程。事实上，一台GPU设备的所有SM中活跃的线程数目通常数以万计。\n\n### 1.1 寄存器映射方式\n\n​\t**CPU处理多线程**：进行上下文切换，使用寄存器重命名机制，将当前所有寄存器的状态保存到栈（系统内存），再从栈中恢复当前需要执行的新线程在上一次的执行状态。这些操作通常花费上百个CPU时钟周期，有效工作吞吐量低。\n\n​\t**GPU处理多线程**：与CPU相反，GPU利用多线程隐藏了内存获取与指令执行带来的延迟；此外，GPU不再使用寄存器重命名机制，而是尽可能为每个线程分配寄存器，从而上下文切换就变成了寄存器组选择器（或指针）的更新，几乎是零开销。\n\n### 1.2 寄存器空间大小\n\n​\t每个SM可提供的寄存器空间大小分别有8KB、16KB、32KB和64KB，每个线程中的每个变量占用一个寄存器，因而总共会占用N个寄存器，N代表调度的线程数量。当线程块上的寄存器数目是允许的最大值时，每个SM会只处理一个线程块。\n\n### 1.3 SM调度线程、线程块\n\n​\t由于大多数内核对寄存器的需求量很低，所以可以通过降低寄存器的需求量来增加SM上线程块的调度数量，从而提高运行的线程总数，根据线程级并行**“占用率越高，程序运行越快”**，可以实现运行效率的优化。当线程级并行（*Thread-Level Parallelism*，TLP）足以隐藏存储延迟时会达到一个临界点，此后想要继续提高程序性能，可以在单个线程中实现指令级的并行（*Instruction-Level Parallelism*，ILP），即单线程处理多数据。\n\n​\t但在另一方面，每个SM所能调度的线程总量是有限制的，因此当线程总量达到最大时，再减少寄存器的使用量就无法达到提高占有率的目的（如下表中寄存器数目由20减小为16，线程块调度数量不变），所以在这种情况下，应增加寄存器的使用量到临界值。\n\n<img src=\"1.png\" />\n\n### 1.4 寄存器优化方式\n\n​\t1）将中间结果累积在寄存器而非全局内存中。尽量避免全局内存的写操作，因为如果操作聚集到同一块内存上，就会强制硬件对内存的操作序列化，导致严重的性能降低；\n\n​\t2）循环展开。循环一般非常低效，因为它们会产生分支，造成流水线停滞。\n\n### 1.5 总结\n\n​\t使用寄存器可以有效消除内存访问，或提供额外的ILP，以此实现GPU内核函数的加速，这是最为有效的方法之一。\n\n## 二、共享内存\n\n### 2.1 基本概念\n\n​\t1、共享内存实际上是可以受用户控制的一级缓存，每个SM中的一级缓存和共享内存共用一个64KB的内存段。\n\n​\t2、共享内存的延迟很低，大约有1.5TB/s的带宽，而全局内存仅为160GB/s，换言之，有效利用共享内存有可能获得7倍的加速比。但它的速度依然只有寄存器的十分之一，并且共享内存的速度几乎在所有GPU中都相同，因为它由核时钟频率驱动。\n\n​\t3、只有当数据重复利用、全局内存合并，或者线程之间有共享数据（例如同时访问相同地址的存储体）的时候使用共享内存才更合适，否则将数据直接从全局内存加载到寄存器性能会更好。\n\n​\t4、共享内存是基于存储体切换的架构（*bank-switched architecture*），费米架构的设备上有32个存储体。无论有多少线程发起操作，**每个**存储体**每个**周期只执行**一次**操作。因此，如果线程束中的每个线程各访问一个存储体，那么所有线程的操作都可以在一个周期内同时执行，且所有操作都是独立互不影响的。此外，如果所有线程同时访问同一地址的存储体，会触发一个广播机制到线程束中的每个线程中。但是，如果是其他的访问方式，线程访问共享内存就需要排队，即一个线程访问时，其他线程将阻塞闲置。因此很重要的一点时，应该尽可能地获得**零存储体冲突**的共享内存访问。\n\n### 2.2 Example：使用共享内存排序\n\n## 2.2.1 归并排序\n\n​\t假设待排序的数据集大小为N，现将数据集进行划分。根据归并排序的划分原则，最后每个数据包中只有两个数值需要排序，因此，在这一阶段，最大并行度可达到 $N \\over 2$ 个独立线程。例如，处理一个大小为512KB的数据集，共有128K个32位的元素，那么最多可以使用的线程个数为64K个（N=128K，N/2=64K），假设GPU上有16个SM，每个SM最多支持1536个线程，那么每个GPU上最多可以支持24K个线程，因此，按照这样划分，64K的数据对只需要2.5次迭代即可完成排序操作。\n\n​\t但是，如果采用上述划分排序方式再进行合并，我们需要从每个排好序的数据集中读出元素，对于一个64K的集合，需要64K次读操作，即从内存中获取256MB的数据，显然当数据集很大的时候不合适。\n\n​\t因此，我们采用通过限制对原始问题的迭代次数，通过基于共享内存的分解方式来获得更好的合并方案。因为在费米架构的设备上有32个存储体，即对应32个线程，所以当需要的线程数量减少为32（一个线程束）时，停止迭代，于是共需要线程束4K个（128K/32=4K），又因为GPU上有16个SM，所以这将为每个SM分配到256个线程束。然而由于费米架构设备上的每个SM最多只能同时执行48个线程束，因此多个块将被循环访问。\n\n​\t通过将数据集以每行32个元素的方式在共享内存中进行分布，每列为一个存储体，即可得到零存储体冲突的内存访问，然后对每一列实施相同的排序算法。（或者也可以理解为桶排序呀）\n\n​\t然后再进行列表的合并。\n\n## 2.2.2 合并列表\n\n​\t先从串行合并任意数目的有序列表看起：\n\n```c\nvoid merge_array(const u32 *const src_array, //待排序数组\n                 u32 *const dest_array, //排序后的数组\n                 const u32 num_lists, //列表总数\n                 const u32 num_elements) //数据总数\n{\n\tconst u32 num_elements_per_list = (num_elements / num_lists);//每个列表中的数据个数\n    u32 list_indexes[MAX_NUM_LISTS]; //所有列表当前所在的元素下标\n    for(u32 list = 0; list < num_lists; list++)\n    {\n\t\tlist_indexes[list] = 0;\n    }\n    for(u32 i = 0; i<num_elements; i++)\n    {\n\t\tdest_array[i] = find_min(scr_array, \n                                 list_indexes, \n                                 num_lists, \n                                 num_elements_per_list);\n\t}\n}\n\nu32 find_min(const u32*cosnt src_array, \n             u32 *const list_indexes, \n             const u32 num_lists, \n             const u32 num_elements_per_list)//寻找num_lists个元素中的最小值\n{\n    u32 min_val = 0xFFFFFFFF;\n    u32 min_idx = 0;\n    \n    for(u32 i = 0; i < num_lists; i++)\n    {\n\t\tif(list_indexes[i] < num_elements_per_list)\n        {\n\t\t\tconst u32 src_idx = i + (list_indexes[i]*num_lists);\n             const u32 data = src_array[src_idx];\n        \n        \tif(data <= min_val)\n        \t{\n\t\t\t\tmin_val = data;\n           \t     min_idx = i;\n        \t}\n        }\n    }\n    \n    list_indexes[min_idx]++;\n    return min_val;\n}\n```\n\n​\t将上述算法用GPU实现\n\n```C\n__global__ void gpu_sort_array_array(u32 *const data, \n                                     const u32 num_lists, \n                                     const u32 num_elements)\n{\n\tconst u32 tid = (blockIdx.x * blockDim.x) + threadIdx.x;\n    __shared__ u32 sort_tmp[NUM_ELEM];\n    __shared__ u32 sort_tmp_1[NUM_ELEM];\n    \n    copy_data_to_shared(data, sort_tmp, num_lists, num_elements, tid);\n    radix_sort2(sort_tmp, num_lists, num_elements, tid, sort_tmp_1);\n    merge_array6(sort_tmp, data, num_lists, num_elements, tid);\n}\n```\n\n​\t第一个函数的实现：\n\n```C\n__device__ void copy_data_to_shared(const u32 *const data, \n                                    u32 *sort_tmp, \n                                    const u32 num_lists, \n                                    const u32 num_elements, \n                                    const u32 tid)\n{\n    for(u32 i = 0; i < num_elements; i++)\n    {\n\t\tsort_tmp[i+tid] = data[i+tid]; \n    }\n    __syncthreads();\n}\n```\n\n​\t该函数中，程序按行将数据从全局内存读入共享内存。当函数调用一个子函数并传入参数时，这些参数必须以某种方式提供给被调用的函数，有两种方法可以采用。一种是通过寄存器传递所需的值，另一种方法是创建一个名为“栈帧”的内存区，但这种方法非常地不高效。出于这一原因，我们需要重新修改合并的程序(merge_array)，以避免函数调用，修改后程序如下（单线程）：\n\n```C \n__device__ void merge_array1(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists, \n                             const u32 num_elements, \n                             const u32 tid)\n{\n\t__shared__ u32 list_indexes[MAX_NUM_LISTS];\n    \n    lists_indexes[tid] = 0;//从每个列表的第一个元素开始\n    __syncthreads();\n    \n    //单线程\n    if(tid == 0)\n    {\n\t\tconst u32 num_elements_per_list = (num_elements / num_lists);\n        for(u32 i = 0; i < num_elements; i++)\n        {\n\t\t\tu32 min_val = 0xFFFFFFFF;\n             u32 min_idx = 0;\n            \n            for(u32 list = 0; list < num_lists; list++)\n   \t\t   {\n\t\t\tif(list_indexes[list] < num_elements_per_list)\n        \t{\n\t\t\t   const u32 src_idx = i + (list_indexes[i]*num_lists);\n             \tconst u32 data = src_array[src_idx];\n        \t\tif(data <= min_val)\n        \t\t{\n\t\t\t\t\tmin_val = data;\n           \t     \t min_idx = i;\n                }\n        \t}\n          }\n          list_indexes[min_idx]++;\n          dest_array[i]=min_val;\n       }\n    }\n}\n```\n\n​\t这里只用一个线程进行合并，但显然，为了获得更好的性能，一个线程是远远不够的。因为数据被写到一个单一的列表中，所以多个线程必须进行某种形式的合作。\n\n```C\n__device__ void merge_array6(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists, \n                             const u32 num_elements, \n                             const u32 tid)\n{\n    //每个列表分到的元素个数\n\tconst u32 num_elements_per_list = (num_elements / num_lists);\n    \n    //创建一个共享列表数组，用来储存当前线程所访问的列表元素下标\n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    list_indexes[tid] = 0;\n    \n    //创建所有线程共享的最小值与最小值线程号\n    __shared__ u32 min_val;\n    __shared__ u32 min_tid;\n    __syncthreads();\n    \n    for(u32 i=0; i<num_elements; i++)\n    {   \n        u32 data;\n        //如果当前列表还未被读完，则从中读取数据\n        if(list_indexes[tid] < num_elements_per_list);\n        {\n             //计算出当前元素在原数组中的下标\n\t\t\tconst u32 src_idx = tid + (list_indexes[tid] * num_lists);\n             data = src_array[src_idx];\n        }\n        else\n        {\n\t\t\tdata = 0xFFFFFFFF;\n        }\n        \n        //用零号线程来初始化最小值与最小值线程号\n        if(tid == 0)\n        {\n\t\t\tmin_val = 0xFFFFFFFF;\n             min_tid = 0xFFFFFFFF;\n        }\n        __syncthreads();\n        \n        //让所有线程都尝试将它们现在手上有的值写入min_val，但只有最小的数据会被保留\n        //利用__syncthreads()确保每个线程都执行了该操作\n        atomicMin(&min_val, data);\n        __syncthreads();\n        \n        //在所有data==min_val的线程中，选取最小线程号写入min_tid\n        if(min_val == data)\n        {\n\t\t\tatomicMin(&min_tid, tid);\n        }\n        __syncthreads();\n        \n        //将满足要求的线程所在列表的当前元素往后移一位，进行下一轮比较\n        //并将筛选结果存入结果数组dest_array\n        if(tid == min_tid)\n        {\n\t\t\tlist_indexes[tid]++;\n             dest_array[i] = data;\n        }\n    }\n}\n```\n\n​\t上面的函数中将num_lists个线程进行合并操作，但只用了一个线程一次将结果写入结果数据数组中，保证了结果的正确性，不会引起线程间的冲突。\n\n​\t其中使用到了 atomicMin 函数。每个线程以从列表中获取的数据作为入参调用该函数，取代了原先单线程访问列表中所有元素并找出最小值的操作。当每个线程调用 atomicMin 函数时，线程读取保存在共享内存中的最小值并于当前线程中的值进行比较，然后把比较结果重新写回最小值对应的共享内存中，同时更新最小值对应的线程号。然而，由于列表中的数据可能会重复，因此可能出现多个线程的值均为最小值的情况，保留的线程号却各不相同。因此需要执行第二步操作，保证保留的线程号为最小线程号。\n\n​\t虽然这种方法的优化效果很显著，但它也有一定的劣势。例如，atomicMin函数只能用在计算能力为1.2以上的设备上；另外，aotomicMin函数只支持整数型运算，但现实世界中的问题通常是基于浮点运算的，因此在这种情况下，我们需要寻找新的解决方法。\n\n## 2.2.3 并行归约\n\n​\t并行归约适用于许多问题，求最小值只是其中的一种。它使用数据集元素数量一半的线程，每个线程将当前线程对应的元素与另一个元素进行比较，计算两者之间的最小值，并将得到的最小值移到前面。每进行一次比较，线程数减少一半，如此反复直到只剩一个元素为止，这个元素就是需要的最小值。\n\n​\t在选择比较元素的时候，应该尽量避免选择同一个线程束中的元素进行比较，因为这会明显地导致线程束内产生分支，而每个分支都将使SM做双倍的工作，继而影响程序的性能。因此我们选择将线程束中的元素与另一半数据集中的元素进行比较。如下图，阴影部分表示当前活跃的线程。\n\n<img src=\"2.png\" />\n\n```C\n__device__ void merge_array5(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists,\n                             const u32 num_elements, \n                             const u32 tid)\n{\n\tconst u32 num_elements_per_list = (num_elements / num_lists);\n    \n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    __shared__ u32 reduction_val[MAX_NUM_LISTS];\n    __shared__ u32 reduction_idx[MAX_NUM_LISTS];\n    \n    list_indexes[tid] = 0;\n    reduction_val[tid] = 0;\n    reduction_idx[tid] = 0;\n    __syncthreads();\n    \n    for(u32 i=0; i<num_elements; i++)\n    {\n\t\tu32 tid_max = num_lists >> 1;//最大线程数为列表总数的一半\n         u32 data;//使用寄存器可以提高运行效率，将对共享内存的写操作次数减少为1\n        \n        //当列表中还有未处理完的元素时\n         if(list_indexes[tid] < num_elements_per_list)\n         {\n             //计算该元素在原数组中的位置\n\t\t\tcosnst u32 src_idx = tid + (list_indexes[tid] * num_lists);\n             data = src_array[src_idx];\n         }\n        //若当前列表已经处理完，将data赋值最大\n        else\n        {\n\t\t\tdata = 0xFFFFFFFF;\n        }\n        \n        //将当前元素及线程号写入共享内存\n        reduction_val[tid] = data;\n        reduction_idx[tid] = tid;\n        __syncthreads;\n        \n        //当前活跃的线程数多于一个时\n        while(tid_max!=0)\n        {\n            if(tid < tid_max)\n            {\n                 //将当前线程中的元素与另一半数据集中的对应元素进行比较\n\t\t\t\tconst u32 val2_idx = tid + tid_max;\n                 const u32 val2 = reduction_val[val2_idx];\n                 \n                 //最后保留较小的那个元素\n                 if(reduction_val[tid] > val2)\n                 {\n\t\t\t\t\treduction_val[tid] = val2;\n                      reduction_idx[tid] = reduction_idx[val_idx];\n                 }\n            }\n            \n            //线程数减半，进入下一轮循环\n            tid_max >>= 1;\n            __syncthreads();\n        }\n        \n        //在零号线程中将结果写入结果数组，并将相应线程所指的元素后移一位\n        if(tid == 0)\n        {\n\t\t\tlist_indexes[reduction_idx[0]]++;\n             dest_array[i] = reduction_val[0];\n        }\n        __syncthreads();\n    }\n}\n```\n\n​\t同样，这种方法也在共享内存中创建了一个临时的列表 list_indexes 用来保存每次循环中从 num_list 个数据集列表中选取出来进行比较的数据。如果进行合并的列表已经为空，那么就将临时列表中的对应数据区赋最大值0xFFFFFFFF。而每轮while循环后，活跃的线程数都将减少一半，直到最后只剩一个活跃的线程，亦即零号线程。最后将结果复制到结果数组中并将最小值所对应的列表索引加一，以确保元素不会被处理两次。\n\n## 2.2.4 混合算法\n\n​\t在了解atomicMin函数和并行归约两种方案后，我们可以利用这两种算法各自的优点，创造出一种新的混合方案。\n\n​\t简单的1~N个数据归约的一个主要问题就是当N增大时，程序的速度先变快再变慢，达到最高效的情形时N在8至16左右。混合算法将原数据集划分成诸多个小的数据集，分别寻找每块中的最小值，然后再将每块得到的结果最终归约到一个值中。这种方法和并行归约的思想非常相似，但同时又省略了并行归约中的多次迭代。代码更新如下：\n\n```C\n#define REDUCTION_SIZE 8\n#define REDUCTION_SIZE_BIT_SHIFT 3\n#define MAX_ACTIVE_REDUCTIONS ((MAX_NUM_LISTS) / (REDUCTION_SIZE))\n\n__device__ void merge_array(const u32 *const src_array, \n                            u32 *const dest_array, \n                            const u32 num_lists, \n                            const u32 num_elements, \n                            const u32 tid)\n{\n    //每个线程都从原数组中读入一个数据，用作首次比较\n    u32 data = src_array[tid];\n    \n    //当前线程所在的数据块编号（8个线程为一组，每个线程处理一个列表）\n    const u32 s_idx = tid >> REDUCTION_SIZE_BIT_SHIFT;\n    \n    //首次进行分别归约的数据块总数\n    const u32 num_reductions = num_lists >> REDUCTION_SIZE_BIT_SHIFT;\n    const u32 num_elements_per_list = num_elements / num_lists;\n    \n    //在共享内存中创建一个列表，指向每个线程当前所在的元素，并初始化为0\n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    list_indexes[tid] = 0;\n    \n    //遍历所有数据\n    for(u32 i=0; i<num_elements; i++)\n    {\n        //每个数据块在内部归约后都会产生一个相应的最小值\n        //在共享内存中开辟一个列表，用来保存每组的最小值\n\t\t__shared__ u32 min_val[MAX_ACTIVE_REDUCTIONS];\n         __shared__ u32 min_tid;\n        \n        //初始化每个数据块的内部最小值\n        if(tid < num_lists)\n        {\n\t\t\tmin_val[s_idx] = 0xFFFFFFFF;\n             min_tid = 0xFFFFFFFF;\n        }\n        __syncthreads();\n        \n        //将当前线程的数据与所处数据块的最小值进行比较，并保留较小的那一个\n        atomicMin(&min_val[s_idx], data);\n        \n        //进行归约的数据块总数不为零时\n        if(num_reductions > 0)\n        {\n            //确保每个线程都已经将上一步比较操作完成\n\t\t\t__syncthreads();\n            \n             //将每个数据块产生的最小值与零号数据块的最小值进行比较，保留较小的那一个\n             if(tid < num_reductions)\n             {\n\t\t\t\tatomicMin(&min_val[0], min_val[tid]);\n                  __syncthreads();\n             }\n            \n             //如果当前线程的数据等于此次比较保留的最小值，记录最小线程号\n             if(data == min_val[0])\n             {\n\t\t\t\tatomicMin(&min_tid, tid);\n             }\n             //确保上一步操作每个线程都已经完成，才能执行下一句\n             __syncthreads();\n            \n            //如果当前线程号恰为记录下的最小线程号\n            if(tid == min_tid)\n            {\n                 //当前所指元素后移一位\n\t\t\t\tlist_indexes[tid]++;\n                \n                 //将结果保存入结果数组\n                  dest_array[i] = data;\n                 \n                  //若该线程对应的列表尚未被处理完\n                  if(list_indexes[tid] < num_elements_per_list)\n                      //更新该线程的data，进行下一轮比较\n                      data = src_array[tid + (list_indexes[tid] * num_lists)];\n                  else\n                      data = 0xFFFFFFFF;\n            }\n            __syncthreads();\n        }\n    }\n}\n```\n\n​\t注意到：\n\n​\t1）原来的min_val由单一的数据扩展成为一个共享数据的数组，这是因为每个独立的线程都需要从它对应的数据集中获取当前的最小值来进行内部比较。每个最小值都是一个32位的数值，因此可以存储在独立的共享内存存储体中。\n\n​\t2）内核函数中的REDUCTION_SIZE的值被设置成8，意味着每个数据块中包含8个数据，程序分别找出每个数据块的最小值，然后再在这些最小值中寻找最终的最小值。\n\n​\t3）内核函数中最重要的一个变化是，只有每次比较的最小值所对应的那个线程的data才会更新，其他线程的data都不会更新。而在之前的内核函数中，每轮比较开始，所有线程都会从对应的列表中重新读入data 的值，随着N的增大，这将变得越来越低效。\n\n## 2.2.5 总结\n\n​\t1）共享内存允许同一个线程块中的线程读写同一段内存，但线程看不到也无法修改其他线程块的共享内存。\n\n​\t2）共享内存的缓冲区驻留在物理GPU上，所以访问时的延迟远低于访问普通缓冲区的延迟，因此除了使用寄存器，还应更有效地使用共享内存，尤其当数据有重复利用，或全局内存合并，或线程间有共享数据的时候。\n\n​\t3）编写代码时，将关键字_shared__添加到声明中，使得该变量留驻在共享内存中，并且线程块中的每个线程都可以共享这块内存，使得一个线程块中的多个线程能够在计算上进行通信和协作。\n\n​\t4）调用 __syncthreads() 函数来实现线程的同步操作，尤其要注意确保在读取共享内存之前，想要写入的操作都已经完成。另外还需要注意，切不可将这个函数放置在发散分支（某些线程需要执行，而其他线程不需要执行），因为除非线程块中的每个线程都执行了该函数，没有任何线程能够执行之后的指令，从而导致死锁。\n\n​\t5）不妨尝试使用共享内存实现矩阵乘法的优化。\n\n > Author: 潘薇鸿\n > PostDate: 2018.11.25\n\n","source":"_posts/cuda.md","raw":"---\ntitle: CUDA内存管理总结(一)\ndate: 2018-11-25 00:46:08\nauthor: 潘薇鸿\ntags: \n    - Tech\n    - CUDA\n---\n\n# CUDA 内存管理(一)\n\n## 一、寄存器\n\n​\tGPU的每个SM（流多处理器）都有上千个寄存器，每个SM都可以看作是一个多线程的CPU核，但与一般的CPU拥有二、四、六或八个核不同，一个GPU可以有**N个SM核**；同样，与一般的CPU核支持一到两个硬件线程不同，每个SM核可能有**8~192个SP**（流处理器），亦即每个SM能同时支持这么多个硬件线程。事实上，一台GPU设备的所有SM中活跃的线程数目通常数以万计。\n\n### 1.1 寄存器映射方式\n\n​\t**CPU处理多线程**：进行上下文切换，使用寄存器重命名机制，将当前所有寄存器的状态保存到栈（系统内存），再从栈中恢复当前需要执行的新线程在上一次的执行状态。这些操作通常花费上百个CPU时钟周期，有效工作吞吐量低。\n\n​\t**GPU处理多线程**：与CPU相反，GPU利用多线程隐藏了内存获取与指令执行带来的延迟；此外，GPU不再使用寄存器重命名机制，而是尽可能为每个线程分配寄存器，从而上下文切换就变成了寄存器组选择器（或指针）的更新，几乎是零开销。\n\n### 1.2 寄存器空间大小\n\n​\t每个SM可提供的寄存器空间大小分别有8KB、16KB、32KB和64KB，每个线程中的每个变量占用一个寄存器，因而总共会占用N个寄存器，N代表调度的线程数量。当线程块上的寄存器数目是允许的最大值时，每个SM会只处理一个线程块。\n\n### 1.3 SM调度线程、线程块\n\n​\t由于大多数内核对寄存器的需求量很低，所以可以通过降低寄存器的需求量来增加SM上线程块的调度数量，从而提高运行的线程总数，根据线程级并行**“占用率越高，程序运行越快”**，可以实现运行效率的优化。当线程级并行（*Thread-Level Parallelism*，TLP）足以隐藏存储延迟时会达到一个临界点，此后想要继续提高程序性能，可以在单个线程中实现指令级的并行（*Instruction-Level Parallelism*，ILP），即单线程处理多数据。\n\n​\t但在另一方面，每个SM所能调度的线程总量是有限制的，因此当线程总量达到最大时，再减少寄存器的使用量就无法达到提高占有率的目的（如下表中寄存器数目由20减小为16，线程块调度数量不变），所以在这种情况下，应增加寄存器的使用量到临界值。\n\n<img src=\"1.png\" />\n\n### 1.4 寄存器优化方式\n\n​\t1）将中间结果累积在寄存器而非全局内存中。尽量避免全局内存的写操作，因为如果操作聚集到同一块内存上，就会强制硬件对内存的操作序列化，导致严重的性能降低；\n\n​\t2）循环展开。循环一般非常低效，因为它们会产生分支，造成流水线停滞。\n\n### 1.5 总结\n\n​\t使用寄存器可以有效消除内存访问，或提供额外的ILP，以此实现GPU内核函数的加速，这是最为有效的方法之一。\n\n## 二、共享内存\n\n### 2.1 基本概念\n\n​\t1、共享内存实际上是可以受用户控制的一级缓存，每个SM中的一级缓存和共享内存共用一个64KB的内存段。\n\n​\t2、共享内存的延迟很低，大约有1.5TB/s的带宽，而全局内存仅为160GB/s，换言之，有效利用共享内存有可能获得7倍的加速比。但它的速度依然只有寄存器的十分之一，并且共享内存的速度几乎在所有GPU中都相同，因为它由核时钟频率驱动。\n\n​\t3、只有当数据重复利用、全局内存合并，或者线程之间有共享数据（例如同时访问相同地址的存储体）的时候使用共享内存才更合适，否则将数据直接从全局内存加载到寄存器性能会更好。\n\n​\t4、共享内存是基于存储体切换的架构（*bank-switched architecture*），费米架构的设备上有32个存储体。无论有多少线程发起操作，**每个**存储体**每个**周期只执行**一次**操作。因此，如果线程束中的每个线程各访问一个存储体，那么所有线程的操作都可以在一个周期内同时执行，且所有操作都是独立互不影响的。此外，如果所有线程同时访问同一地址的存储体，会触发一个广播机制到线程束中的每个线程中。但是，如果是其他的访问方式，线程访问共享内存就需要排队，即一个线程访问时，其他线程将阻塞闲置。因此很重要的一点时，应该尽可能地获得**零存储体冲突**的共享内存访问。\n\n### 2.2 Example：使用共享内存排序\n\n## 2.2.1 归并排序\n\n​\t假设待排序的数据集大小为N，现将数据集进行划分。根据归并排序的划分原则，最后每个数据包中只有两个数值需要排序，因此，在这一阶段，最大并行度可达到 $N \\over 2$ 个独立线程。例如，处理一个大小为512KB的数据集，共有128K个32位的元素，那么最多可以使用的线程个数为64K个（N=128K，N/2=64K），假设GPU上有16个SM，每个SM最多支持1536个线程，那么每个GPU上最多可以支持24K个线程，因此，按照这样划分，64K的数据对只需要2.5次迭代即可完成排序操作。\n\n​\t但是，如果采用上述划分排序方式再进行合并，我们需要从每个排好序的数据集中读出元素，对于一个64K的集合，需要64K次读操作，即从内存中获取256MB的数据，显然当数据集很大的时候不合适。\n\n​\t因此，我们采用通过限制对原始问题的迭代次数，通过基于共享内存的分解方式来获得更好的合并方案。因为在费米架构的设备上有32个存储体，即对应32个线程，所以当需要的线程数量减少为32（一个线程束）时，停止迭代，于是共需要线程束4K个（128K/32=4K），又因为GPU上有16个SM，所以这将为每个SM分配到256个线程束。然而由于费米架构设备上的每个SM最多只能同时执行48个线程束，因此多个块将被循环访问。\n\n​\t通过将数据集以每行32个元素的方式在共享内存中进行分布，每列为一个存储体，即可得到零存储体冲突的内存访问，然后对每一列实施相同的排序算法。（或者也可以理解为桶排序呀）\n\n​\t然后再进行列表的合并。\n\n## 2.2.2 合并列表\n\n​\t先从串行合并任意数目的有序列表看起：\n\n```c\nvoid merge_array(const u32 *const src_array, //待排序数组\n                 u32 *const dest_array, //排序后的数组\n                 const u32 num_lists, //列表总数\n                 const u32 num_elements) //数据总数\n{\n\tconst u32 num_elements_per_list = (num_elements / num_lists);//每个列表中的数据个数\n    u32 list_indexes[MAX_NUM_LISTS]; //所有列表当前所在的元素下标\n    for(u32 list = 0; list < num_lists; list++)\n    {\n\t\tlist_indexes[list] = 0;\n    }\n    for(u32 i = 0; i<num_elements; i++)\n    {\n\t\tdest_array[i] = find_min(scr_array, \n                                 list_indexes, \n                                 num_lists, \n                                 num_elements_per_list);\n\t}\n}\n\nu32 find_min(const u32*cosnt src_array, \n             u32 *const list_indexes, \n             const u32 num_lists, \n             const u32 num_elements_per_list)//寻找num_lists个元素中的最小值\n{\n    u32 min_val = 0xFFFFFFFF;\n    u32 min_idx = 0;\n    \n    for(u32 i = 0; i < num_lists; i++)\n    {\n\t\tif(list_indexes[i] < num_elements_per_list)\n        {\n\t\t\tconst u32 src_idx = i + (list_indexes[i]*num_lists);\n             const u32 data = src_array[src_idx];\n        \n        \tif(data <= min_val)\n        \t{\n\t\t\t\tmin_val = data;\n           \t     min_idx = i;\n        \t}\n        }\n    }\n    \n    list_indexes[min_idx]++;\n    return min_val;\n}\n```\n\n​\t将上述算法用GPU实现\n\n```C\n__global__ void gpu_sort_array_array(u32 *const data, \n                                     const u32 num_lists, \n                                     const u32 num_elements)\n{\n\tconst u32 tid = (blockIdx.x * blockDim.x) + threadIdx.x;\n    __shared__ u32 sort_tmp[NUM_ELEM];\n    __shared__ u32 sort_tmp_1[NUM_ELEM];\n    \n    copy_data_to_shared(data, sort_tmp, num_lists, num_elements, tid);\n    radix_sort2(sort_tmp, num_lists, num_elements, tid, sort_tmp_1);\n    merge_array6(sort_tmp, data, num_lists, num_elements, tid);\n}\n```\n\n​\t第一个函数的实现：\n\n```C\n__device__ void copy_data_to_shared(const u32 *const data, \n                                    u32 *sort_tmp, \n                                    const u32 num_lists, \n                                    const u32 num_elements, \n                                    const u32 tid)\n{\n    for(u32 i = 0; i < num_elements; i++)\n    {\n\t\tsort_tmp[i+tid] = data[i+tid]; \n    }\n    __syncthreads();\n}\n```\n\n​\t该函数中，程序按行将数据从全局内存读入共享内存。当函数调用一个子函数并传入参数时，这些参数必须以某种方式提供给被调用的函数，有两种方法可以采用。一种是通过寄存器传递所需的值，另一种方法是创建一个名为“栈帧”的内存区，但这种方法非常地不高效。出于这一原因，我们需要重新修改合并的程序(merge_array)，以避免函数调用，修改后程序如下（单线程）：\n\n```C \n__device__ void merge_array1(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists, \n                             const u32 num_elements, \n                             const u32 tid)\n{\n\t__shared__ u32 list_indexes[MAX_NUM_LISTS];\n    \n    lists_indexes[tid] = 0;//从每个列表的第一个元素开始\n    __syncthreads();\n    \n    //单线程\n    if(tid == 0)\n    {\n\t\tconst u32 num_elements_per_list = (num_elements / num_lists);\n        for(u32 i = 0; i < num_elements; i++)\n        {\n\t\t\tu32 min_val = 0xFFFFFFFF;\n             u32 min_idx = 0;\n            \n            for(u32 list = 0; list < num_lists; list++)\n   \t\t   {\n\t\t\tif(list_indexes[list] < num_elements_per_list)\n        \t{\n\t\t\t   const u32 src_idx = i + (list_indexes[i]*num_lists);\n             \tconst u32 data = src_array[src_idx];\n        \t\tif(data <= min_val)\n        \t\t{\n\t\t\t\t\tmin_val = data;\n           \t     \t min_idx = i;\n                }\n        \t}\n          }\n          list_indexes[min_idx]++;\n          dest_array[i]=min_val;\n       }\n    }\n}\n```\n\n​\t这里只用一个线程进行合并，但显然，为了获得更好的性能，一个线程是远远不够的。因为数据被写到一个单一的列表中，所以多个线程必须进行某种形式的合作。\n\n```C\n__device__ void merge_array6(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists, \n                             const u32 num_elements, \n                             const u32 tid)\n{\n    //每个列表分到的元素个数\n\tconst u32 num_elements_per_list = (num_elements / num_lists);\n    \n    //创建一个共享列表数组，用来储存当前线程所访问的列表元素下标\n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    list_indexes[tid] = 0;\n    \n    //创建所有线程共享的最小值与最小值线程号\n    __shared__ u32 min_val;\n    __shared__ u32 min_tid;\n    __syncthreads();\n    \n    for(u32 i=0; i<num_elements; i++)\n    {   \n        u32 data;\n        //如果当前列表还未被读完，则从中读取数据\n        if(list_indexes[tid] < num_elements_per_list);\n        {\n             //计算出当前元素在原数组中的下标\n\t\t\tconst u32 src_idx = tid + (list_indexes[tid] * num_lists);\n             data = src_array[src_idx];\n        }\n        else\n        {\n\t\t\tdata = 0xFFFFFFFF;\n        }\n        \n        //用零号线程来初始化最小值与最小值线程号\n        if(tid == 0)\n        {\n\t\t\tmin_val = 0xFFFFFFFF;\n             min_tid = 0xFFFFFFFF;\n        }\n        __syncthreads();\n        \n        //让所有线程都尝试将它们现在手上有的值写入min_val，但只有最小的数据会被保留\n        //利用__syncthreads()确保每个线程都执行了该操作\n        atomicMin(&min_val, data);\n        __syncthreads();\n        \n        //在所有data==min_val的线程中，选取最小线程号写入min_tid\n        if(min_val == data)\n        {\n\t\t\tatomicMin(&min_tid, tid);\n        }\n        __syncthreads();\n        \n        //将满足要求的线程所在列表的当前元素往后移一位，进行下一轮比较\n        //并将筛选结果存入结果数组dest_array\n        if(tid == min_tid)\n        {\n\t\t\tlist_indexes[tid]++;\n             dest_array[i] = data;\n        }\n    }\n}\n```\n\n​\t上面的函数中将num_lists个线程进行合并操作，但只用了一个线程一次将结果写入结果数据数组中，保证了结果的正确性，不会引起线程间的冲突。\n\n​\t其中使用到了 atomicMin 函数。每个线程以从列表中获取的数据作为入参调用该函数，取代了原先单线程访问列表中所有元素并找出最小值的操作。当每个线程调用 atomicMin 函数时，线程读取保存在共享内存中的最小值并于当前线程中的值进行比较，然后把比较结果重新写回最小值对应的共享内存中，同时更新最小值对应的线程号。然而，由于列表中的数据可能会重复，因此可能出现多个线程的值均为最小值的情况，保留的线程号却各不相同。因此需要执行第二步操作，保证保留的线程号为最小线程号。\n\n​\t虽然这种方法的优化效果很显著，但它也有一定的劣势。例如，atomicMin函数只能用在计算能力为1.2以上的设备上；另外，aotomicMin函数只支持整数型运算，但现实世界中的问题通常是基于浮点运算的，因此在这种情况下，我们需要寻找新的解决方法。\n\n## 2.2.3 并行归约\n\n​\t并行归约适用于许多问题，求最小值只是其中的一种。它使用数据集元素数量一半的线程，每个线程将当前线程对应的元素与另一个元素进行比较，计算两者之间的最小值，并将得到的最小值移到前面。每进行一次比较，线程数减少一半，如此反复直到只剩一个元素为止，这个元素就是需要的最小值。\n\n​\t在选择比较元素的时候，应该尽量避免选择同一个线程束中的元素进行比较，因为这会明显地导致线程束内产生分支，而每个分支都将使SM做双倍的工作，继而影响程序的性能。因此我们选择将线程束中的元素与另一半数据集中的元素进行比较。如下图，阴影部分表示当前活跃的线程。\n\n<img src=\"2.png\" />\n\n```C\n__device__ void merge_array5(const u32 *const src_array, \n                             u32 *const dest_array, \n                             const u32 num_lists,\n                             const u32 num_elements, \n                             const u32 tid)\n{\n\tconst u32 num_elements_per_list = (num_elements / num_lists);\n    \n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    __shared__ u32 reduction_val[MAX_NUM_LISTS];\n    __shared__ u32 reduction_idx[MAX_NUM_LISTS];\n    \n    list_indexes[tid] = 0;\n    reduction_val[tid] = 0;\n    reduction_idx[tid] = 0;\n    __syncthreads();\n    \n    for(u32 i=0; i<num_elements; i++)\n    {\n\t\tu32 tid_max = num_lists >> 1;//最大线程数为列表总数的一半\n         u32 data;//使用寄存器可以提高运行效率，将对共享内存的写操作次数减少为1\n        \n        //当列表中还有未处理完的元素时\n         if(list_indexes[tid] < num_elements_per_list)\n         {\n             //计算该元素在原数组中的位置\n\t\t\tcosnst u32 src_idx = tid + (list_indexes[tid] * num_lists);\n             data = src_array[src_idx];\n         }\n        //若当前列表已经处理完，将data赋值最大\n        else\n        {\n\t\t\tdata = 0xFFFFFFFF;\n        }\n        \n        //将当前元素及线程号写入共享内存\n        reduction_val[tid] = data;\n        reduction_idx[tid] = tid;\n        __syncthreads;\n        \n        //当前活跃的线程数多于一个时\n        while(tid_max!=0)\n        {\n            if(tid < tid_max)\n            {\n                 //将当前线程中的元素与另一半数据集中的对应元素进行比较\n\t\t\t\tconst u32 val2_idx = tid + tid_max;\n                 const u32 val2 = reduction_val[val2_idx];\n                 \n                 //最后保留较小的那个元素\n                 if(reduction_val[tid] > val2)\n                 {\n\t\t\t\t\treduction_val[tid] = val2;\n                      reduction_idx[tid] = reduction_idx[val_idx];\n                 }\n            }\n            \n            //线程数减半，进入下一轮循环\n            tid_max >>= 1;\n            __syncthreads();\n        }\n        \n        //在零号线程中将结果写入结果数组，并将相应线程所指的元素后移一位\n        if(tid == 0)\n        {\n\t\t\tlist_indexes[reduction_idx[0]]++;\n             dest_array[i] = reduction_val[0];\n        }\n        __syncthreads();\n    }\n}\n```\n\n​\t同样，这种方法也在共享内存中创建了一个临时的列表 list_indexes 用来保存每次循环中从 num_list 个数据集列表中选取出来进行比较的数据。如果进行合并的列表已经为空，那么就将临时列表中的对应数据区赋最大值0xFFFFFFFF。而每轮while循环后，活跃的线程数都将减少一半，直到最后只剩一个活跃的线程，亦即零号线程。最后将结果复制到结果数组中并将最小值所对应的列表索引加一，以确保元素不会被处理两次。\n\n## 2.2.4 混合算法\n\n​\t在了解atomicMin函数和并行归约两种方案后，我们可以利用这两种算法各自的优点，创造出一种新的混合方案。\n\n​\t简单的1~N个数据归约的一个主要问题就是当N增大时，程序的速度先变快再变慢，达到最高效的情形时N在8至16左右。混合算法将原数据集划分成诸多个小的数据集，分别寻找每块中的最小值，然后再将每块得到的结果最终归约到一个值中。这种方法和并行归约的思想非常相似，但同时又省略了并行归约中的多次迭代。代码更新如下：\n\n```C\n#define REDUCTION_SIZE 8\n#define REDUCTION_SIZE_BIT_SHIFT 3\n#define MAX_ACTIVE_REDUCTIONS ((MAX_NUM_LISTS) / (REDUCTION_SIZE))\n\n__device__ void merge_array(const u32 *const src_array, \n                            u32 *const dest_array, \n                            const u32 num_lists, \n                            const u32 num_elements, \n                            const u32 tid)\n{\n    //每个线程都从原数组中读入一个数据，用作首次比较\n    u32 data = src_array[tid];\n    \n    //当前线程所在的数据块编号（8个线程为一组，每个线程处理一个列表）\n    const u32 s_idx = tid >> REDUCTION_SIZE_BIT_SHIFT;\n    \n    //首次进行分别归约的数据块总数\n    const u32 num_reductions = num_lists >> REDUCTION_SIZE_BIT_SHIFT;\n    const u32 num_elements_per_list = num_elements / num_lists;\n    \n    //在共享内存中创建一个列表，指向每个线程当前所在的元素，并初始化为0\n    __shared__ u32 list_indexes[MAX_NUM_LISTS];\n    list_indexes[tid] = 0;\n    \n    //遍历所有数据\n    for(u32 i=0; i<num_elements; i++)\n    {\n        //每个数据块在内部归约后都会产生一个相应的最小值\n        //在共享内存中开辟一个列表，用来保存每组的最小值\n\t\t__shared__ u32 min_val[MAX_ACTIVE_REDUCTIONS];\n         __shared__ u32 min_tid;\n        \n        //初始化每个数据块的内部最小值\n        if(tid < num_lists)\n        {\n\t\t\tmin_val[s_idx] = 0xFFFFFFFF;\n             min_tid = 0xFFFFFFFF;\n        }\n        __syncthreads();\n        \n        //将当前线程的数据与所处数据块的最小值进行比较，并保留较小的那一个\n        atomicMin(&min_val[s_idx], data);\n        \n        //进行归约的数据块总数不为零时\n        if(num_reductions > 0)\n        {\n            //确保每个线程都已经将上一步比较操作完成\n\t\t\t__syncthreads();\n            \n             //将每个数据块产生的最小值与零号数据块的最小值进行比较，保留较小的那一个\n             if(tid < num_reductions)\n             {\n\t\t\t\tatomicMin(&min_val[0], min_val[tid]);\n                  __syncthreads();\n             }\n            \n             //如果当前线程的数据等于此次比较保留的最小值，记录最小线程号\n             if(data == min_val[0])\n             {\n\t\t\t\tatomicMin(&min_tid, tid);\n             }\n             //确保上一步操作每个线程都已经完成，才能执行下一句\n             __syncthreads();\n            \n            //如果当前线程号恰为记录下的最小线程号\n            if(tid == min_tid)\n            {\n                 //当前所指元素后移一位\n\t\t\t\tlist_indexes[tid]++;\n                \n                 //将结果保存入结果数组\n                  dest_array[i] = data;\n                 \n                  //若该线程对应的列表尚未被处理完\n                  if(list_indexes[tid] < num_elements_per_list)\n                      //更新该线程的data，进行下一轮比较\n                      data = src_array[tid + (list_indexes[tid] * num_lists)];\n                  else\n                      data = 0xFFFFFFFF;\n            }\n            __syncthreads();\n        }\n    }\n}\n```\n\n​\t注意到：\n\n​\t1）原来的min_val由单一的数据扩展成为一个共享数据的数组，这是因为每个独立的线程都需要从它对应的数据集中获取当前的最小值来进行内部比较。每个最小值都是一个32位的数值，因此可以存储在独立的共享内存存储体中。\n\n​\t2）内核函数中的REDUCTION_SIZE的值被设置成8，意味着每个数据块中包含8个数据，程序分别找出每个数据块的最小值，然后再在这些最小值中寻找最终的最小值。\n\n​\t3）内核函数中最重要的一个变化是，只有每次比较的最小值所对应的那个线程的data才会更新，其他线程的data都不会更新。而在之前的内核函数中，每轮比较开始，所有线程都会从对应的列表中重新读入data 的值，随着N的增大，这将变得越来越低效。\n\n## 2.2.5 总结\n\n​\t1）共享内存允许同一个线程块中的线程读写同一段内存，但线程看不到也无法修改其他线程块的共享内存。\n\n​\t2）共享内存的缓冲区驻留在物理GPU上，所以访问时的延迟远低于访问普通缓冲区的延迟，因此除了使用寄存器，还应更有效地使用共享内存，尤其当数据有重复利用，或全局内存合并，或线程间有共享数据的时候。\n\n​\t3）编写代码时，将关键字_shared__添加到声明中，使得该变量留驻在共享内存中，并且线程块中的每个线程都可以共享这块内存，使得一个线程块中的多个线程能够在计算上进行通信和协作。\n\n​\t4）调用 __syncthreads() 函数来实现线程的同步操作，尤其要注意确保在读取共享内存之前，想要写入的操作都已经完成。另外还需要注意，切不可将这个函数放置在发散分支（某些线程需要执行，而其他线程不需要执行），因为除非线程块中的每个线程都执行了该函数，没有任何线程能够执行之后的指令，从而导致死锁。\n\n​\t5）不妨尝试使用共享内存实现矩阵乘法的优化。\n\n > Author: 潘薇鸿\n > PostDate: 2018.11.25\n\n","slug":"cuda","published":1,"updated":"2019-05-12T02:30:58.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvkbrn140016jwuuvv9r6qyp","content":"<h1 id=\"CUDA-内存管理-一\"><a href=\"#CUDA-内存管理-一\" class=\"headerlink\" title=\"CUDA 内存管理(一)\"></a>CUDA 内存管理(一)</h1><h2 id=\"一、寄存器\"><a href=\"#一、寄存器\" class=\"headerlink\" title=\"一、寄存器\"></a>一、寄存器</h2><p>​    GPU的每个SM（流多处理器）都有上千个寄存器，每个SM都可以看作是一个多线程的CPU核，但与一般的CPU拥有二、四、六或八个核不同，一个GPU可以有<strong>N个SM核</strong>；同样，与一般的CPU核支持一到两个硬件线程不同，每个SM核可能有<strong>8~192个SP</strong>（流处理器），亦即每个SM能同时支持这么多个硬件线程。事实上，一台GPU设备的所有SM中活跃的线程数目通常数以万计。</p>\n<h3 id=\"1-1-寄存器映射方式\"><a href=\"#1-1-寄存器映射方式\" class=\"headerlink\" title=\"1.1 寄存器映射方式\"></a>1.1 寄存器映射方式</h3><p>​    <strong>CPU处理多线程</strong>：进行上下文切换，使用寄存器重命名机制，将当前所有寄存器的状态保存到栈（系统内存），再从栈中恢复当前需要执行的新线程在上一次的执行状态。这些操作通常花费上百个CPU时钟周期，有效工作吞吐量低。</p>\n<p>​    <strong>GPU处理多线程</strong>：与CPU相反，GPU利用多线程隐藏了内存获取与指令执行带来的延迟；此外，GPU不再使用寄存器重命名机制，而是尽可能为每个线程分配寄存器，从而上下文切换就变成了寄存器组选择器（或指针）的更新，几乎是零开销。</p>\n<h3 id=\"1-2-寄存器空间大小\"><a href=\"#1-2-寄存器空间大小\" class=\"headerlink\" title=\"1.2 寄存器空间大小\"></a>1.2 寄存器空间大小</h3><p>​    每个SM可提供的寄存器空间大小分别有8KB、16KB、32KB和64KB，每个线程中的每个变量占用一个寄存器，因而总共会占用N个寄存器，N代表调度的线程数量。当线程块上的寄存器数目是允许的最大值时，每个SM会只处理一个线程块。</p>\n<h3 id=\"1-3-SM调度线程、线程块\"><a href=\"#1-3-SM调度线程、线程块\" class=\"headerlink\" title=\"1.3 SM调度线程、线程块\"></a>1.3 SM调度线程、线程块</h3><p>​    由于大多数内核对寄存器的需求量很低，所以可以通过降低寄存器的需求量来增加SM上线程块的调度数量，从而提高运行的线程总数，根据线程级并行<strong>“占用率越高，程序运行越快”</strong>，可以实现运行效率的优化。当线程级并行（<em>Thread-Level Parallelism</em>，TLP）足以隐藏存储延迟时会达到一个临界点，此后想要继续提高程序性能，可以在单个线程中实现指令级的并行（<em>Instruction-Level Parallelism</em>，ILP），即单线程处理多数据。</p>\n<p>​    但在另一方面，每个SM所能调度的线程总量是有限制的，因此当线程总量达到最大时，再减少寄存器的使用量就无法达到提高占有率的目的（如下表中寄存器数目由20减小为16，线程块调度数量不变），所以在这种情况下，应增加寄存器的使用量到临界值。</p>\n<img src=\"1.png\">\n\n<h3 id=\"1-4-寄存器优化方式\"><a href=\"#1-4-寄存器优化方式\" class=\"headerlink\" title=\"1.4 寄存器优化方式\"></a>1.4 寄存器优化方式</h3><p>​    1）将中间结果累积在寄存器而非全局内存中。尽量避免全局内存的写操作，因为如果操作聚集到同一块内存上，就会强制硬件对内存的操作序列化，导致严重的性能降低；</p>\n<p>​    2）循环展开。循环一般非常低效，因为它们会产生分支，造成流水线停滞。</p>\n<h3 id=\"1-5-总结\"><a href=\"#1-5-总结\" class=\"headerlink\" title=\"1.5 总结\"></a>1.5 总结</h3><p>​    使用寄存器可以有效消除内存访问，或提供额外的ILP，以此实现GPU内核函数的加速，这是最为有效的方法之一。</p>\n<h2 id=\"二、共享内存\"><a href=\"#二、共享内存\" class=\"headerlink\" title=\"二、共享内存\"></a>二、共享内存</h2><h3 id=\"2-1-基本概念\"><a href=\"#2-1-基本概念\" class=\"headerlink\" title=\"2.1 基本概念\"></a>2.1 基本概念</h3><p>​    1、共享内存实际上是可以受用户控制的一级缓存，每个SM中的一级缓存和共享内存共用一个64KB的内存段。</p>\n<p>​    2、共享内存的延迟很低，大约有1.5TB/s的带宽，而全局内存仅为160GB/s，换言之，有效利用共享内存有可能获得7倍的加速比。但它的速度依然只有寄存器的十分之一，并且共享内存的速度几乎在所有GPU中都相同，因为它由核时钟频率驱动。</p>\n<p>​    3、只有当数据重复利用、全局内存合并，或者线程之间有共享数据（例如同时访问相同地址的存储体）的时候使用共享内存才更合适，否则将数据直接从全局内存加载到寄存器性能会更好。</p>\n<p>​    4、共享内存是基于存储体切换的架构（<em>bank-switched architecture</em>），费米架构的设备上有32个存储体。无论有多少线程发起操作，<strong>每个</strong>存储体<strong>每个</strong>周期只执行<strong>一次</strong>操作。因此，如果线程束中的每个线程各访问一个存储体，那么所有线程的操作都可以在一个周期内同时执行，且所有操作都是独立互不影响的。此外，如果所有线程同时访问同一地址的存储体，会触发一个广播机制到线程束中的每个线程中。但是，如果是其他的访问方式，线程访问共享内存就需要排队，即一个线程访问时，其他线程将阻塞闲置。因此很重要的一点时，应该尽可能地获得<strong>零存储体冲突</strong>的共享内存访问。</p>\n<h3 id=\"2-2-Example：使用共享内存排序\"><a href=\"#2-2-Example：使用共享内存排序\" class=\"headerlink\" title=\"2.2 Example：使用共享内存排序\"></a>2.2 Example：使用共享内存排序</h3><h2 id=\"2-2-1-归并排序\"><a href=\"#2-2-1-归并排序\" class=\"headerlink\" title=\"2.2.1 归并排序\"></a>2.2.1 归并排序</h2><p>​    假设待排序的数据集大小为N，现将数据集进行划分。根据归并排序的划分原则，最后每个数据包中只有两个数值需要排序，因此，在这一阶段，最大并行度可达到 $N \\over 2$ 个独立线程。例如，处理一个大小为512KB的数据集，共有128K个32位的元素，那么最多可以使用的线程个数为64K个（N=128K，N/2=64K），假设GPU上有16个SM，每个SM最多支持1536个线程，那么每个GPU上最多可以支持24K个线程，因此，按照这样划分，64K的数据对只需要2.5次迭代即可完成排序操作。</p>\n<p>​    但是，如果采用上述划分排序方式再进行合并，我们需要从每个排好序的数据集中读出元素，对于一个64K的集合，需要64K次读操作，即从内存中获取256MB的数据，显然当数据集很大的时候不合适。</p>\n<p>​    因此，我们采用通过限制对原始问题的迭代次数，通过基于共享内存的分解方式来获得更好的合并方案。因为在费米架构的设备上有32个存储体，即对应32个线程，所以当需要的线程数量减少为32（一个线程束）时，停止迭代，于是共需要线程束4K个（128K/32=4K），又因为GPU上有16个SM，所以这将为每个SM分配到256个线程束。然而由于费米架构设备上的每个SM最多只能同时执行48个线程束，因此多个块将被循环访问。</p>\n<p>​    通过将数据集以每行32个元素的方式在共享内存中进行分布，每列为一个存储体，即可得到零存储体冲突的内存访问，然后对每一列实施相同的排序算法。（或者也可以理解为桶排序呀）</p>\n<p>​    然后再进行列表的合并。</p>\n<h2 id=\"2-2-2-合并列表\"><a href=\"#2-2-2-合并列表\" class=\"headerlink\" title=\"2.2.2 合并列表\"></a>2.2.2 合并列表</h2><p>​    先从串行合并任意数目的有序列表看起：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_array</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, <span class=\"comment\">//待排序数组</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 u32 *<span class=\"keyword\">const</span> dest_array, <span class=\"comment\">//排序后的数组</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"keyword\">const</span> u32 num_lists, <span class=\"comment\">//列表总数</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"keyword\">const</span> u32 num_elements)</span> <span class=\"comment\">//数据总数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);<span class=\"comment\">//每个列表中的数据个数</span></span><br><span class=\"line\">    u32 list_indexes[MAX_NUM_LISTS]; <span class=\"comment\">//所有列表当前所在的元素下标</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 <span class=\"built_in\">list</span> = <span class=\"number\">0</span>; <span class=\"built_in\">list</span> &lt; num_lists; <span class=\"built_in\">list</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tlist_indexes[<span class=\"built_in\">list</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tdest_array[i] = find_min(scr_array, </span><br><span class=\"line\">                                 list_indexes, </span><br><span class=\"line\">                                 num_lists, </span><br><span class=\"line\">                                 num_elements_per_list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">u32 <span class=\"title\">find_min</span><span class=\"params\">(<span class=\"keyword\">const</span> u32*cosnt src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             u32 *<span class=\"keyword\">const</span> list_indexes, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">const</span> u32 num_elements_per_list)</span><span class=\"comment\">//寻找num_lists个元素中的最小值</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    u32 min_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">    u32 min_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_lists; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(list_indexes[i] &lt; num_elements_per_list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> u32 src_idx = i + (list_indexes[i]*num_lists);</span><br><span class=\"line\">             <span class=\"keyword\">const</span> u32 data = src_array[src_idx];</span><br><span class=\"line\">        </span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(data &lt;= min_val)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t\tmin_val = data;</span><br><span class=\"line\">           \t     min_idx = i;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    list_indexes[min_idx]++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    将上述算法用GPU实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">global__ <span class=\"keyword\">void</span> <span class=\"title\">gpu_sort_array_array</span><span class=\"params\">(u32 *<span class=\"keyword\">const</span> data, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">const</span> u32 num_elements)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 tid = (blockIdx.x * blockDim.x) + threadIdx.x;</span><br><span class=\"line\">    __shared__ u32 sort_tmp[NUM_ELEM];</span><br><span class=\"line\">    __shared__ u32 sort_tmp_1[NUM_ELEM];</span><br><span class=\"line\">    </span><br><span class=\"line\">    copy_data_to_shared(data, sort_tmp, num_lists, num_elements, tid);</span><br><span class=\"line\">    radix_sort2(sort_tmp, num_lists, num_elements, tid, sort_tmp_1);</span><br><span class=\"line\">    merge_array6(sort_tmp, data, num_lists, num_elements, tid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    第一个函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">copy_data_to_shared</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> data, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    u32 *sort_tmp, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tsort_tmp[i+tid] = data[i+tid]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    该函数中，程序按行将数据从全局内存读入共享内存。当函数调用一个子函数并传入参数时，这些参数必须以某种方式提供给被调用的函数，有两种方法可以采用。一种是通过寄存器传递所需的值，另一种方法是创建一个名为“栈帧”的内存区，但这种方法非常地不高效。出于这一原因，我们需要重新修改合并的程序(merge_array)，以避免函数调用，修改后程序如下（单线程）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array1</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t__shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    </span><br><span class=\"line\">    lists_indexes[tid] = <span class=\"number\">0</span>;<span class=\"comment\">//从每个列表的第一个元素开始</span></span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//单线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_elements; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tu32 min_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             u32 min_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(u32 <span class=\"built_in\">list</span> = <span class=\"number\">0</span>; <span class=\"built_in\">list</span> &lt; num_lists; <span class=\"built_in\">list</span>++)</span><br><span class=\"line\">   \t\t   &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(list_indexes[<span class=\"built_in\">list</span>] &lt; num_elements_per_list)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t   <span class=\"keyword\">const</span> u32 src_idx = i + (list_indexes[i]*num_lists);</span><br><span class=\"line\">             \t<span class=\"keyword\">const</span> u32 data = src_array[src_idx];</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(data &lt;= min_val)</span><br><span class=\"line\">        \t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tmin_val = data;</span><br><span class=\"line\">           \t     \t min_idx = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          list_indexes[min_idx]++;</span><br><span class=\"line\">          dest_array[i]=min_val;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这里只用一个线程进行合并，但显然，为了获得更好的性能，一个线程是远远不够的。因为数据被写到一个单一的列表中，所以多个线程必须进行某种形式的合作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array6</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//每个列表分到的元素个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建一个共享列表数组，用来储存当前线程所访问的列表元素下标</span></span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建所有线程共享的最小值与最小值线程号</span></span><br><span class=\"line\">    __shared__ u32 min_val;</span><br><span class=\"line\">    __shared__ u32 min_tid;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        u32 data;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前列表还未被读完，则从中读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list);</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"comment\">//计算出当前元素在原数组中的下标</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> u32 src_idx = tid + (list_indexes[tid] * num_lists);</span><br><span class=\"line\">             data = src_array[src_idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tdata = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//用零号线程来初始化最小值与最小值线程号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tmin_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             min_tid = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//让所有线程都尝试将它们现在手上有的值写入min_val，但只有最小的数据会被保留</span></span><br><span class=\"line\">        <span class=\"comment\">//利用__syncthreads()确保每个线程都执行了该操作</span></span><br><span class=\"line\">        atomicMin(&amp;min_val, data);</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//在所有data==min_val的线程中，选取最小线程号写入min_tid</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min_val == data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tatomicMin(&amp;min_tid, tid);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将满足要求的线程所在列表的当前元素往后移一位，进行下一轮比较</span></span><br><span class=\"line\">        <span class=\"comment\">//并将筛选结果存入结果数组dest_array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == min_tid)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tlist_indexes[tid]++;</span><br><span class=\"line\">             dest_array[i] = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    上面的函数中将num_lists个线程进行合并操作，但只用了一个线程一次将结果写入结果数据数组中，保证了结果的正确性，不会引起线程间的冲突。</p>\n<p>​    其中使用到了 atomicMin 函数。每个线程以从列表中获取的数据作为入参调用该函数，取代了原先单线程访问列表中所有元素并找出最小值的操作。当每个线程调用 atomicMin 函数时，线程读取保存在共享内存中的最小值并于当前线程中的值进行比较，然后把比较结果重新写回最小值对应的共享内存中，同时更新最小值对应的线程号。然而，由于列表中的数据可能会重复，因此可能出现多个线程的值均为最小值的情况，保留的线程号却各不相同。因此需要执行第二步操作，保证保留的线程号为最小线程号。</p>\n<p>​    虽然这种方法的优化效果很显著，但它也有一定的劣势。例如，atomicMin函数只能用在计算能力为1.2以上的设备上；另外，aotomicMin函数只支持整数型运算，但现实世界中的问题通常是基于浮点运算的，因此在这种情况下，我们需要寻找新的解决方法。</p>\n<h2 id=\"2-2-3-并行归约\"><a href=\"#2-2-3-并行归约\" class=\"headerlink\" title=\"2.2.3 并行归约\"></a>2.2.3 并行归约</h2><p>​    并行归约适用于许多问题，求最小值只是其中的一种。它使用数据集元素数量一半的线程，每个线程将当前线程对应的元素与另一个元素进行比较，计算两者之间的最小值，并将得到的最小值移到前面。每进行一次比较，线程数减少一半，如此反复直到只剩一个元素为止，这个元素就是需要的最小值。</p>\n<p>​    在选择比较元素的时候，应该尽量避免选择同一个线程束中的元素进行比较，因为这会明显地导致线程束内产生分支，而每个分支都将使SM做双倍的工作，继而影响程序的性能。因此我们选择将线程束中的元素与另一半数据集中的元素进行比较。如下图，阴影部分表示当前活跃的线程。</p>\n<img src=\"2.png\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array5</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">    </span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    __shared__ u32 reduction_val[MAX_NUM_LISTS];</span><br><span class=\"line\">    __shared__ u32 reduction_idx[MAX_NUM_LISTS];</span><br><span class=\"line\">    </span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    reduction_val[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    reduction_idx[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tu32 tid_max = num_lists &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//最大线程数为列表总数的一半</span></span><br><span class=\"line\">         u32 data;<span class=\"comment\">//使用寄存器可以提高运行效率，将对共享内存的写操作次数减少为1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//当列表中还有未处理完的元素时</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"comment\">//计算该元素在原数组中的位置</span></span><br><span class=\"line\">\t\t\tcosnst u32 src_idx = tid + (list_indexes[tid] * num_lists);</span><br><span class=\"line\">             data = src_array[src_idx];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"comment\">//若当前列表已经处理完，将data赋值最大</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tdata = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将当前元素及线程号写入共享内存</span></span><br><span class=\"line\">        reduction_val[tid] = data;</span><br><span class=\"line\">        reduction_idx[tid] = tid;</span><br><span class=\"line\">        __syncthreads;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//当前活跃的线程数多于一个时</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tid_max!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tid &lt; tid_max)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//将当前线程中的元素与另一半数据集中的对应元素进行比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> u32 val2_idx = tid + tid_max;</span><br><span class=\"line\">                 <span class=\"keyword\">const</span> u32 val2 = reduction_val[val2_idx];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 <span class=\"comment\">//最后保留较小的那个元素</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(reduction_val[tid] &gt; val2)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">\t\t\t\t\treduction_val[tid] = val2;</span><br><span class=\"line\">                      reduction_idx[tid] = reduction_idx[val_idx];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//线程数减半，进入下一轮循环</span></span><br><span class=\"line\">            tid_max &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            __syncthreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//在零号线程中将结果写入结果数组，并将相应线程所指的元素后移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tlist_indexes[reduction_idx[<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">             dest_array[i] = reduction_val[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    同样，这种方法也在共享内存中创建了一个临时的列表 list_indexes 用来保存每次循环中从 num_list 个数据集列表中选取出来进行比较的数据。如果进行合并的列表已经为空，那么就将临时列表中的对应数据区赋最大值0xFFFFFFFF。而每轮while循环后，活跃的线程数都将减少一半，直到最后只剩一个活跃的线程，亦即零号线程。最后将结果复制到结果数组中并将最小值所对应的列表索引加一，以确保元素不会被处理两次。</p>\n<h2 id=\"2-2-4-混合算法\"><a href=\"#2-2-4-混合算法\" class=\"headerlink\" title=\"2.2.4 混合算法\"></a>2.2.4 混合算法</h2><p>​    在了解atomicMin函数和并行归约两种方案后，我们可以利用这两种算法各自的优点，创造出一种新的混合方案。</p>\n<p>​    简单的1~N个数据归约的一个主要问题就是当N增大时，程序的速度先变快再变慢，达到最高效的情形时N在8至16左右。混合算法将原数据集划分成诸多个小的数据集，分别寻找每块中的最小值，然后再将每块得到的结果最终归约到一个值中。这种方法和并行归约的思想非常相似，但同时又省略了并行归约中的多次迭代。代码更新如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDUCTION_SIZE 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDUCTION_SIZE_BIT_SHIFT 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_ACTIVE_REDUCTIONS ((MAX_NUM_LISTS) / (REDUCTION_SIZE))</span></span><br><span class=\"line\"></span><br><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//每个线程都从原数组中读入一个数据，用作首次比较</span></span><br><span class=\"line\">    u32 data = src_array[tid];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//当前线程所在的数据块编号（8个线程为一组，每个线程处理一个列表）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 s_idx = tid &gt;&gt; REDUCTION_SIZE_BIT_SHIFT;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//首次进行分别归约的数据块总数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 num_reductions = num_lists &gt;&gt; REDUCTION_SIZE_BIT_SHIFT;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 num_elements_per_list = num_elements / num_lists;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在共享内存中创建一个列表，指向每个线程当前所在的元素，并初始化为0</span></span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//遍历所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每个数据块在内部归约后都会产生一个相应的最小值</span></span><br><span class=\"line\">        <span class=\"comment\">//在共享内存中开辟一个列表，用来保存每组的最小值</span></span><br><span class=\"line\">\t\t__shared__ u32 min_val[MAX_ACTIVE_REDUCTIONS];</span><br><span class=\"line\">         __shared__ u32 min_tid;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化每个数据块的内部最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid &lt; num_lists)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tmin_val[s_idx] = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             min_tid = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将当前线程的数据与所处数据块的最小值进行比较，并保留较小的那一个</span></span><br><span class=\"line\">        atomicMin(&amp;min_val[s_idx], data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//进行归约的数据块总数不为零时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num_reductions &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保每个线程都已经将上一步比较操作完成</span></span><br><span class=\"line\">\t\t\t__syncthreads();</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"comment\">//将每个数据块产生的最小值与零号数据块的最小值进行比较，保留较小的那一个</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(tid &lt; num_reductions)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">\t\t\t\tatomicMin(&amp;min_val[<span class=\"number\">0</span>], min_val[tid]);</span><br><span class=\"line\">                  __syncthreads();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"comment\">//如果当前线程的数据等于此次比较保留的最小值，记录最小线程号</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(data == min_val[<span class=\"number\">0</span>])</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">\t\t\t\tatomicMin(&amp;min_tid, tid);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">//确保上一步操作每个线程都已经完成，才能执行下一句</span></span><br><span class=\"line\">             __syncthreads();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//如果当前线程号恰为记录下的最小线程号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tid == min_tid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//当前所指元素后移一位</span></span><br><span class=\"line\">\t\t\t\tlist_indexes[tid]++;</span><br><span class=\"line\">                </span><br><span class=\"line\">                 <span class=\"comment\">//将结果保存入结果数组</span></span><br><span class=\"line\">                  dest_array[i] = data;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                  <span class=\"comment\">//若该线程对应的列表尚未被处理完</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list)</span><br><span class=\"line\">                      <span class=\"comment\">//更新该线程的data，进行下一轮比较</span></span><br><span class=\"line\">                      data = src_array[tid + (list_indexes[tid] * num_lists)];</span><br><span class=\"line\">                  <span class=\"keyword\">else</span></span><br><span class=\"line\">                      data = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            __syncthreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    注意到：</p>\n<p>​    1）原来的min_val由单一的数据扩展成为一个共享数据的数组，这是因为每个独立的线程都需要从它对应的数据集中获取当前的最小值来进行内部比较。每个最小值都是一个32位的数值，因此可以存储在独立的共享内存存储体中。</p>\n<p>​    2）内核函数中的REDUCTION_SIZE的值被设置成8，意味着每个数据块中包含8个数据，程序分别找出每个数据块的最小值，然后再在这些最小值中寻找最终的最小值。</p>\n<p>​    3）内核函数中最重要的一个变化是，只有每次比较的最小值所对应的那个线程的data才会更新，其他线程的data都不会更新。而在之前的内核函数中，每轮比较开始，所有线程都会从对应的列表中重新读入data 的值，随着N的增大，这将变得越来越低效。</p>\n<h2 id=\"2-2-5-总结\"><a href=\"#2-2-5-总结\" class=\"headerlink\" title=\"2.2.5 总结\"></a>2.2.5 总结</h2><p>​    1）共享内存允许同一个线程块中的线程读写同一段内存，但线程看不到也无法修改其他线程块的共享内存。</p>\n<p>​    2）共享内存的缓冲区驻留在物理GPU上，所以访问时的延迟远低于访问普通缓冲区的延迟，因此除了使用寄存器，还应更有效地使用共享内存，尤其当数据有重复利用，或全局内存合并，或线程间有共享数据的时候。</p>\n<p>​    3）编写代码时，将关键字_shared__添加到声明中，使得该变量留驻在共享内存中，并且线程块中的每个线程都可以共享这块内存，使得一个线程块中的多个线程能够在计算上进行通信和协作。</p>\n<p>​    4）调用 __syncthreads() 函数来实现线程的同步操作，尤其要注意确保在读取共享内存之前，想要写入的操作都已经完成。另外还需要注意，切不可将这个函数放置在发散分支（某些线程需要执行，而其他线程不需要执行），因为除非线程块中的每个线程都执行了该函数，没有任何线程能够执行之后的指令，从而导致死锁。</p>\n<p>​    5）不妨尝试使用共享内存实现矩阵乘法的优化。</p>\n<blockquote>\n<p>Author: 潘薇鸿<br>PostDate: 2018.11.25</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CUDA-内存管理-一\"><a href=\"#CUDA-内存管理-一\" class=\"headerlink\" title=\"CUDA 内存管理(一)\"></a>CUDA 内存管理(一)</h1><h2 id=\"一、寄存器\"><a href=\"#一、寄存器\" class=\"headerlink\" title=\"一、寄存器\"></a>一、寄存器</h2><p>​    GPU的每个SM（流多处理器）都有上千个寄存器，每个SM都可以看作是一个多线程的CPU核，但与一般的CPU拥有二、四、六或八个核不同，一个GPU可以有<strong>N个SM核</strong>；同样，与一般的CPU核支持一到两个硬件线程不同，每个SM核可能有<strong>8~192个SP</strong>（流处理器），亦即每个SM能同时支持这么多个硬件线程。事实上，一台GPU设备的所有SM中活跃的线程数目通常数以万计。</p>\n<h3 id=\"1-1-寄存器映射方式\"><a href=\"#1-1-寄存器映射方式\" class=\"headerlink\" title=\"1.1 寄存器映射方式\"></a>1.1 寄存器映射方式</h3><p>​    <strong>CPU处理多线程</strong>：进行上下文切换，使用寄存器重命名机制，将当前所有寄存器的状态保存到栈（系统内存），再从栈中恢复当前需要执行的新线程在上一次的执行状态。这些操作通常花费上百个CPU时钟周期，有效工作吞吐量低。</p>\n<p>​    <strong>GPU处理多线程</strong>：与CPU相反，GPU利用多线程隐藏了内存获取与指令执行带来的延迟；此外，GPU不再使用寄存器重命名机制，而是尽可能为每个线程分配寄存器，从而上下文切换就变成了寄存器组选择器（或指针）的更新，几乎是零开销。</p>\n<h3 id=\"1-2-寄存器空间大小\"><a href=\"#1-2-寄存器空间大小\" class=\"headerlink\" title=\"1.2 寄存器空间大小\"></a>1.2 寄存器空间大小</h3><p>​    每个SM可提供的寄存器空间大小分别有8KB、16KB、32KB和64KB，每个线程中的每个变量占用一个寄存器，因而总共会占用N个寄存器，N代表调度的线程数量。当线程块上的寄存器数目是允许的最大值时，每个SM会只处理一个线程块。</p>\n<h3 id=\"1-3-SM调度线程、线程块\"><a href=\"#1-3-SM调度线程、线程块\" class=\"headerlink\" title=\"1.3 SM调度线程、线程块\"></a>1.3 SM调度线程、线程块</h3><p>​    由于大多数内核对寄存器的需求量很低，所以可以通过降低寄存器的需求量来增加SM上线程块的调度数量，从而提高运行的线程总数，根据线程级并行<strong>“占用率越高，程序运行越快”</strong>，可以实现运行效率的优化。当线程级并行（<em>Thread-Level Parallelism</em>，TLP）足以隐藏存储延迟时会达到一个临界点，此后想要继续提高程序性能，可以在单个线程中实现指令级的并行（<em>Instruction-Level Parallelism</em>，ILP），即单线程处理多数据。</p>\n<p>​    但在另一方面，每个SM所能调度的线程总量是有限制的，因此当线程总量达到最大时，再减少寄存器的使用量就无法达到提高占有率的目的（如下表中寄存器数目由20减小为16，线程块调度数量不变），所以在这种情况下，应增加寄存器的使用量到临界值。</p>\n<img src=\"1.png\">\n\n<h3 id=\"1-4-寄存器优化方式\"><a href=\"#1-4-寄存器优化方式\" class=\"headerlink\" title=\"1.4 寄存器优化方式\"></a>1.4 寄存器优化方式</h3><p>​    1）将中间结果累积在寄存器而非全局内存中。尽量避免全局内存的写操作，因为如果操作聚集到同一块内存上，就会强制硬件对内存的操作序列化，导致严重的性能降低；</p>\n<p>​    2）循环展开。循环一般非常低效，因为它们会产生分支，造成流水线停滞。</p>\n<h3 id=\"1-5-总结\"><a href=\"#1-5-总结\" class=\"headerlink\" title=\"1.5 总结\"></a>1.5 总结</h3><p>​    使用寄存器可以有效消除内存访问，或提供额外的ILP，以此实现GPU内核函数的加速，这是最为有效的方法之一。</p>\n<h2 id=\"二、共享内存\"><a href=\"#二、共享内存\" class=\"headerlink\" title=\"二、共享内存\"></a>二、共享内存</h2><h3 id=\"2-1-基本概念\"><a href=\"#2-1-基本概念\" class=\"headerlink\" title=\"2.1 基本概念\"></a>2.1 基本概念</h3><p>​    1、共享内存实际上是可以受用户控制的一级缓存，每个SM中的一级缓存和共享内存共用一个64KB的内存段。</p>\n<p>​    2、共享内存的延迟很低，大约有1.5TB/s的带宽，而全局内存仅为160GB/s，换言之，有效利用共享内存有可能获得7倍的加速比。但它的速度依然只有寄存器的十分之一，并且共享内存的速度几乎在所有GPU中都相同，因为它由核时钟频率驱动。</p>\n<p>​    3、只有当数据重复利用、全局内存合并，或者线程之间有共享数据（例如同时访问相同地址的存储体）的时候使用共享内存才更合适，否则将数据直接从全局内存加载到寄存器性能会更好。</p>\n<p>​    4、共享内存是基于存储体切换的架构（<em>bank-switched architecture</em>），费米架构的设备上有32个存储体。无论有多少线程发起操作，<strong>每个</strong>存储体<strong>每个</strong>周期只执行<strong>一次</strong>操作。因此，如果线程束中的每个线程各访问一个存储体，那么所有线程的操作都可以在一个周期内同时执行，且所有操作都是独立互不影响的。此外，如果所有线程同时访问同一地址的存储体，会触发一个广播机制到线程束中的每个线程中。但是，如果是其他的访问方式，线程访问共享内存就需要排队，即一个线程访问时，其他线程将阻塞闲置。因此很重要的一点时，应该尽可能地获得<strong>零存储体冲突</strong>的共享内存访问。</p>\n<h3 id=\"2-2-Example：使用共享内存排序\"><a href=\"#2-2-Example：使用共享内存排序\" class=\"headerlink\" title=\"2.2 Example：使用共享内存排序\"></a>2.2 Example：使用共享内存排序</h3><h2 id=\"2-2-1-归并排序\"><a href=\"#2-2-1-归并排序\" class=\"headerlink\" title=\"2.2.1 归并排序\"></a>2.2.1 归并排序</h2><p>​    假设待排序的数据集大小为N，现将数据集进行划分。根据归并排序的划分原则，最后每个数据包中只有两个数值需要排序，因此，在这一阶段，最大并行度可达到 $N \\over 2$ 个独立线程。例如，处理一个大小为512KB的数据集，共有128K个32位的元素，那么最多可以使用的线程个数为64K个（N=128K，N/2=64K），假设GPU上有16个SM，每个SM最多支持1536个线程，那么每个GPU上最多可以支持24K个线程，因此，按照这样划分，64K的数据对只需要2.5次迭代即可完成排序操作。</p>\n<p>​    但是，如果采用上述划分排序方式再进行合并，我们需要从每个排好序的数据集中读出元素，对于一个64K的集合，需要64K次读操作，即从内存中获取256MB的数据，显然当数据集很大的时候不合适。</p>\n<p>​    因此，我们采用通过限制对原始问题的迭代次数，通过基于共享内存的分解方式来获得更好的合并方案。因为在费米架构的设备上有32个存储体，即对应32个线程，所以当需要的线程数量减少为32（一个线程束）时，停止迭代，于是共需要线程束4K个（128K/32=4K），又因为GPU上有16个SM，所以这将为每个SM分配到256个线程束。然而由于费米架构设备上的每个SM最多只能同时执行48个线程束，因此多个块将被循环访问。</p>\n<p>​    通过将数据集以每行32个元素的方式在共享内存中进行分布，每列为一个存储体，即可得到零存储体冲突的内存访问，然后对每一列实施相同的排序算法。（或者也可以理解为桶排序呀）</p>\n<p>​    然后再进行列表的合并。</p>\n<h2 id=\"2-2-2-合并列表\"><a href=\"#2-2-2-合并列表\" class=\"headerlink\" title=\"2.2.2 合并列表\"></a>2.2.2 合并列表</h2><p>​    先从串行合并任意数目的有序列表看起：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_array</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, <span class=\"comment\">//待排序数组</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 u32 *<span class=\"keyword\">const</span> dest_array, <span class=\"comment\">//排序后的数组</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"keyword\">const</span> u32 num_lists, <span class=\"comment\">//列表总数</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"keyword\">const</span> u32 num_elements)</span> <span class=\"comment\">//数据总数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);<span class=\"comment\">//每个列表中的数据个数</span></span><br><span class=\"line\">    u32 list_indexes[MAX_NUM_LISTS]; <span class=\"comment\">//所有列表当前所在的元素下标</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 <span class=\"built_in\">list</span> = <span class=\"number\">0</span>; <span class=\"built_in\">list</span> &lt; num_lists; <span class=\"built_in\">list</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tlist_indexes[<span class=\"built_in\">list</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tdest_array[i] = find_min(scr_array, </span><br><span class=\"line\">                                 list_indexes, </span><br><span class=\"line\">                                 num_lists, </span><br><span class=\"line\">                                 num_elements_per_list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">u32 <span class=\"title\">find_min</span><span class=\"params\">(<span class=\"keyword\">const</span> u32*cosnt src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             u32 *<span class=\"keyword\">const</span> list_indexes, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">const</span> u32 num_elements_per_list)</span><span class=\"comment\">//寻找num_lists个元素中的最小值</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    u32 min_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">    u32 min_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_lists; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(list_indexes[i] &lt; num_elements_per_list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> u32 src_idx = i + (list_indexes[i]*num_lists);</span><br><span class=\"line\">             <span class=\"keyword\">const</span> u32 data = src_array[src_idx];</span><br><span class=\"line\">        </span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(data &lt;= min_val)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t\tmin_val = data;</span><br><span class=\"line\">           \t     min_idx = i;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    list_indexes[min_idx]++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    将上述算法用GPU实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">global__ <span class=\"keyword\">void</span> <span class=\"title\">gpu_sort_array_array</span><span class=\"params\">(u32 *<span class=\"keyword\">const</span> data, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     <span class=\"keyword\">const</span> u32 num_elements)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 tid = (blockIdx.x * blockDim.x) + threadIdx.x;</span><br><span class=\"line\">    __shared__ u32 sort_tmp[NUM_ELEM];</span><br><span class=\"line\">    __shared__ u32 sort_tmp_1[NUM_ELEM];</span><br><span class=\"line\">    </span><br><span class=\"line\">    copy_data_to_shared(data, sort_tmp, num_lists, num_elements, tid);</span><br><span class=\"line\">    radix_sort2(sort_tmp, num_lists, num_elements, tid, sort_tmp_1);</span><br><span class=\"line\">    merge_array6(sort_tmp, data, num_lists, num_elements, tid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    第一个函数的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">copy_data_to_shared</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> data, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    u32 *sort_tmp, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tsort_tmp[i+tid] = data[i+tid]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    该函数中，程序按行将数据从全局内存读入共享内存。当函数调用一个子函数并传入参数时，这些参数必须以某种方式提供给被调用的函数，有两种方法可以采用。一种是通过寄存器传递所需的值，另一种方法是创建一个名为“栈帧”的内存区，但这种方法非常地不高效。出于这一原因，我们需要重新修改合并的程序(merge_array)，以避免函数调用，修改后程序如下（单线程）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array1</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t__shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    </span><br><span class=\"line\">    lists_indexes[tid] = <span class=\"number\">0</span>;<span class=\"comment\">//从每个列表的第一个元素开始</span></span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//单线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(u32 i = <span class=\"number\">0</span>; i &lt; num_elements; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tu32 min_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             u32 min_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(u32 <span class=\"built_in\">list</span> = <span class=\"number\">0</span>; <span class=\"built_in\">list</span> &lt; num_lists; <span class=\"built_in\">list</span>++)</span><br><span class=\"line\">   \t\t   &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(list_indexes[<span class=\"built_in\">list</span>] &lt; num_elements_per_list)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t   <span class=\"keyword\">const</span> u32 src_idx = i + (list_indexes[i]*num_lists);</span><br><span class=\"line\">             \t<span class=\"keyword\">const</span> u32 data = src_array[src_idx];</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(data &lt;= min_val)</span><br><span class=\"line\">        \t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tmin_val = data;</span><br><span class=\"line\">           \t     \t min_idx = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          list_indexes[min_idx]++;</span><br><span class=\"line\">          dest_array[i]=min_val;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这里只用一个线程进行合并，但显然，为了获得更好的性能，一个线程是远远不够的。因为数据被写到一个单一的列表中，所以多个线程必须进行某种形式的合作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array6</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//每个列表分到的元素个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建一个共享列表数组，用来储存当前线程所访问的列表元素下标</span></span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//创建所有线程共享的最小值与最小值线程号</span></span><br><span class=\"line\">    __shared__ u32 min_val;</span><br><span class=\"line\">    __shared__ u32 min_tid;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        u32 data;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前列表还未被读完，则从中读取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list);</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"comment\">//计算出当前元素在原数组中的下标</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> u32 src_idx = tid + (list_indexes[tid] * num_lists);</span><br><span class=\"line\">             data = src_array[src_idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tdata = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//用零号线程来初始化最小值与最小值线程号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tmin_val = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             min_tid = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//让所有线程都尝试将它们现在手上有的值写入min_val，但只有最小的数据会被保留</span></span><br><span class=\"line\">        <span class=\"comment\">//利用__syncthreads()确保每个线程都执行了该操作</span></span><br><span class=\"line\">        atomicMin(&amp;min_val, data);</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//在所有data==min_val的线程中，选取最小线程号写入min_tid</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min_val == data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tatomicMin(&amp;min_tid, tid);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将满足要求的线程所在列表的当前元素往后移一位，进行下一轮比较</span></span><br><span class=\"line\">        <span class=\"comment\">//并将筛选结果存入结果数组dest_array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == min_tid)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tlist_indexes[tid]++;</span><br><span class=\"line\">             dest_array[i] = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    上面的函数中将num_lists个线程进行合并操作，但只用了一个线程一次将结果写入结果数据数组中，保证了结果的正确性，不会引起线程间的冲突。</p>\n<p>​    其中使用到了 atomicMin 函数。每个线程以从列表中获取的数据作为入参调用该函数，取代了原先单线程访问列表中所有元素并找出最小值的操作。当每个线程调用 atomicMin 函数时，线程读取保存在共享内存中的最小值并于当前线程中的值进行比较，然后把比较结果重新写回最小值对应的共享内存中，同时更新最小值对应的线程号。然而，由于列表中的数据可能会重复，因此可能出现多个线程的值均为最小值的情况，保留的线程号却各不相同。因此需要执行第二步操作，保证保留的线程号为最小线程号。</p>\n<p>​    虽然这种方法的优化效果很显著，但它也有一定的劣势。例如，atomicMin函数只能用在计算能力为1.2以上的设备上；另外，aotomicMin函数只支持整数型运算，但现实世界中的问题通常是基于浮点运算的，因此在这种情况下，我们需要寻找新的解决方法。</p>\n<h2 id=\"2-2-3-并行归约\"><a href=\"#2-2-3-并行归约\" class=\"headerlink\" title=\"2.2.3 并行归约\"></a>2.2.3 并行归约</h2><p>​    并行归约适用于许多问题，求最小值只是其中的一种。它使用数据集元素数量一半的线程，每个线程将当前线程对应的元素与另一个元素进行比较，计算两者之间的最小值，并将得到的最小值移到前面。每进行一次比较，线程数减少一半，如此反复直到只剩一个元素为止，这个元素就是需要的最小值。</p>\n<p>​    在选择比较元素的时候，应该尽量避免选择同一个线程束中的元素进行比较，因为这会明显地导致线程束内产生分支，而每个分支都将使SM做双倍的工作，继而影响程序的性能。因此我们选择将线程束中的元素与另一半数据集中的元素进行比较。如下图，阴影部分表示当前活跃的线程。</p>\n<img src=\"2.png\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array5</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_lists,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> u32 num_elements_per_list = (num_elements / num_lists);</span><br><span class=\"line\">    </span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    __shared__ u32 reduction_val[MAX_NUM_LISTS];</span><br><span class=\"line\">    __shared__ u32 reduction_idx[MAX_NUM_LISTS];</span><br><span class=\"line\">    </span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    reduction_val[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    reduction_idx[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    __syncthreads();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tu32 tid_max = num_lists &gt;&gt; <span class=\"number\">1</span>;<span class=\"comment\">//最大线程数为列表总数的一半</span></span><br><span class=\"line\">         u32 data;<span class=\"comment\">//使用寄存器可以提高运行效率，将对共享内存的写操作次数减少为1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//当列表中还有未处理完的元素时</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"comment\">//计算该元素在原数组中的位置</span></span><br><span class=\"line\">\t\t\tcosnst u32 src_idx = tid + (list_indexes[tid] * num_lists);</span><br><span class=\"line\">             data = src_array[src_idx];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        <span class=\"comment\">//若当前列表已经处理完，将data赋值最大</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tdata = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将当前元素及线程号写入共享内存</span></span><br><span class=\"line\">        reduction_val[tid] = data;</span><br><span class=\"line\">        reduction_idx[tid] = tid;</span><br><span class=\"line\">        __syncthreads;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//当前活跃的线程数多于一个时</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tid_max!=<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tid &lt; tid_max)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//将当前线程中的元素与另一半数据集中的对应元素进行比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> u32 val2_idx = tid + tid_max;</span><br><span class=\"line\">                 <span class=\"keyword\">const</span> u32 val2 = reduction_val[val2_idx];</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 <span class=\"comment\">//最后保留较小的那个元素</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(reduction_val[tid] &gt; val2)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">\t\t\t\t\treduction_val[tid] = val2;</span><br><span class=\"line\">                      reduction_idx[tid] = reduction_idx[val_idx];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//线程数减半，进入下一轮循环</span></span><br><span class=\"line\">            tid_max &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            __syncthreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//在零号线程中将结果写入结果数组，并将相应线程所指的元素后移一位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tlist_indexes[reduction_idx[<span class=\"number\">0</span>]]++;</span><br><span class=\"line\">             dest_array[i] = reduction_val[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    同样，这种方法也在共享内存中创建了一个临时的列表 list_indexes 用来保存每次循环中从 num_list 个数据集列表中选取出来进行比较的数据。如果进行合并的列表已经为空，那么就将临时列表中的对应数据区赋最大值0xFFFFFFFF。而每轮while循环后，活跃的线程数都将减少一半，直到最后只剩一个活跃的线程，亦即零号线程。最后将结果复制到结果数组中并将最小值所对应的列表索引加一，以确保元素不会被处理两次。</p>\n<h2 id=\"2-2-4-混合算法\"><a href=\"#2-2-4-混合算法\" class=\"headerlink\" title=\"2.2.4 混合算法\"></a>2.2.4 混合算法</h2><p>​    在了解atomicMin函数和并行归约两种方案后，我们可以利用这两种算法各自的优点，创造出一种新的混合方案。</p>\n<p>​    简单的1~N个数据归约的一个主要问题就是当N增大时，程序的速度先变快再变慢，达到最高效的情形时N在8至16左右。混合算法将原数据集划分成诸多个小的数据集，分别寻找每块中的最小值，然后再将每块得到的结果最终归约到一个值中。这种方法和并行归约的思想非常相似，但同时又省略了并行归约中的多次迭代。代码更新如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDUCTION_SIZE 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDUCTION_SIZE_BIT_SHIFT 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_ACTIVE_REDUCTIONS ((MAX_NUM_LISTS) / (REDUCTION_SIZE))</span></span><br><span class=\"line\"></span><br><span class=\"line\">__<span class=\"function\">device__ <span class=\"keyword\">void</span> <span class=\"title\">merge_array</span><span class=\"params\">(<span class=\"keyword\">const</span> u32 *<span class=\"keyword\">const</span> src_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            u32 *<span class=\"keyword\">const</span> dest_array, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 num_lists, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 num_elements, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> u32 tid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//每个线程都从原数组中读入一个数据，用作首次比较</span></span><br><span class=\"line\">    u32 data = src_array[tid];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//当前线程所在的数据块编号（8个线程为一组，每个线程处理一个列表）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 s_idx = tid &gt;&gt; REDUCTION_SIZE_BIT_SHIFT;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//首次进行分别归约的数据块总数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 num_reductions = num_lists &gt;&gt; REDUCTION_SIZE_BIT_SHIFT;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> u32 num_elements_per_list = num_elements / num_lists;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在共享内存中创建一个列表，指向每个线程当前所在的元素，并初始化为0</span></span><br><span class=\"line\">    __shared__ u32 list_indexes[MAX_NUM_LISTS];</span><br><span class=\"line\">    list_indexes[tid] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//遍历所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(u32 i=<span class=\"number\">0</span>; i&lt;num_elements; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//每个数据块在内部归约后都会产生一个相应的最小值</span></span><br><span class=\"line\">        <span class=\"comment\">//在共享内存中开辟一个列表，用来保存每组的最小值</span></span><br><span class=\"line\">\t\t__shared__ u32 min_val[MAX_ACTIVE_REDUCTIONS];</span><br><span class=\"line\">         __shared__ u32 min_tid;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//初始化每个数据块的内部最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tid &lt; num_lists)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tmin_val[s_idx] = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">             min_tid = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __syncthreads();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将当前线程的数据与所处数据块的最小值进行比较，并保留较小的那一个</span></span><br><span class=\"line\">        atomicMin(&amp;min_val[s_idx], data);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//进行归约的数据块总数不为零时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num_reductions &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//确保每个线程都已经将上一步比较操作完成</span></span><br><span class=\"line\">\t\t\t__syncthreads();</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"comment\">//将每个数据块产生的最小值与零号数据块的最小值进行比较，保留较小的那一个</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(tid &lt; num_reductions)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">\t\t\t\tatomicMin(&amp;min_val[<span class=\"number\">0</span>], min_val[tid]);</span><br><span class=\"line\">                  __syncthreads();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">             <span class=\"comment\">//如果当前线程的数据等于此次比较保留的最小值，记录最小线程号</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(data == min_val[<span class=\"number\">0</span>])</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">\t\t\t\tatomicMin(&amp;min_tid, tid);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">//确保上一步操作每个线程都已经完成，才能执行下一句</span></span><br><span class=\"line\">             __syncthreads();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//如果当前线程号恰为记录下的最小线程号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tid == min_tid)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//当前所指元素后移一位</span></span><br><span class=\"line\">\t\t\t\tlist_indexes[tid]++;</span><br><span class=\"line\">                </span><br><span class=\"line\">                 <span class=\"comment\">//将结果保存入结果数组</span></span><br><span class=\"line\">                  dest_array[i] = data;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                  <span class=\"comment\">//若该线程对应的列表尚未被处理完</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span>(list_indexes[tid] &lt; num_elements_per_list)</span><br><span class=\"line\">                      <span class=\"comment\">//更新该线程的data，进行下一轮比较</span></span><br><span class=\"line\">                      data = src_array[tid + (list_indexes[tid] * num_lists)];</span><br><span class=\"line\">                  <span class=\"keyword\">else</span></span><br><span class=\"line\">                      data = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            __syncthreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    注意到：</p>\n<p>​    1）原来的min_val由单一的数据扩展成为一个共享数据的数组，这是因为每个独立的线程都需要从它对应的数据集中获取当前的最小值来进行内部比较。每个最小值都是一个32位的数值，因此可以存储在独立的共享内存存储体中。</p>\n<p>​    2）内核函数中的REDUCTION_SIZE的值被设置成8，意味着每个数据块中包含8个数据，程序分别找出每个数据块的最小值，然后再在这些最小值中寻找最终的最小值。</p>\n<p>​    3）内核函数中最重要的一个变化是，只有每次比较的最小值所对应的那个线程的data才会更新，其他线程的data都不会更新。而在之前的内核函数中，每轮比较开始，所有线程都会从对应的列表中重新读入data 的值，随着N的增大，这将变得越来越低效。</p>\n<h2 id=\"2-2-5-总结\"><a href=\"#2-2-5-总结\" class=\"headerlink\" title=\"2.2.5 总结\"></a>2.2.5 总结</h2><p>​    1）共享内存允许同一个线程块中的线程读写同一段内存，但线程看不到也无法修改其他线程块的共享内存。</p>\n<p>​    2）共享内存的缓冲区驻留在物理GPU上，所以访问时的延迟远低于访问普通缓冲区的延迟，因此除了使用寄存器，还应更有效地使用共享内存，尤其当数据有重复利用，或全局内存合并，或线程间有共享数据的时候。</p>\n<p>​    3）编写代码时，将关键字_shared__添加到声明中，使得该变量留驻在共享内存中，并且线程块中的每个线程都可以共享这块内存，使得一个线程块中的多个线程能够在计算上进行通信和协作。</p>\n<p>​    4）调用 __syncthreads() 函数来实现线程的同步操作，尤其要注意确保在读取共享内存之前，想要写入的操作都已经完成。另外还需要注意，切不可将这个函数放置在发散分支（某些线程需要执行，而其他线程不需要执行），因为除非线程块中的每个线程都执行了该函数，没有任何线程能够执行之后的指令，从而导致死锁。</p>\n<p>​    5）不妨尝试使用共享内存实现矩阵乘法的优化。</p>\n<blockquote>\n<p>Author: 潘薇鸿<br>PostDate: 2018.11.25</p>\n</blockquote>\n"},{"title":"基于0-1乘性噪声的朴素图片降噪","date":"2019-05-10T16:00:00.000Z","author":"漆翔宇","_content":"\n\n\n# 基于0-1乘性噪声的图片降噪\n\n<br>\n\n## 项目内容\n\n给定3张受损图像，尝试恢复他们的原始图像。\n\n1. 原始图像包含1张黑白图像（A.png）和2张彩色图像（B.png, C.png）。\n2. 受损图像$X$是由原始图像$I \\in R ^ { H * W * C }$添加了不同噪声遮罩$M \\in R ^ { H * W * C }$得到的$x=I \\odot m$，其中$ \\odot $是逐元素相乘。\n3. 噪声遮罩仅包含{0,1}值。对应原图（A/B/C）的噪声遮罩的每行分别用0.8/0.4/0.6的噪声比率产生的，即噪声遮罩每个通道每行80%/40%/60%的像素值为0，其他为1。\n\n**评估误差为恢复图像与原始图像向量化后的差向量的2-范数，此误差越小越好。**\n\n<br>\n\n## 实现介绍\n\n<br>\n\n### 核心思想\n\n由于图片的像素点在空间上满足局部相似的特征，相邻的像素点通道值变化往往是平滑且有一定规则的。因此，我们可以用一个模型来拟合像素点通道值在空间上的关系。具体实现中，我们将图片切割成若干个小矩形块，然后使用一个二维线性回归模型来回归每个小矩形块中位置和像素通道值的函数关系。为了使结果更加平滑和可靠，我们采用了高斯函数作为基函数。\n\n<br>\n\n### 高斯函数\n\n当我们对一个 ss * ss 的像素矩阵块做回归的时候，我们要把所有没有被噪音损坏的点都提取出来。点位置用一个高斯核函数处理，这样原来的点坐标(x,y)就被转换成了$(e^{-\\frac{(x-mid)^2}{2}},e^{-\\frac{(y-mid)^2}{2}})$，在特征空间中用来刻画这个点与矩阵块中心的距离。这样，我们实际要回归的就是点心距与像素通道值的关系。\n\n这样做，主要是因为我们的局部性原理本身就是不带方向性的，所谓的局部性就是指临近的点存在某种平滑的变化关系。使用这样一个衡量距离的核函数，可以使得我们的回归结果更加平滑：\n\n![Non-Gaussian](1.png)![Gaussian](2.png)\n\n上图左边是用坐标直接回归，右图是坐标经过高斯核处理后回归的结果。可以看到左边有大量的不平滑的交错的黑白点，看起来很“脏”。右边由于采用了高斯函数处理过的表征距离关系的核函数，结果更加平滑，清晰。\n\nCODE : \n\n![CODE OF GAUSSIAN KERNEL](0.png)\n\n<br>\n\n### 训练\n\n提取完特征后的数据点拟合，就是一个简单的线性回归任务而已，我们采用最小二乘法回归。\n$$\nLoss = \\frac {\\Sigma_{i=0}^n(y_i-\\phi(x_i) * w^T)^2}{n}=\\frac{\\Sigma_{i=1}^{n}Loss_i}{n}\n$$\n使用随机梯度下降来最优化损失函数：\n$$\nw\\leftarrow w-\\eta * \\triangledown Loss_i=w+2\\eta(y_i-\\phi(x_i) * w^T) * \\phi(x_i)\n$$\n具体实现中，我们取步长=0.005，进行100轮随机梯度下降。\n\nCODE : \n\n![CODE OF TRAINING](3.png)\n\n​\t<br>\n\n### 迭代降噪\n\n我们前面提到了，我们要把图片切成若干个小矩形块，对每个小矩形块分别进行回归，那么这个小矩形块的尺寸取多少比较合适呢？\n\n我们先取ss=2尝试一下：\n\n![SS=2](4.png)\n\n噪音为0.8的时候，我们可以看到，如果取一个2*2的块，期望其中没损坏的通道只有0.8个，所以势必有大量的矩阵块里面都是全损坏的，这会使得一些全损坏的块得不到修复，产生大量的黑点。\n\n直接取ss=5：\n\n![SS=5](5.png)\n\n显然，黑块的数量变少了，但是实际上图片给人的颗粒赶很明显，更像是一堆模糊的马赛克拼图拼凑而成的。\n\n我们的解决办法是先取ss=2，对图片做恢复，然后将恢复的图像再用更大的ss来恢复。\n\n下面是用ss={2，3，4，5}迭代恢复四次的过程：\n\n![SS->2](6.png)![SS->2->3](7.png)\t\n\n![SS->2->3->4](8.png)![SS->2->3->4->5](9.png)\n\n可以看到黑点逐渐被消除，并且最后经过ss=5的回归后得到的结果在视觉效果上明显优于直接用ss=5进行回归。这种想法本质上是一种<Font color=red>贪心算法</Font>。先将损失密度小的局部块恢复好，再充分利用之前修复出来的信息将损失密度更大的块修复。\n\n<br>\n\n## 实验结果\n\n\n\nA （noise rate = 0.8）\n\n![NR=0.8_原图](10.png)![NR=0.8_修复图](9.png)\n\n\n\nB（noise rate = 0.4）\n\n![NR=0.4_原图](11.png)![NR=0.4_修复图](12.png)\n\n\n\nC（noise rate = 0.6）\n\n![NR=0.6_原图](13.png)![NR=0.6_修复图](14.png)\n\n\n\nD（根据原图自己生成，测试迭代过程中损失的减少）\n\n![误差测试](15.png)\n\n\n\n\n\n<br>\n\n## 潜在的优化展望\n\n1. 由于每个块的修复是独立的，可以考虑使用CPU多线程计算或者在GPU上用CUDA进行并行优化，加速整个修复过程。\n2. 使用更复杂的网络来拟合。\n3. 使用马尔科夫随机场的方法来做图像降噪。\n\n","source":"_posts/Image-Restoration-SimpleVersion.md","raw":"---\ntitle: 基于0-1乘性噪声的朴素图片降噪\ndate: 2019/5/11 \nauthor: 漆翔宇\ntags: \n    - AI\n---\n\n\n\n# 基于0-1乘性噪声的图片降噪\n\n<br>\n\n## 项目内容\n\n给定3张受损图像，尝试恢复他们的原始图像。\n\n1. 原始图像包含1张黑白图像（A.png）和2张彩色图像（B.png, C.png）。\n2. 受损图像$X$是由原始图像$I \\in R ^ { H * W * C }$添加了不同噪声遮罩$M \\in R ^ { H * W * C }$得到的$x=I \\odot m$，其中$ \\odot $是逐元素相乘。\n3. 噪声遮罩仅包含{0,1}值。对应原图（A/B/C）的噪声遮罩的每行分别用0.8/0.4/0.6的噪声比率产生的，即噪声遮罩每个通道每行80%/40%/60%的像素值为0，其他为1。\n\n**评估误差为恢复图像与原始图像向量化后的差向量的2-范数，此误差越小越好。**\n\n<br>\n\n## 实现介绍\n\n<br>\n\n### 核心思想\n\n由于图片的像素点在空间上满足局部相似的特征，相邻的像素点通道值变化往往是平滑且有一定规则的。因此，我们可以用一个模型来拟合像素点通道值在空间上的关系。具体实现中，我们将图片切割成若干个小矩形块，然后使用一个二维线性回归模型来回归每个小矩形块中位置和像素通道值的函数关系。为了使结果更加平滑和可靠，我们采用了高斯函数作为基函数。\n\n<br>\n\n### 高斯函数\n\n当我们对一个 ss * ss 的像素矩阵块做回归的时候，我们要把所有没有被噪音损坏的点都提取出来。点位置用一个高斯核函数处理，这样原来的点坐标(x,y)就被转换成了$(e^{-\\frac{(x-mid)^2}{2}},e^{-\\frac{(y-mid)^2}{2}})$，在特征空间中用来刻画这个点与矩阵块中心的距离。这样，我们实际要回归的就是点心距与像素通道值的关系。\n\n这样做，主要是因为我们的局部性原理本身就是不带方向性的，所谓的局部性就是指临近的点存在某种平滑的变化关系。使用这样一个衡量距离的核函数，可以使得我们的回归结果更加平滑：\n\n![Non-Gaussian](1.png)![Gaussian](2.png)\n\n上图左边是用坐标直接回归，右图是坐标经过高斯核处理后回归的结果。可以看到左边有大量的不平滑的交错的黑白点，看起来很“脏”。右边由于采用了高斯函数处理过的表征距离关系的核函数，结果更加平滑，清晰。\n\nCODE : \n\n![CODE OF GAUSSIAN KERNEL](0.png)\n\n<br>\n\n### 训练\n\n提取完特征后的数据点拟合，就是一个简单的线性回归任务而已，我们采用最小二乘法回归。\n$$\nLoss = \\frac {\\Sigma_{i=0}^n(y_i-\\phi(x_i) * w^T)^2}{n}=\\frac{\\Sigma_{i=1}^{n}Loss_i}{n}\n$$\n使用随机梯度下降来最优化损失函数：\n$$\nw\\leftarrow w-\\eta * \\triangledown Loss_i=w+2\\eta(y_i-\\phi(x_i) * w^T) * \\phi(x_i)\n$$\n具体实现中，我们取步长=0.005，进行100轮随机梯度下降。\n\nCODE : \n\n![CODE OF TRAINING](3.png)\n\n​\t<br>\n\n### 迭代降噪\n\n我们前面提到了，我们要把图片切成若干个小矩形块，对每个小矩形块分别进行回归，那么这个小矩形块的尺寸取多少比较合适呢？\n\n我们先取ss=2尝试一下：\n\n![SS=2](4.png)\n\n噪音为0.8的时候，我们可以看到，如果取一个2*2的块，期望其中没损坏的通道只有0.8个，所以势必有大量的矩阵块里面都是全损坏的，这会使得一些全损坏的块得不到修复，产生大量的黑点。\n\n直接取ss=5：\n\n![SS=5](5.png)\n\n显然，黑块的数量变少了，但是实际上图片给人的颗粒赶很明显，更像是一堆模糊的马赛克拼图拼凑而成的。\n\n我们的解决办法是先取ss=2，对图片做恢复，然后将恢复的图像再用更大的ss来恢复。\n\n下面是用ss={2，3，4，5}迭代恢复四次的过程：\n\n![SS->2](6.png)![SS->2->3](7.png)\t\n\n![SS->2->3->4](8.png)![SS->2->3->4->5](9.png)\n\n可以看到黑点逐渐被消除，并且最后经过ss=5的回归后得到的结果在视觉效果上明显优于直接用ss=5进行回归。这种想法本质上是一种<Font color=red>贪心算法</Font>。先将损失密度小的局部块恢复好，再充分利用之前修复出来的信息将损失密度更大的块修复。\n\n<br>\n\n## 实验结果\n\n\n\nA （noise rate = 0.8）\n\n![NR=0.8_原图](10.png)![NR=0.8_修复图](9.png)\n\n\n\nB（noise rate = 0.4）\n\n![NR=0.4_原图](11.png)![NR=0.4_修复图](12.png)\n\n\n\nC（noise rate = 0.6）\n\n![NR=0.6_原图](13.png)![NR=0.6_修复图](14.png)\n\n\n\nD（根据原图自己生成，测试迭代过程中损失的减少）\n\n![误差测试](15.png)\n\n\n\n\n\n<br>\n\n## 潜在的优化展望\n\n1. 由于每个块的修复是独立的，可以考虑使用CPU多线程计算或者在GPU上用CUDA进行并行优化，加速整个修复过程。\n2. 使用更复杂的网络来拟合。\n3. 使用马尔科夫随机场的方法来做图像降噪。\n\n","slug":"Image-Restoration-SimpleVersion","published":1,"updated":"2019-05-12T02:02:44.718Z","_id":"cjvkbt85900006cuuavtvim7h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"基于0-1乘性噪声的图片降噪\"><a href=\"#基于0-1乘性噪声的图片降噪\" class=\"headerlink\" title=\"基于0-1乘性噪声的图片降噪\"></a>基于0-1乘性噪声的图片降噪</h1><br>\n\n<h2 id=\"项目内容\"><a href=\"#项目内容\" class=\"headerlink\" title=\"项目内容\"></a>项目内容</h2><p>给定3张受损图像，尝试恢复他们的原始图像。</p>\n<ol>\n<li>原始图像包含1张黑白图像（A.png）和2张彩色图像（B.png, C.png）。</li>\n<li>受损图像$X$是由原始图像$I \\in R ^ { H * W * C }$添加了不同噪声遮罩$M \\in R ^ { H * W * C }$得到的$x=I \\odot m$，其中$ \\odot $是逐元素相乘。</li>\n<li>噪声遮罩仅包含{0,1}值。对应原图（A/B/C）的噪声遮罩的每行分别用0.8/0.4/0.6的噪声比率产生的，即噪声遮罩每个通道每行80%/40%/60%的像素值为0，其他为1。</li>\n</ol>\n<p><strong>评估误差为恢复图像与原始图像向量化后的差向量的2-范数，此误差越小越好。</strong></p>\n<br>\n\n<h2 id=\"实现介绍\"><a href=\"#实现介绍\" class=\"headerlink\" title=\"实现介绍\"></a>实现介绍</h2><br>\n\n<h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>由于图片的像素点在空间上满足局部相似的特征，相邻的像素点通道值变化往往是平滑且有一定规则的。因此，我们可以用一个模型来拟合像素点通道值在空间上的关系。具体实现中，我们将图片切割成若干个小矩形块，然后使用一个二维线性回归模型来回归每个小矩形块中位置和像素通道值的函数关系。为了使结果更加平滑和可靠，我们采用了高斯函数作为基函数。</p>\n<br>\n\n<h3 id=\"高斯函数\"><a href=\"#高斯函数\" class=\"headerlink\" title=\"高斯函数\"></a>高斯函数</h3><p>当我们对一个 ss * ss 的像素矩阵块做回归的时候，我们要把所有没有被噪音损坏的点都提取出来。点位置用一个高斯核函数处理，这样原来的点坐标(x,y)就被转换成了$(e^{-\\frac{(x-mid)^2}{2}},e^{-\\frac{(y-mid)^2}{2}})$，在特征空间中用来刻画这个点与矩阵块中心的距离。这样，我们实际要回归的就是点心距与像素通道值的关系。</p>\n<p>这样做，主要是因为我们的局部性原理本身就是不带方向性的，所谓的局部性就是指临近的点存在某种平滑的变化关系。使用这样一个衡量距离的核函数，可以使得我们的回归结果更加平滑：</p>\n<p><img src=\"1.png\" alt=\"Non-Gaussian\"><img src=\"2.png\" alt=\"Gaussian\"></p>\n<p>上图左边是用坐标直接回归，右图是坐标经过高斯核处理后回归的结果。可以看到左边有大量的不平滑的交错的黑白点，看起来很“脏”。右边由于采用了高斯函数处理过的表征距离关系的核函数，结果更加平滑，清晰。</p>\n<p>CODE : </p>\n<p><img src=\"0.png\" alt=\"CODE OF GAUSSIAN KERNEL\"></p>\n<br>\n\n<h3 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h3><p>提取完特征后的数据点拟合，就是一个简单的线性回归任务而已，我们采用最小二乘法回归。<br>$$<br>Loss = \\frac {\\Sigma_{i=0}^n(y_i-\\phi(x_i) * w^T)^2}{n}=\\frac{\\Sigma_{i=1}^{n}Loss_i}{n}<br>$$<br>使用随机梯度下降来最优化损失函数：<br>$$<br>w\\leftarrow w-\\eta * \\triangledown Loss_i=w+2\\eta(y_i-\\phi(x_i) * w^T) * \\phi(x_i)<br>$$<br>具体实现中，我们取步长=0.005，进行100轮随机梯度下降。</p>\n<p>CODE : </p>\n<p><img src=\"3.png\" alt=\"CODE OF TRAINING\"></p>\n<p>​    <br></p>\n<h3 id=\"迭代降噪\"><a href=\"#迭代降噪\" class=\"headerlink\" title=\"迭代降噪\"></a>迭代降噪</h3><p>我们前面提到了，我们要把图片切成若干个小矩形块，对每个小矩形块分别进行回归，那么这个小矩形块的尺寸取多少比较合适呢？</p>\n<p>我们先取ss=2尝试一下：</p>\n<p><img src=\"4.png\" alt=\"SS=2\"></p>\n<p>噪音为0.8的时候，我们可以看到，如果取一个2*2的块，期望其中没损坏的通道只有0.8个，所以势必有大量的矩阵块里面都是全损坏的，这会使得一些全损坏的块得不到修复，产生大量的黑点。</p>\n<p>直接取ss=5：</p>\n<p><img src=\"5.png\" alt=\"SS=5\"></p>\n<p>显然，黑块的数量变少了，但是实际上图片给人的颗粒赶很明显，更像是一堆模糊的马赛克拼图拼凑而成的。</p>\n<p>我们的解决办法是先取ss=2，对图片做恢复，然后将恢复的图像再用更大的ss来恢复。</p>\n<p>下面是用ss={2，3，4，5}迭代恢复四次的过程：</p>\n<p><img src=\"6.png\" alt=\"SS-&gt;2\"><img src=\"7.png\" alt=\"SS-&gt;2-&gt;3\">    </p>\n<p><img src=\"8.png\" alt=\"SS-&gt;2-&gt;3-&gt;4\"><img src=\"9.png\" alt=\"SS-&gt;2-&gt;3-&gt;4-&gt;5\"></p>\n<p>可以看到黑点逐渐被消除，并且最后经过ss=5的回归后得到的结果在视觉效果上明显优于直接用ss=5进行回归。这种想法本质上是一种<font color=\"red\">贪心算法</font>。先将损失密度小的局部块恢复好，再充分利用之前修复出来的信息将损失密度更大的块修复。</p>\n<br>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>A （noise rate = 0.8）</p>\n<p><img src=\"10.png\" alt=\"NR=0.8_原图\"><img src=\"9.png\" alt=\"NR=0.8_修复图\"></p>\n<p>B（noise rate = 0.4）</p>\n<p><img src=\"11.png\" alt=\"NR=0.4_原图\"><img src=\"12.png\" alt=\"NR=0.4_修复图\"></p>\n<p>C（noise rate = 0.6）</p>\n<p><img src=\"13.png\" alt=\"NR=0.6_原图\"><img src=\"14.png\" alt=\"NR=0.6_修复图\"></p>\n<p>D（根据原图自己生成，测试迭代过程中损失的减少）</p>\n<p><img src=\"15.png\" alt=\"误差测试\"></p>\n<br>\n\n<h2 id=\"潜在的优化展望\"><a href=\"#潜在的优化展望\" class=\"headerlink\" title=\"潜在的优化展望\"></a>潜在的优化展望</h2><ol>\n<li>由于每个块的修复是独立的，可以考虑使用CPU多线程计算或者在GPU上用CUDA进行并行优化，加速整个修复过程。</li>\n<li>使用更复杂的网络来拟合。</li>\n<li>使用马尔科夫随机场的方法来做图像降噪。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于0-1乘性噪声的图片降噪\"><a href=\"#基于0-1乘性噪声的图片降噪\" class=\"headerlink\" title=\"基于0-1乘性噪声的图片降噪\"></a>基于0-1乘性噪声的图片降噪</h1><br>\n\n<h2 id=\"项目内容\"><a href=\"#项目内容\" class=\"headerlink\" title=\"项目内容\"></a>项目内容</h2><p>给定3张受损图像，尝试恢复他们的原始图像。</p>\n<ol>\n<li>原始图像包含1张黑白图像（A.png）和2张彩色图像（B.png, C.png）。</li>\n<li>受损图像$X$是由原始图像$I \\in R ^ { H * W * C }$添加了不同噪声遮罩$M \\in R ^ { H * W * C }$得到的$x=I \\odot m$，其中$ \\odot $是逐元素相乘。</li>\n<li>噪声遮罩仅包含{0,1}值。对应原图（A/B/C）的噪声遮罩的每行分别用0.8/0.4/0.6的噪声比率产生的，即噪声遮罩每个通道每行80%/40%/60%的像素值为0，其他为1。</li>\n</ol>\n<p><strong>评估误差为恢复图像与原始图像向量化后的差向量的2-范数，此误差越小越好。</strong></p>\n<br>\n\n<h2 id=\"实现介绍\"><a href=\"#实现介绍\" class=\"headerlink\" title=\"实现介绍\"></a>实现介绍</h2><br>\n\n<h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>由于图片的像素点在空间上满足局部相似的特征，相邻的像素点通道值变化往往是平滑且有一定规则的。因此，我们可以用一个模型来拟合像素点通道值在空间上的关系。具体实现中，我们将图片切割成若干个小矩形块，然后使用一个二维线性回归模型来回归每个小矩形块中位置和像素通道值的函数关系。为了使结果更加平滑和可靠，我们采用了高斯函数作为基函数。</p>\n<br>\n\n<h3 id=\"高斯函数\"><a href=\"#高斯函数\" class=\"headerlink\" title=\"高斯函数\"></a>高斯函数</h3><p>当我们对一个 ss * ss 的像素矩阵块做回归的时候，我们要把所有没有被噪音损坏的点都提取出来。点位置用一个高斯核函数处理，这样原来的点坐标(x,y)就被转换成了$(e^{-\\frac{(x-mid)^2}{2}},e^{-\\frac{(y-mid)^2}{2}})$，在特征空间中用来刻画这个点与矩阵块中心的距离。这样，我们实际要回归的就是点心距与像素通道值的关系。</p>\n<p>这样做，主要是因为我们的局部性原理本身就是不带方向性的，所谓的局部性就是指临近的点存在某种平滑的变化关系。使用这样一个衡量距离的核函数，可以使得我们的回归结果更加平滑：</p>\n<p><img src=\"1.png\" alt=\"Non-Gaussian\"><img src=\"2.png\" alt=\"Gaussian\"></p>\n<p>上图左边是用坐标直接回归，右图是坐标经过高斯核处理后回归的结果。可以看到左边有大量的不平滑的交错的黑白点，看起来很“脏”。右边由于采用了高斯函数处理过的表征距离关系的核函数，结果更加平滑，清晰。</p>\n<p>CODE : </p>\n<p><img src=\"0.png\" alt=\"CODE OF GAUSSIAN KERNEL\"></p>\n<br>\n\n<h3 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h3><p>提取完特征后的数据点拟合，就是一个简单的线性回归任务而已，我们采用最小二乘法回归。<br>$$<br>Loss = \\frac {\\Sigma_{i=0}^n(y_i-\\phi(x_i) * w^T)^2}{n}=\\frac{\\Sigma_{i=1}^{n}Loss_i}{n}<br>$$<br>使用随机梯度下降来最优化损失函数：<br>$$<br>w\\leftarrow w-\\eta * \\triangledown Loss_i=w+2\\eta(y_i-\\phi(x_i) * w^T) * \\phi(x_i)<br>$$<br>具体实现中，我们取步长=0.005，进行100轮随机梯度下降。</p>\n<p>CODE : </p>\n<p><img src=\"3.png\" alt=\"CODE OF TRAINING\"></p>\n<p>​    <br></p>\n<h3 id=\"迭代降噪\"><a href=\"#迭代降噪\" class=\"headerlink\" title=\"迭代降噪\"></a>迭代降噪</h3><p>我们前面提到了，我们要把图片切成若干个小矩形块，对每个小矩形块分别进行回归，那么这个小矩形块的尺寸取多少比较合适呢？</p>\n<p>我们先取ss=2尝试一下：</p>\n<p><img src=\"4.png\" alt=\"SS=2\"></p>\n<p>噪音为0.8的时候，我们可以看到，如果取一个2*2的块，期望其中没损坏的通道只有0.8个，所以势必有大量的矩阵块里面都是全损坏的，这会使得一些全损坏的块得不到修复，产生大量的黑点。</p>\n<p>直接取ss=5：</p>\n<p><img src=\"5.png\" alt=\"SS=5\"></p>\n<p>显然，黑块的数量变少了，但是实际上图片给人的颗粒赶很明显，更像是一堆模糊的马赛克拼图拼凑而成的。</p>\n<p>我们的解决办法是先取ss=2，对图片做恢复，然后将恢复的图像再用更大的ss来恢复。</p>\n<p>下面是用ss={2，3，4，5}迭代恢复四次的过程：</p>\n<p><img src=\"6.png\" alt=\"SS-&gt;2\"><img src=\"7.png\" alt=\"SS-&gt;2-&gt;3\">    </p>\n<p><img src=\"8.png\" alt=\"SS-&gt;2-&gt;3-&gt;4\"><img src=\"9.png\" alt=\"SS-&gt;2-&gt;3-&gt;4-&gt;5\"></p>\n<p>可以看到黑点逐渐被消除，并且最后经过ss=5的回归后得到的结果在视觉效果上明显优于直接用ss=5进行回归。这种想法本质上是一种<font color=\"red\">贪心算法</font>。先将损失密度小的局部块恢复好，再充分利用之前修复出来的信息将损失密度更大的块修复。</p>\n<br>\n\n<h2 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h2><p>A （noise rate = 0.8）</p>\n<p><img src=\"10.png\" alt=\"NR=0.8_原图\"><img src=\"9.png\" alt=\"NR=0.8_修复图\"></p>\n<p>B（noise rate = 0.4）</p>\n<p><img src=\"11.png\" alt=\"NR=0.4_原图\"><img src=\"12.png\" alt=\"NR=0.4_修复图\"></p>\n<p>C（noise rate = 0.6）</p>\n<p><img src=\"13.png\" alt=\"NR=0.6_原图\"><img src=\"14.png\" alt=\"NR=0.6_修复图\"></p>\n<p>D（根据原图自己生成，测试迭代过程中损失的减少）</p>\n<p><img src=\"15.png\" alt=\"误差测试\"></p>\n<br>\n\n<h2 id=\"潜在的优化展望\"><a href=\"#潜在的优化展望\" class=\"headerlink\" title=\"潜在的优化展望\"></a>潜在的优化展望</h2><ol>\n<li>由于每个块的修复是独立的，可以考虑使用CPU多线程计算或者在GPU上用CUDA进行并行优化，加速整个修复过程。</li>\n<li>使用更复杂的网络来拟合。</li>\n<li>使用马尔科夫随机场的方法来做图像降噪。</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/cuprof/d.jpg","slug":"d.jpg","post":"cjvkbrmzh0002jwuuvvjlxv29","modified":0,"renderable":0},{"_id":"source/_posts/tensorflow/1.png","slug":"1.png","post":"cjvkbrmzm0005jwuuqq2lgb81","modified":0,"renderable":0},{"_id":"source/_posts/tensorflow/2.png","slug":"2.png","post":"cjvkbrmzm0005jwuuqq2lgb81","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/13.png","slug":"13.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/1.png","slug":"1.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/12.png","slug":"12.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/14.png","slug":"14.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/first/ttfish.jpeg","slug":"ttfish.jpeg","post":"cjvkbrmzq0007jwuuc1xu6kis","modified":0,"renderable":0},{"_id":"source/_posts/cuprof/a.jpg","slug":"a.jpg","post":"cjvkbrmzh0002jwuuvvjlxv29","modified":0,"renderable":0},{"_id":"source/_posts/cuprof/b.jpg","slug":"b.jpg","post":"cjvkbrmzh0002jwuuvvjlxv29","modified":0,"renderable":0},{"_id":"source/_posts/cuprof/c.jpg","slug":"c.jpg","post":"cjvkbrmzh0002jwuuvvjlxv29","modified":0,"renderable":0},{"_id":"source/_posts/tensorflow/3.png","slug":"3.png","post":"cjvkbrmzm0005jwuuqq2lgb81","modified":0,"renderable":0},{"_id":"source/_posts/tensorflow/5.png","slug":"5.png","post":"cjvkbrmzm0005jwuuqq2lgb81","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/OG.png","slug":"OG.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/bp/bp_net.jpg","slug":"bp_net.jpg","post":"cjvkbrn0r000ujwuuyxbvjcpg","modified":0,"renderable":0},{"_id":"source/_posts/bp/neuron.png","slug":"neuron.png","post":"cjvkbrn0r000ujwuuyxbvjcpg","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#1.png","slug":"#1.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#2.png","slug":"#2.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#3.png","slug":"#3.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#4.png","slug":"#4.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#6.png","slug":"#6.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Virtual-Memory-and-TLB/#7.png","slug":"#7.png","post":"cjvkbrn0q000sjwuuv7e0aodx","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/11.png","slug":"11.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/0.png","slug":"0.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/10.png","slug":"10.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/15.png","slug":"15.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/2.png","slug":"2.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/3.png","slug":"3.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/4.png","slug":"4.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/5.png","slug":"5.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/6.png","slug":"6.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/7.png","slug":"7.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/8.png","slug":"8.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/Image-Restoration-SimpleVersion/9.png","slug":"9.png","post":"cjvkbt85900006cuuavtvim7h","modified":0,"renderable":0},{"_id":"source/_posts/cuda/1.png","slug":"1.png","post":"cjvkbrn140016jwuuvv9r6qyp","modified":0,"renderable":0},{"_id":"source/_posts/cuda/2.png","slug":"2.png","post":"cjvkbrn140016jwuuvv9r6qyp","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjvkbrmz80000jwuun6045si1","tag_id":"cjvkbrmzk0004jwuubpqerdcy","_id":"cjvkbrn01000ajwuu57kb6pu2"},{"post_id":"cjvkbrmz80000jwuun6045si1","tag_id":"cjvkbrmzv0008jwuu334i9i4z","_id":"cjvkbrn03000bjwuuupdacrru"},{"post_id":"cjvkbrmzh0002jwuuvvjlxv29","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn0b000fjwuuqndomc01"},{"post_id":"cjvkbrmzh0002jwuuvvjlxv29","tag_id":"cjvkbrn05000cjwuuvmvxi650","_id":"cjvkbrn0b000gjwuu28ydahhf"},{"post_id":"cjvkbrmzh0002jwuuvvjlxv29","tag_id":"cjvkbrn08000djwuumt8jkhen","_id":"cjvkbrn0c000ijwuugbr86pi3"},{"post_id":"cjvkbrmzm0005jwuuqq2lgb81","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn0d000kjwuuqpgkzmnm"},{"post_id":"cjvkbrmzm0005jwuuqq2lgb81","tag_id":"cjvkbrn0c000hjwuun6jol62h","_id":"cjvkbrn0e000ljwuukoy6jdn7"},{"post_id":"cjvkbrmzq0007jwuuc1xu6kis","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn0f000ojwuutg3vnx8u"},{"post_id":"cjvkbrmzq0007jwuuc1xu6kis","tag_id":"cjvkbrn0e000mjwuuzlj2bgay","_id":"cjvkbrn0g000pjwuuajjmhrd8"},{"post_id":"cjvkbrmzq0007jwuuc1xu6kis","tag_id":"cjvkbrn0f000njwuu9jwvv09z","_id":"cjvkbrn0g000qjwuuhfdx2u04"},{"post_id":"cjvkbrn0q000sjwuuv7e0aodx","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn0z0010jwuuq3wdeahd"},{"post_id":"cjvkbrn0q000sjwuuv7e0aodx","tag_id":"cjvkbrn0s000vjwuuzy9upxxq","_id":"cjvkbrn0z0011jwuupzhimupo"},{"post_id":"cjvkbrn0q000sjwuuv7e0aodx","tag_id":"cjvkbrn0t000xjwuue6gndgg7","_id":"cjvkbrn0z0012jwuu6taxarox"},{"post_id":"cjvkbrn0q000sjwuuv7e0aodx","tag_id":"cjvkbrn0w000yjwuu0jnoq0p7","_id":"cjvkbrn100013jwuun37djx4y"},{"post_id":"cjvkbrn0r000ujwuuyxbvjcpg","tag_id":"cjvkbrn0y000zjwuufs4fzs8v","_id":"cjvkbrn100014jwuu73xzgp3e"},{"post_id":"cjvkbrn0r000ujwuuyxbvjcpg","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn100015jwuue18bdy7s"},{"post_id":"cjvkbrn140016jwuuvv9r6qyp","tag_id":"cjvkbrmzz0009jwuuu8d0ohy8","_id":"cjvkbrn160017jwuurcagl2zc"},{"post_id":"cjvkbrn140016jwuuvv9r6qyp","tag_id":"cjvkbrn05000cjwuuvmvxi650","_id":"cjvkbrn180018jwuun68zgjzt"},{"post_id":"cjvkbt85900006cuuavtvim7h","tag_id":"cjvkbrn0r000tjwuuta1dmqxx","_id":"cjvkbt85b00016cuub608cq01"}],"Tag":[{"name":"MySQL","_id":"cjvkbrmzk0004jwuubpqerdcy"},{"name":"CentOS","_id":"cjvkbrmzv0008jwuu334i9i4z"},{"name":"Tech","_id":"cjvkbrmzz0009jwuuu8d0ohy8"},{"name":"CUDA","_id":"cjvkbrn05000cjwuuvmvxi650"},{"name":"Profile","_id":"cjvkbrn08000djwuumt8jkhen"},{"name":"Tensorflow","_id":"cjvkbrn0c000hjwuun6jol62h"},{"name":"Spc","_id":"cjvkbrn0e000mjwuuzlj2bgay"},{"name":"ZJU","_id":"cjvkbrn0f000njwuu9jwvv09z"},{"name":"AI","_id":"cjvkbrn0r000tjwuuta1dmqxx"},{"name":"Operating Susyem","_id":"cjvkbrn0s000vjwuuzy9upxxq"},{"name":"Virtual Memory","_id":"cjvkbrn0t000xjwuue6gndgg7"},{"name":"TLB","_id":"cjvkbrn0w000yjwuu0jnoq0p7"},{"name":"Machine Learning","_id":"cjvkbrn0y000zjwuufs4fzs8v"}]}}